{"version":3,"sources":["rum/core.cljs"],"mappings":"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","names":["rum.core/state","comp","goog.object/get","rum.core/extend!","obj","props","seq__28884","cljs.core/seq","chunk__28886","count__28887","i__28888","vec__28896","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__28899","cljs.core/first","cljs.core/next","k","v","goog.object/set","cljs.core/name","cljs.core/clj->js","rum.core/build-class","render","mixins","display-name","js/goog.DEBUG","cljs.core.mapcat","cljs.core/keys","cljs.core/set","js/Error","clojure.set/subset?","rum.specs/mixins","clojure.set.difference","cljs.core/select-keys","rum.specs/deprecated-mixins","cljs.core/vals","p1__28902#","cljs.core/run!","js/console","init","rum.util/collect","before-render","rum.util/collect*","wrap-render","wrapped-render","p1__28904#","p2__28903#","cljs.core.reduce","did-mount","will-remount","should-update","before-update","did-update","did-catch","will-unmount","child-context","class-props","cljs.core/merge","static-props","ctor","this","cljs.core.assoc","rum.util.call_all","cljs.core/volatile!","js/React.Component","_","goog/inherits","prototype","cljs.core/empty?","cljs.core/-vreset!","cljs.core/-deref","rum.util/call-all","next-props","cljs.core/deref","old-state","state","cljs.core.merge","next-state","p1__28906#","p2__28905#","new-state","or__4120__auto__","p1__28907#","cljs.core/some","vec__28927","dom","G__28930","cljs.core/vreset!","error","info","cljs.core.transduce","p1__28908#","cljs.core.map","rum.core/set-meta!","c","f","ctr","x28931","cljs.core/PROTOCOL_SENTINEL","cljs.core/meta","rum.core/lazy-build","bf","goog.functions/cacheReturnValue","rum.core/build-ctor","class","key-fn","args","cljs.core.apply","js/React.createElement","cljs.core/with-meta","rum.core/memo-compare-props","prev-props","cljs.core._EQ_","rum.core/react-memo","temp__5737__auto__","memo","js/React","rum.core/build-defc","render-body","rum.core/static","memo-class","rum.core/build-defcs","rum.core/build-defcc","rum.core/request-render","rum.core/mount","element","node","js/ReactDOM.render","rum.core/unmount","js/ReactDOM.unmountComponentAtNode","rum.core/hydrate","js/ReactDOM.hydrate","rum.core/portal","js/ReactDOM.createPortal","rum.core/create-context","default-value","rum.core/with-key","key","js/React.cloneElement","rum.core/with-ref","ref","rum.core/dom-node","js/ReactDOM.findDOMNode","rum.core/ref","rum.core/ref-node","cljs.core.not_EQ_","var_args","G__28946","rum.core/local","initial","rum.core.local","local-state","cljs.core.atom","component","cljs.core/add-watch","p","n","rum.core/reactive","cljs.core/random-uuid","render-fn","*reactions*-orig-val__28964","*reactions*-temp-val__28965","rum.core/*reactions*","vec__28968","old-reactions","new-reactions","seq__28971","chunk__28972","count__28973","i__28974","cljs.core/contains?","cljs.core/remove-watch","seq__28980","chunk__28981","count__28982","i__28983","seq__29015","chunk__29016","count__29017","i__29018","cljs.core.dissoc","rum.core/react","cljs.core.conj","rum.core/derived-atom","rum.derived-atom/derived-atom","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","rum.core/cursor-in","p__29026","map__29027","cljs.core/hash-map","seq29023","G__29024","G__29025","self__4717__auto__","path","options","rum.cursor/Cursor","cljs.core.into","rum.core/cursor","seq29029","G__29030","G__29031","rum.core/use-state","value-or-fn","rum.core/use-reducer","reducer-fn","initial-value","p1__29032#","p2__29033#","cljs.core/identity","G__29035","rum.core/use-effect!","setup-fn","js/undefined","deps","cljs.core/array?","cljs.core.into_array","G__29037","rum.core/use-layout-effect!","G__29041","rum.core/use-callback","callback","G__29046","rum.core/use-memo","rum.core/use-ref","rum.core/create-ref","rum.core/deref","rum.core/set-ref!","value","G__29052","rum.core/render-html","rum.core.render_html","opts","cljs.core/*target*","js/ReactDOMServer","react-dom-server","js/require","rum.core/render-static-markup","src","rum.core/adapt-class-helper","type","attrs","children"],"sourcesContent":["(ns rum.core\n  (:refer-clojure :exclude [ref deref])\n  (:require-macros rum.core)\n  (:require\n   [cljsjs.react]\n   [cljsjs.react.dom]\n   [goog.object :as gobj]\n   [goog.functions :as fns]\n   [clojure.set :as set]\n   [rum.specs]\n   [daiquiri.core]\n   [rum.cursor :as cursor]\n   [rum.util :as util :refer [collect collect* call-all]]\n   [rum.derived-atom :as derived-atom]))\n\n(defn state\n  \"Given React component, returns Rum state associated with it.\"\n  [comp]\n  (gobj/get (.-state comp) \":rum/state\"))\n\n(defn- extend! [obj props]\n  (doseq [[k v] props\n          :when (some? v)]\n    (gobj/set obj (name k) (clj->js v))))\n\n(defn- build-class [render mixins display-name]\n  (when ^boolean goog.DEBUG\n    (let [mixins (->> mixins (mapcat keys) set)]\n      (assert (set/subset? mixins rum.specs/mixins)\n              (str display-name \" declares invalid mixin keys \"\n                   (set/difference mixins rum.specs/mixins) \", \"\n                   \"did you mean one of \" rum.specs/mixins))\n      (->> (select-keys rum.specs/deprecated-mixins mixins)\n           vals\n           (run! #(.warn js/console %)))))\n  (let [init           (collect   :init mixins)             ;; state props -> state\n        before-render  (collect* [:will-mount\n                                  :unsafe/will-mount\n                                  :before-render] mixins)   ;; state -> state\n        render         render                               ;; state -> [dom state]\n        wrap-render    (collect   :wrap-render mixins)      ;; render-fn -> render-fn\n        wrapped-render (reduce #(%2 %1) render wrap-render)\n        did-mount      (collect* [:did-mount                ;; state -> state\n                                  :after-render] mixins)    ;; state -> state\n        will-remount    (collect* [:did-remount             ;; state -> state\n                                   :will-remount] mixins)   ;; old-state state -> state\n        should-update  (collect   :should-update mixins)    ;; old-state state -> boolean\n        before-update  (collect* [:unsafe/will-update\n                                  :unsafe/will-update\n                                  :before-render] mixins)   ;; state -> state\n        did-update     (collect* [:did-update               ;; state -> state\n                                  :after-render] mixins)    ;; state -> state\n        did-catch      (collect   :did-catch mixins)        ;; state error info -> state\n        will-unmount   (collect   :will-unmount mixins)     ;; state -> state\n        child-context  (collect   :child-context mixins)    ;; state -> child-context\n        class-props    (reduce merge (collect :class-properties mixins))  ;; custom prototype properties and methods\n        static-props   (reduce merge (collect :static-properties mixins)) ;; custom static properties and methods\n\n        ctor           (fn [props]\n                         (this-as this\n                                  (gobj/set this \"state\"\n                                            #js {\":rum/state\"\n                                                 (-> (gobj/get props \":rum/initial-state\")\n                                                     (assoc :rum/react-component this)\n                                                     (call-all init props)\n                                                     volatile!)})\n                                  (.call js/React.Component this props)))\n        _              (goog/inherits ctor js/React.Component)\n        prototype      (gobj/get ctor \"prototype\")]\n\n    (when-not (empty? before-render)\n      (gobj/set prototype \"UNSAFE_componentWillMount\"\n                (fn []\n                  (this-as this\n                    (vswap! (state this) call-all before-render)))))\n\n    (when-not (empty? did-mount)\n      (gobj/set prototype \"componentDidMount\"\n                (fn []\n                  (this-as this\n                           (vswap! (state this) call-all did-mount)))))\n\n    (gobj/set prototype \"UNSAFE_componentWillReceiveProps\"\n              (fn [next-props]\n                (this-as this\n                         (let [old-state  @(state this)\n                               state      (merge old-state\n                                                 (gobj/get next-props \":rum/initial-state\"))\n                               next-state (reduce #(%2 old-state %1) state will-remount)]\n            ;; allocate new volatile so that we can access both old and new states in shouldComponentUpdate\n                           (.setState this #js {\":rum/state\" (volatile! next-state)})))))\n\n    (when-not (empty? should-update)\n      (gobj/set prototype \"shouldComponentUpdate\"\n                (fn [next-props next-state]\n                  (this-as this\n                           (let [old-state @(state this)\n                                 new-state @(gobj/get next-state \":rum/state\")]\n                             (or (some #(% old-state new-state) should-update) false))))))\n\n    (when-not (empty? before-update)\n      (gobj/set prototype \"UNSAFE_componentWillUpdate\"\n                (fn [_ next-state]\n                  (this-as this\n                    (let [new-state (gobj/get next-state \":rum/state\")]\n                      (vswap! new-state call-all before-update))))))\n\n    (gobj/set prototype \"render\"\n              (fn []\n                (this-as this\n                         (let [state (state this)\n                               [dom next-state] (wrapped-render @state)]\n                           (vreset! state next-state)\n                           dom))))\n\n    (when-not (empty? did-update)\n      (gobj/set prototype \"componentDidUpdate\"\n                (fn [_ _]\n                  (this-as this\n                           (vswap! (state this) call-all did-update)))))\n\n    (when-not (empty? did-catch)\n      (gobj/set prototype \"componentDidCatch\"\n                (fn [error info]\n                  (this-as this\n                           (vswap! (state this) call-all did-catch error {:rum/component-stack (gobj/get info \"componentStack\")})\n                           (.forceUpdate this)))))\n\n    (gobj/set prototype \"componentWillUnmount\"\n              (fn []\n                (this-as this\n                         (when-not (empty? will-unmount)\n                           (vswap! (state this) call-all will-unmount))\n                         (gobj/set this \":rum/unmounted?\" true))))\n\n    (when-not (empty? child-context)\n      (gobj/set prototype \"getChildContext\"\n                (fn []\n                  (this-as this\n                           (let [state @(state this)]\n                             (clj->js (transduce (map #(% state)) merge {} child-context)))))))\n\n    (extend! prototype class-props)\n    (gobj/set ctor \"displayName\" display-name)\n    (extend! ctor static-props)\n    ctor))\n\n(defn- set-meta! [c]\n  (let [f #(let [ctr (c)]\n             (.apply ctr ctr (js-arguments)))]\n    (specify! f IMeta (-meta [_] (meta (c))))\n    f))\n\n(defn lazy-build\n  \"Wraps component construction in a way so that Google Closure Compiler\n   can properly recognize and elide unused components. The extra `set-meta`\n   fn is needed so that the compiler can properly detect that all functions\n   are side effect free.\"\n  [ctor render mixins display-name]\n  (let [bf #(ctor render mixins display-name) ;; Avoid IIFE\n        c  (fns/cacheReturnValue bf)]\n    (set-meta! c)))\n\n(defn- build-ctor [render mixins display-name]\n  (let [class  (build-class render mixins display-name)\n        key-fn (first (collect :key-fn mixins))\n        ctor   (if (some? key-fn)\n                 (fn [& args]\n                   (let [props #js {\":rum/initial-state\" {:rum/args args}\n                                    \"key\" (apply key-fn args)}]\n                     (js/React.createElement class props)))\n                 (fn [& args]\n                   (let [props #js {\":rum/initial-state\" {:rum/args args}}]\n                     (js/React.createElement class props))))]\n    (with-meta ctor {:rum/class class})))\n\n(declare static)\n\n(defn- memo-compare-props [prev-props next-props]\n  (= (aget prev-props \":rum/args\")\n     (aget next-props \":rum/args\")))\n\n(defn react-memo [f]\n  (if-some [memo (.-memo js/React)]\n    (memo f memo-compare-props)\n    f))\n\n(defn ^:no-doc build-defc [render-body mixins display-name]\n  (cond\n    (= mixins [static])\n    (let [class (fn [props]\n                  (apply render-body (aget props \":rum/args\")))\n          _     (aset class \"displayName\" display-name)\n          memo-class (react-memo class)\n          ctor  (fn [& args]\n                  (.createElement js/React memo-class #js {\":rum/args\" args}))]\n      (with-meta ctor {:rum/class memo-class}))\n\n    (empty? mixins)\n    (let [class (fn [props]\n                  (apply render-body (aget props \":rum/args\")))\n          _     (aset class \"displayName\" display-name)\n          ctor  (fn [& args]\n                  (.createElement js/React class #js {\":rum/args\" args}))]\n      (with-meta ctor {:rum/class class}))\n\n    :else\n    (let [render (fn [state] [(apply render-body (:rum/args state)) state])]\n      (build-ctor render mixins display-name))))\n\n(defn ^:no-doc build-defcs [render-body mixins display-name]\n  (let [render (fn [state] [(apply render-body state (:rum/args state)) state])]\n    (build-ctor render mixins display-name)))\n\n(defn ^:no-doc build-defcc [render-body mixins display-name]\n  (let [render (fn [state] [(apply render-body (:rum/react-component state) (:rum/args state)) state])]\n    (build-ctor render mixins display-name)))\n\n(defn request-render [comp]\n  (.forceUpdate comp))\n\n(defn mount\n  \"Add element to the DOM tree. Idempotent. Subsequent mounts will just update element.\"\n  [element node]\n  (js/ReactDOM.render element node)\n  nil)\n\n(defn unmount\n  \"Removes component from the DOM tree.\"\n  [node]\n  (js/ReactDOM.unmountComponentAtNode node))\n\n(defn hydrate\n  \"Same as [[mount]] but must be called on DOM tree already rendered by a server via [[render-html]].\"\n  [element node]\n  (js/ReactDOM.hydrate element node))\n\n(defn portal\n  \"Render `element` in a DOM `node` that is ouside of current DOM hierarchy.\"\n  [element node]\n  (js/ReactDOM.createPortal element node))\n\n(defn create-context [default-value]\n  (.createContext js/React default-value))\n\n\n;; initialization\n\n\n(defn with-key\n  \"Adds React key to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-key \\\"abc\\\")\n       (rum/mount js/document.body))\n   ```\"\n  [element key]\n  (js/React.cloneElement element #js {\"key\" key} nil))\n\n(defn with-ref\n  \"Adds React ref (string or callback) to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-ref \\\"abc\\\")\n       (rum/mount js/document.body))\n   ```\"\n  [element ref]\n  (js/React.cloneElement element #js {\"ref\" ref} nil))\n\n(defn dom-node\n  \"Usage of this function is discouraged. Use :ref callback instead.\n  Given state, returns top-level DOM node of component. Call it during lifecycle callbacks. Can\u2019t be called during render.\"\n  [state]\n  (js/ReactDOM.findDOMNode (:rum/react-component state)))\n\n(defn ref\n  \"DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns React component.\"\n  [state key]\n  (-> state :rum/react-component (aget \"refs\") (aget (name key))))\n\n(defn ref-node\n  \"DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns DOM node associated with ref.\"\n  [state key]\n  (js/ReactDOM.findDOMNode (ref state (name key))))\n\n\n;; static mixin\n\n\n(def static\n  \"Mixin. Will avoid re-render if none of component\u2019s arguments have changed. Does equality check (`=`) on all arguments.\n  \n   ```\n   (rum/defc label < rum/static\n     [text]\n     [:div text])\n     \n   (rum/mount (label \\\"abc\\\") js/document.body)\n\n   ;; def != abc, will re-render\n   (rum/mount (label \\\"def\\\") js/document.body)\n\n   ;; def == def, won\u2019t re-render\n   (rum/mount (label \\\"def\\\") js/document.body)\n   ```\"\n  {:should-update\n   (fn [old-state new-state]\n     (not= (:rum/args old-state) (:rum/args new-state)))})\n\n\n;; local mixin\n\n\n(defn local\n  \"Mixin constructor. Adds an atom to component\u2019s state that can be used to keep stuff during component\u2019s lifecycle. Component will be re-rendered if atom\u2019s value changes. Atom is stored under user-provided key or under `:rum/local` by default.\n  \n   ```\n   (rum/defcs counter < (rum/local 0 :cnt)\n     [state label]\n     (let [*cnt (:cnt state)]\n       [:div {:on-click (fn [_] (swap! *cnt inc))}\n         label @*cnt]))\n   \n   (rum/mount (counter \\\"Click count: \\\"))\n   ```\"\n  ([initial] (local initial :rum/local))\n  ([initial key]\n   {:will-mount\n    (fn [state]\n      (let [local-state (atom initial)\n            component   ^js (:rum/react-component state)]\n        (add-watch local-state key\n                   (fn [_ _ p n]\n                     (when (not= p n)\n                       (.forceUpdate component))))\n        (assoc state key local-state)))}))\n\n\n;; reactive mixin\n\n\n(def ^:private ^:dynamic *reactions*)\n\n(def reactive\n  \"Mixin. Works in conjunction with [[react]].\n  \n   ```\n   (rum/defc comp < rum/reactive\n     [*counter]\n     [:div (rum/react counter)])\n\n   (def *counter (atom 0))\n   (rum/mount (comp *counter) js/document.body)\n   (swap! *counter inc) ;; will force comp to re-render\n   ```\"\n  {:init\n   (fn [state props]\n     (assoc state :rum.reactive/key (random-uuid)))\n   :wrap-render\n   (fn [render-fn]\n     (fn [state]\n       (binding [*reactions* (volatile! #{})]\n         (let [comp             (:rum/react-component state)\n               old-reactions    (:rum.reactive/refs state #{})\n               [dom next-state] (render-fn state)\n               new-reactions    @*reactions*\n               key              (:rum.reactive/key state)]\n           (doseq [ref old-reactions]\n             (when-not (contains? new-reactions ref)\n               (remove-watch ref key)))\n           (doseq [ref new-reactions]\n             (when-not (contains? old-reactions ref)\n               (add-watch ref key\n                          (fn [_ _ p n]\n                            (when (not= p n)\n                              (.forceUpdate comp))))))\n           [dom (assoc next-state :rum.reactive/refs new-reactions)]))))\n   :will-unmount\n   (fn [state]\n     (let [key (:rum.reactive/key state)]\n       (doseq [ref (:rum.reactive/refs state)]\n         (remove-watch ref key)))\n     (dissoc state :rum.reactive/refs :rum.reactive/key))})\n\n(defn react\n  \"Works in conjunction with [[reactive]] mixin. Use this function instead of `deref` inside render, and your component will subscribe to changes happening to the derefed atom.\"\n  [ref]\n  (assert *reactions* \"rum.core/react is only supported in conjunction with rum.core/reactive\")\n  (vswap! *reactions* conj ref)\n  @ref)\n\n\n;; derived-atom\n\n\n(def ^{:style/indent 2\n       :arglists '([refs key f] [refs key f opts])\n       :doc \"Use this to create \u201cchains\u201d and acyclic graphs of dependent atoms.\n   \n             [[derived-atom]] will:\n          \n             - Take N \u201csource\u201d refs.\n             - Set up a watch on each of them.\n             - Create \u201csink\u201d atom.\n             - When any of source refs changes:\n                - re-run function `f`, passing N dereferenced values of source refs.\n                - `reset!` result of `f` to the sink atom.\n             - Return sink atom.\n\n             Example:\n\n             ```\n             (def *a (atom 0))\n             (def *b (atom 1))\n             (def *x (derived-atom [*a *b] ::key\n                       (fn [a b]\n                         (str a \\\":\\\" b))))\n             \n             (type *x)  ;; => clojure.lang.Atom\n             (deref *x) ;; => \\\"0:1\\\"\n             \n             (swap! *a inc)\n             (deref *x) ;; => \\\"1:1\\\"\n             \n             (reset! *b 7)\n             (deref *x) ;; => \\\"1:7\\\"\n             ```\n\n             Arguments:\n          \n             - `refs` - sequence of source refs,\n             - `key`  - unique key to register watcher, same as in `clojure.core/add-watch`,\n             - `f`    - function that must accept N arguments (same as number of source refs) and return a value to be written to the sink ref. Note: `f` will be called with already dereferenced values,\n             - `opts` - optional. Map of:\n               - `:ref` - use this as sink ref. By default creates new atom,\n               - `:check-equals?` - Defaults to `true`. If equality check should be run on each source update: `(= @sink (f new-vals))`. When result of recalculating `f` equals to the old value, `reset!` won\u2019t be called. Set to `false` if checking for equality can be expensive.\"}\n  derived-atom derived-atom/derived-atom)\n\n\n;; cursors\n\n\n(defn cursor-in\n  \"Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n   ```\n   (def db (atom { :users { \\\"Ivan\\\" { :age 30 }}}))\n   \n   (def ivan (rum/cursor db [:users \\\"Ivan\\\"]))\n   (deref ivan) ;; => { :age 30 }\n   \n   (swap! ivan update :age inc) ;; => { :age 31 }\n   (deref db) ;; => { :users { \\\"Ivan\\\" { :age 31 }}}\n   \n   (swap! db update-in [:users \\\"Ivan\\\" :age] inc)\n   ;; => { :users { \\\"Ivan\\\" { :age 32 }}}\n   \n   (deref ivan) ;; => { :age 32 }\n   ```\n  \n   Returned value supports `deref`, `swap!`, `reset!`, watches and metadata.\n  \n   The only supported option is `:meta`\"\n  [ref path & {:as options}]\n  (if (instance? cursor/Cursor ref)\n    (cursor/Cursor. (.-ref ref) (into (.-path ref) path) (:meta options))\n    (cursor/Cursor. ref path (:meta options))))\n\n(defn cursor\n  \"Same as [[cursor-in]] but accepts single key instead of path vector.\"\n  [ref key & options]\n  (apply cursor-in ref [key] options))\n\n;; hooks\n\n(defn ^array use-state\n  \"Takes initial value or value returning fn and returns a tuple of [value set-value!],\n  where `value` is current state value and `set-value!` is a function that schedules re-render.\n\n  (let [[value set-state!] (rum/use-state 0)]\n    [:button {:on-click #(set-state! (inc value))}\n      value])\"\n  [value-or-fn]\n  (.useState js/React value-or-fn))\n\n(defn ^array use-reducer\n  \"Takes reducing function and initial state value.\n  Returns a tuple of [value dispatch!], where `value` is current state value and `dispatch` is a function that schedules re-render.\n\n  (defmulti value-reducer (fn [value event] event))\n\n  (defmethod value-reducer :inc [value _]\n    (inc value))\n\n  (let [[value dispatch!] (rum/use-reducer value-reducer 0)]\n    [:button {:on-click #(dispatch! :inc)}\n      value])\n\n  Read more at https://reactjs.org/docs/hooks-reference.html#usereducer\"\n  ([reducer-fn initial-value]\n   (.useReducer js/React #(reducer-fn %1 %2) initial-value identity)))\n\n(defn use-effect!\n  \"Takes setup-fn that executes either on the first render or after every update.\n  The function may return cleanup-fn to cleanup the effect, either before unmount or before every next update.\n  Calling behavior is controlled by deps argument.\n\n  (rum/use-effect!\n    (fn []\n      (.addEventListener js/window \\\"load\\\" handler)\n      #(.removeEventListener js/window \\\"load\\\" handler))\n    []) ;; empty deps collection instructs React to run setup-fn only once on initial render\n        ;; and cleanup-fn only once before unmounting\n\n  Read more at https://reactjs.org/docs/hooks-effect.html\"\n  ([setup-fn]\n   (.useEffect js/React #(or (setup-fn) js/undefined)))\n  ([setup-fn deps]\n   (->> (if (array? deps) deps (into-array deps))\n        (.useEffect js/React #(or (setup-fn) js/undefined)))))\n\n(defn use-layout-effect!\n  \"(rum/use-layout-effect!\n    (fn []\n      (.addEventListener js/window \\\"load\\\" handler)\n      #(.removeEventListener js/window \\\"load\\\" handler))\n    []) ;; empty deps collection instructs React to run setup-fn only once on initial render\n        ;; and cleanup-fn only once before unmounting\n\n  Read more at https://reactjs.org/docs/hooks-effect.html\"\n  ([setup-fn]\n   (.useLayoutEffect js/React #(or (setup-fn) js/undefined)))\n  ([setup-fn deps]\n   (->> (if (array? deps) deps (into-array deps))\n        (.useLayoutEffect js/React #(or (setup-fn) js/undefined)))))\n\n(defn use-callback\n  \"Takes callback function and returns memoized variant, memoization is done based on provided deps collection.\n\n  (rum/defc button < rum/static\n    [{:keys [on-click]} text]\n    [:button {:on-click on-click}\n      text])\n\n  (rum/defc app [v]\n    (let [on-click (rum/use-callback #(do-stuff v) [v])]\n      ;; because on-click callback is memoized here based on v argument\n      ;; the callback won't be re-created on every render, unless v changes\n      ;; which means that underlying `button` component won't re-render wastefully\n      [button {:on-click on-click}\n        \\\"press me\\\"]))\n\n  Read more at https://reactjs.org/docs/hooks-reference.html#usecallback\"\n  ([callback]\n   (.useCallback js/React callback))\n  ([callback deps]\n   (->> (if (array? deps) deps (into-array deps))\n        (.useCallback js/React callback))))\n\n(defn use-memo\n  \"Takes a function, memoizes it based on provided deps collection and executes immediately returning a result.\n  Read more at https://reactjs.org/docs/hooks-reference.html#usememo\"\n  ([f]\n   (.useMemo js/React f))\n  ([f deps]\n   (->> (if (array? deps) deps (into-array deps))\n        (.useMemo js/React f))))\n\n(defn use-ref\n  \"Takes a value and puts it into a mutable container which is persisted for the full lifetime of the component.\n  https://reactjs.org/docs/hooks-reference.html#useref\"\n  ([initial-value]\n   (.useRef js/React initial-value)))\n\n;; Refs\n\n(defn create-ref []\n  (.createRef js/React))\n\n(defn deref\n  \"Takes a ref returned from use-ref and returns its current value.\"\n  [^js ref]\n  (.-current ref))\n\n(defn set-ref! [^js ref value]\n  (set! (.-current ref) value))\n\n;;; Server-side rendering\n\n;; Roman. For Node.js runtime we require \"react-dom/server\" for you\n;; In the browser you have to add cljsjs/react-dom-server yourself\n\n(defn render-html\n  \"Main server-side rendering method. Given component, returns HTML string with static markup of that component.\n  Serve that string to the browser and [[hydrate]] same Rum component over it. React will be able to reuse already existing DOM and will initialize much faster.\n  No opts are supported at the moment.\"\n  ([element]\n   (render-html element nil))\n  ([element opts]\n   (if-not (identical? *target* \"nodejs\")\n     (.renderToString js/ReactDOMServer element)\n     (let [react-dom-server (js/require \"react-dom/server\")]\n       (.renderToString react-dom-server element)))))\n\n(defn render-static-markup\n  \"Same as [[render-html]] but returned string has nothing React-specific.\n  This allows Rum to be used as traditional server-side templating engine.\"\n  [src]\n  (if-not (identical? *target* \"nodejs\")\n    (.renderToStaticMarkup js/ReactDOMServer src)\n    (let [react-dom-server (js/require \"react-dom/server\")]\n      (.renderToStaticMarkup react-dom-server src))))\n\n;; JS components adapter\n(defn adapt-class-helper [type attrs children]\n  (let [args (.concat #js [type attrs] children)]\n    (.apply (.-createElement js/React) js/React args)))\n"]}