{
"version":3,
"file":"goog.uri.utils.js",
"lineCount":527,
"mappings":"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",
"sources":["goog/uri/utils.js"],
"sourcesContent":["// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Simple utilities for dealing with URI strings.\n *\n * This is intended to be a lightweight alternative to constructing goog.Uri\n * objects.  Whereas goog.Uri adds several kilobytes to the binary regardless\n * of how much of its functionality you use, this is designed to be a set of\n * mostly-independent utilities so that the compiler includes only what is\n * necessary for the task.  Estimated savings of porting is 5k pre-gzip and\n * 1.5k post-gzip.  To ensure the savings remain, future developers should\n * avoid adding new functionality to existing functions, but instead create\n * new ones and factor out shared code.\n *\n * Many of these utilities have limited functionality, tailored to common\n * cases.  The query parameter utilities assume that the parameter keys are\n * already encoded, since most keys are compile-time alphanumeric strings.  The\n * query parameter mutation utilities also do not tolerate fragment identifiers.\n *\n * By design, these functions can be slower than goog.Uri equivalents.\n * Repeated calls to some of functions may be quadratic in behavior for IE,\n * although the effect is somewhat limited given the 2kb limit.\n *\n * One advantage of the limited functionality here is that this approach is\n * less sensitive to differences in URI encodings than goog.Uri, since these\n * functions operate on strings directly, rather than decoding them and\n * then re-encoding.\n *\n * Uses features of RFC 3986 for parsing/formatting URIs:\n *   http://www.ietf.org/rfc/rfc3986.txt\n *\n * @author gboyer@google.com (Garrett Boyer) - The \"lightened\" design.\n * @author msamuel@google.com (Mike Samuel) - Domain knowledge and regexes.\n */\n\ngoog.provide('goog.uri.utils');\ngoog.provide('goog.uri.utils.ComponentIndex');\ngoog.provide('goog.uri.utils.QueryArray');\ngoog.provide('goog.uri.utils.QueryValue');\ngoog.provide('goog.uri.utils.StandardQueryParam');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.string');\n\n\n/**\n * Character codes inlined to avoid object allocations due to charCode.\n * @enum {number}\n * @private\n */\ngoog.uri.utils.CharCode_ = {\n  AMPERSAND: 38,\n  EQUAL: 61,\n  HASH: 35,\n  QUESTION: 63\n};\n\n\n/**\n * Builds a URI string from already-encoded parts.\n *\n * No encoding is performed.  Any component may be omitted as either null or\n * undefined.\n *\n * @param {?string=} opt_scheme The scheme such as 'http'.\n * @param {?string=} opt_userInfo The user name before the '@'.\n * @param {?string=} opt_domain The domain such as 'www.google.com', already\n *     URI-encoded.\n * @param {(string|number|null)=} opt_port The port number.\n * @param {?string=} opt_path The path, already URI-encoded.  If it is not\n *     empty, it must begin with a slash.\n * @param {?string=} opt_queryData The URI-encoded query data.\n * @param {?string=} opt_fragment The URI-encoded fragment identifier.\n * @return {string} The fully combined URI.\n */\ngoog.uri.utils.buildFromEncodedParts = function(\n    opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData,\n    opt_fragment) {\n  var out = '';\n\n  if (opt_scheme) {\n    out += opt_scheme + ':';\n  }\n\n  if (opt_domain) {\n    out += '//';\n\n    if (opt_userInfo) {\n      out += opt_userInfo + '@';\n    }\n\n    out += opt_domain;\n\n    if (opt_port) {\n      out += ':' + opt_port;\n    }\n  }\n\n  if (opt_path) {\n    out += opt_path;\n  }\n\n  if (opt_queryData) {\n    out += '?' + opt_queryData;\n  }\n\n  if (opt_fragment) {\n    out += '#' + opt_fragment;\n  }\n\n  return out;\n};\n\n\n/**\n * A regular expression for breaking a URI into its component parts.\n *\n * {@link http://www.ietf.org/rfc/rfc3986.txt} says in Appendix B\n * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n * disambiguation method used by POSIX regular expressions, it is natural and\n * commonplace to use a regular expression for parsing the potential five\n * components of a URI reference.\n *\n * The following line is the regular expression for breaking-down a\n * well-formed URI reference into its components.\n *\n * <pre>\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n * </pre>\n *\n * The numbers in the second line above are only to assist readability; they\n * indicate the reference points for each subexpression (i.e., each paired\n * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n * For example, matching the above expression to\n * <pre>\n *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n * </pre>\n * results in the following subexpression matches:\n * <pre>\n *    $1 = http:\n *    $2 = http\n *    $3 = //www.ics.uci.edu\n *    $4 = www.ics.uci.edu\n *    $5 = /pub/ietf/uri/\n *    $6 = <undefined>\n *    $7 = <undefined>\n *    $8 = #Related\n *    $9 = Related\n * </pre>\n * where <undefined> indicates that the component is not present, as is the\n * case for the query component in the above example. Therefore, we can\n * determine the value of the five components as\n * <pre>\n *    scheme    = $2\n *    authority = $4\n *    path      = $5\n *    query     = $7\n *    fragment  = $9\n * </pre>\n *\n * The regular expression has been modified slightly to expose the\n * userInfo, domain, and port separately from the authority.\n * The modified version yields\n * <pre>\n *    $1 = http              scheme\n *    $2 = <undefined>       userInfo -\\\n *    $3 = www.ics.uci.edu   domain     | authority\n *    $4 = <undefined>       port     -/\n *    $5 = /pub/ietf/uri/    path\n *    $6 = <undefined>       query without ?\n *    $7 = Related           fragment without #\n * </pre>\n * @type {!RegExp}\n * @private\n */\ngoog.uri.utils.splitRe_ = new RegExp(\n    '^' +\n    '(?:' +\n    '([^:/?#.]+)' +  // scheme - ignore special characters\n                     // used by other URL parts such as :,\n                     // ?, /, #, and .\n    ':)?' +\n    '(?://' +\n    '(?:([^/?#]*)@)?' +  // userInfo\n    '([^/#?]*?)' +       // domain\n    '(?::([0-9]+))?' +   // port\n    '(?=[/#?]|$)' +      // authority-terminating character\n    ')?' +\n    '([^?#]+)?' +          // path\n    '(?:\\\\?([^#]*))?' +    // query\n    '(?:#([\\\\s\\\\S]*))?' +  // fragment\n    '$');\n\n\n/**\n * The index of each URI component in the return value of goog.uri.utils.split.\n * @enum {number}\n */\ngoog.uri.utils.ComponentIndex = {\n  SCHEME: 1,\n  USER_INFO: 2,\n  DOMAIN: 3,\n  PORT: 4,\n  PATH: 5,\n  QUERY_DATA: 6,\n  FRAGMENT: 7\n};\n\n\n/**\n * Splits a URI into its component parts.\n *\n * Each component can be accessed via the component indices; for example:\n * <pre>\n * goog.uri.utils.split(someStr)[goog.uri.utils.ComponentIndex.QUERY_DATA];\n * </pre>\n *\n * @param {string} uri The URI string to examine.\n * @return {!Array<string|undefined>} Each component still URI-encoded.\n *     Each component that is present will contain the encoded value, whereas\n *     components that are not present will be undefined or empty, depending\n *     on the browser's regular expression implementation.  Never null, since\n *     arbitrary strings may still look like path names.\n */\ngoog.uri.utils.split = function(uri) {\n  // See @return comment -- never null.\n  return /** @type {!Array<string|undefined>} */ (\n      uri.match(goog.uri.utils.splitRe_));\n};\n\n\n/**\n * @param {?string} uri A possibly null string.\n * @param {boolean=} opt_preserveReserved If true, percent-encoding of RFC-3986\n *     reserved characters will not be removed.\n * @return {?string} The string URI-decoded, or null if uri is null.\n * @private\n */\ngoog.uri.utils.decodeIfPossible_ = function(uri, opt_preserveReserved) {\n  if (!uri) {\n    return uri;\n  }\n\n  return opt_preserveReserved ? decodeURI(uri) : decodeURIComponent(uri);\n};\n\n\n/**\n * Gets a URI component by index.\n *\n * It is preferred to use the getPathEncoded() variety of functions ahead,\n * since they are more readable.\n *\n * @param {goog.uri.utils.ComponentIndex} componentIndex The component index.\n * @param {string} uri The URI to examine.\n * @return {?string} The still-encoded component, or null if the component\n *     is not present.\n * @private\n */\ngoog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {\n  // Convert undefined, null, and empty string into null.\n  return goog.uri.utils.split(uri)[componentIndex] || null;\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The protocol or scheme, or null if none.  Does not\n *     include trailing colons or slashes.\n */\ngoog.uri.utils.getScheme = function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.SCHEME, uri);\n};\n\n\n/**\n * Gets the effective scheme for the URL.  If the URL is relative then the\n * scheme is derived from the page's location.\n * @param {string} uri The URI to examine.\n * @return {string} The protocol or scheme, always lower case.\n */\ngoog.uri.utils.getEffectiveScheme = function(uri) {\n  var scheme = goog.uri.utils.getScheme(uri);\n  if (!scheme && goog.global.self && goog.global.self.location) {\n    var protocol = goog.global.self.location.protocol;\n    scheme = protocol.substr(0, protocol.length - 1);\n  }\n  // NOTE: When called from a web worker in Firefox 3.5, location may be null.\n  // All other browsers with web workers support self.location from the worker.\n  return scheme ? scheme.toLowerCase() : '';\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The user name still encoded, or null if none.\n */\ngoog.uri.utils.getUserInfoEncoded = function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.USER_INFO, uri);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded user info, or null if none.\n */\ngoog.uri.utils.getUserInfo = function(uri) {\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getUserInfoEncoded(uri));\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The domain name still encoded, or null if none.\n */\ngoog.uri.utils.getDomainEncoded = function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.DOMAIN, uri);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded domain, or null if none.\n */\ngoog.uri.utils.getDomain = function(uri) {\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getDomainEncoded(uri), true /* opt_preserveReserved */);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?number} The port number, or null if none.\n */\ngoog.uri.utils.getPort = function(uri) {\n  // Coerce to a number.  If the result of getComponentByIndex_ is null or\n  // non-numeric, the number coersion yields NaN.  This will then return\n  // null for all non-numeric cases (though also zero, which isn't a relevant\n  // port number).\n  return Number(\n             goog.uri.utils.getComponentByIndex_(\n                 goog.uri.utils.ComponentIndex.PORT, uri)) ||\n      null;\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The path still encoded, or null if none. Includes the\n *     leading slash, if any.\n */\ngoog.uri.utils.getPathEncoded = function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.PATH, uri);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded path, or null if none.  Includes the leading\n *     slash, if any.\n */\ngoog.uri.utils.getPath = function(uri) {\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getPathEncoded(uri), true /* opt_preserveReserved */);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The query data still encoded, or null if none.  Does not\n *     include the question mark itself.\n */\ngoog.uri.utils.getQueryData = function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.QUERY_DATA, uri);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The fragment identifier, or null if none.  Does not\n *     include the hash mark itself.\n */\ngoog.uri.utils.getFragmentEncoded = function(uri) {\n  // The hash mark may not appear in any other part of the URL.\n  var hashIndex = uri.indexOf('#');\n  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @param {?string} fragment The encoded fragment identifier, or null if none.\n *     Does not include the hash mark itself.\n * @return {string} The URI with the fragment set.\n */\ngoog.uri.utils.setFragmentEncoded = function(uri, fragment) {\n  return goog.uri.utils.removeFragment(uri) + (fragment ? '#' + fragment : '');\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded fragment identifier, or null if none.  Does\n *     not include the hash mark.\n */\ngoog.uri.utils.getFragment = function(uri) {\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getFragmentEncoded(uri));\n};\n\n\n/**\n * Extracts everything up to the port of the URI.\n * @param {string} uri The URI string.\n * @return {string} Everything up to and including the port.\n */\ngoog.uri.utils.getHost = function(uri) {\n  var pieces = goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      pieces[goog.uri.utils.ComponentIndex.SCHEME],\n      pieces[goog.uri.utils.ComponentIndex.USER_INFO],\n      pieces[goog.uri.utils.ComponentIndex.DOMAIN],\n      pieces[goog.uri.utils.ComponentIndex.PORT]);\n};\n\n\n/**\n * Returns the origin for a given URL.\n * @param {string} uri The URI string.\n * @return {string} Everything up to and including the port.\n */\ngoog.uri.utils.getOrigin = function(uri) {\n  var pieces = goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      pieces[goog.uri.utils.ComponentIndex.SCHEME], null /* opt_userInfo */,\n      pieces[goog.uri.utils.ComponentIndex.DOMAIN],\n      pieces[goog.uri.utils.ComponentIndex.PORT]);\n};\n\n\n/**\n * Extracts the path of the URL and everything after.\n * @param {string} uri The URI string.\n * @return {string} The URI, starting at the path and including the query\n *     parameters and fragment identifier.\n */\ngoog.uri.utils.getPathAndAfter = function(uri) {\n  var pieces = goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH],\n      pieces[goog.uri.utils.ComponentIndex.QUERY_DATA],\n      pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);\n};\n\n\n/**\n * Gets the URI with the fragment identifier removed.\n * @param {string} uri The URI to examine.\n * @return {string} Everything preceding the hash mark.\n */\ngoog.uri.utils.removeFragment = function(uri) {\n  // The hash mark may not appear in any other part of the URL.\n  var hashIndex = uri.indexOf('#');\n  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);\n};\n\n\n/**\n * Ensures that two URI's have the exact same domain, scheme, and port.\n *\n * Unlike the version in goog.Uri, this checks protocol, and therefore is\n * suitable for checking against the browser's same-origin policy.\n *\n * @param {string} uri1 The first URI.\n * @param {string} uri2 The second URI.\n * @return {boolean} Whether they have the same scheme, domain and port.\n */\ngoog.uri.utils.haveSameDomain = function(uri1, uri2) {\n  var pieces1 = goog.uri.utils.split(uri1);\n  var pieces2 = goog.uri.utils.split(uri2);\n  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] ==\n      pieces2[goog.uri.utils.ComponentIndex.DOMAIN] &&\n      pieces1[goog.uri.utils.ComponentIndex.SCHEME] ==\n      pieces2[goog.uri.utils.ComponentIndex.SCHEME] &&\n      pieces1[goog.uri.utils.ComponentIndex.PORT] ==\n      pieces2[goog.uri.utils.ComponentIndex.PORT];\n};\n\n\n/**\n * Asserts that there are no fragment or query identifiers, only in uncompiled\n * mode.\n * @param {string} uri The URI to examine.\n * @private\n */\ngoog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {\n  goog.asserts.assert(\n      uri.indexOf('#') < 0 && uri.indexOf('?') < 0,\n      'goog.uri.utils: Fragment or query identifiers are not supported: [%s]',\n      uri);\n};\n\n\n/**\n * Supported query parameter values by the parameter serializing utilities.\n *\n * If a value is null or undefined, the key-value pair is skipped, as an easy\n * way to omit parameters conditionally.  Non-array parameters are converted\n * to a string and URI encoded.  Array values are expanded into multiple\n * &key=value pairs, with each element stringized and URI-encoded.\n *\n * @typedef {*}\n */\ngoog.uri.utils.QueryValue;\n\n\n/**\n * An array representing a set of query parameters with alternating keys\n * and values.\n *\n * Keys are assumed to be URI encoded already and live at even indices.  See\n * goog.uri.utils.QueryValue for details on how parameter values are encoded.\n *\n * Example:\n * <pre>\n * var data = [\n *   // Simple param: ?name=BobBarker\n *   'name', 'BobBarker',\n *   // Conditional param -- may be omitted entirely.\n *   'specialDietaryNeeds', hasDietaryNeeds() ? getDietaryNeeds() : null,\n *   // Multi-valued param: &house=LosAngeles&house=NewYork&house=null\n *   'house', ['LosAngeles', 'NewYork', null]\n * ];\n * </pre>\n *\n * @typedef {!Array<string|goog.uri.utils.QueryValue>}\n */\ngoog.uri.utils.QueryArray;\n\n\n/**\n * Parses encoded query parameters and calls callback function for every\n * parameter found in the string.\n *\n * Missing value of parameter (e.g. \u201c\u2026&key&\u2026\u201d) is treated as if the value was an\n * empty string.  Keys may be empty strings (e.g. \u201c\u2026&=value&\u2026\u201d) which also means\n * that \u201c\u2026&=&\u2026\u201d and \u201c\u2026&&\u2026\u201d will result in an empty key and value.\n *\n * @param {string} encodedQuery Encoded query string excluding question mark at\n *     the beginning.\n * @param {function(string, string)} callback Function called for every\n *     parameter found in query string.  The first argument (name) will not be\n *     urldecoded (so the function is consistent with buildQueryData), but the\n *     second will.  If the parameter has no value (i.e. \u201c=\u201d was not present)\n *     the second argument (value) will be an empty string.\n */\ngoog.uri.utils.parseQueryData = function(encodedQuery, callback) {\n  if (!encodedQuery) {\n    return;\n  }\n  var pairs = encodedQuery.split('&');\n  for (var i = 0; i < pairs.length; i++) {\n    var indexOfEquals = pairs[i].indexOf('=');\n    var name = null;\n    var value = null;\n    if (indexOfEquals >= 0) {\n      name = pairs[i].substring(0, indexOfEquals);\n      value = pairs[i].substring(indexOfEquals + 1);\n    } else {\n      name = pairs[i];\n    }\n    callback(name, value ? goog.string.urlDecode(value) : '');\n  }\n};\n\n\n/**\n * Split the URI into 3 parts where the [1] is the queryData without a leading\n * '?'. For example, the URI http://foo.com/bar?a=b#abc returns\n * ['http://foo.com/bar','a=b','#abc'].\n * @param {string} uri The URI to parse.\n * @return {!Array<string>} An array representation of uri of length 3 where the\n *     middle value is the queryData without a leading '?'.\n * @private\n */\ngoog.uri.utils.splitQueryData_ = function(uri) {\n  // Find the query data and hash.\n  var hashIndex = uri.indexOf('#');\n  if (hashIndex < 0) {\n    hashIndex = uri.length;\n  }\n  var questionIndex = uri.indexOf('?');\n  var queryData;\n  if (questionIndex < 0 || questionIndex > hashIndex) {\n    questionIndex = hashIndex;\n    queryData = '';\n  } else {\n    queryData = uri.substring(questionIndex + 1, hashIndex);\n  }\n  return [uri.substr(0, questionIndex), queryData, uri.substr(hashIndex)];\n};\n\n\n/**\n * Join an array created by splitQueryData_ back into a URI.\n * @param {!Array<string>} parts A URI in the form generated by splitQueryData_.\n * @return {string} The joined URI.\n * @private\n */\ngoog.uri.utils.joinQueryData_ = function(parts) {\n  return parts[0] + (parts[1] ? '?' + parts[1] : '') + parts[2];\n};\n\n\n/**\n * @param {string} queryData\n * @param {string} newData\n * @return {string}\n * @private\n */\ngoog.uri.utils.appendQueryData_ = function(queryData, newData) {\n  if (!newData) {\n    return queryData;\n  }\n  return queryData ? queryData + '&' + newData : newData;\n};\n\n\n/**\n * @param {string} uri\n * @param {string} queryData\n * @return {string}\n * @private\n */\ngoog.uri.utils.appendQueryDataToUri_ = function(uri, queryData) {\n  if (!queryData) {\n    return uri;\n  }\n  var parts = goog.uri.utils.splitQueryData_(uri);\n  parts[1] = goog.uri.utils.appendQueryData_(parts[1], queryData);\n  return goog.uri.utils.joinQueryData_(parts);\n};\n\n\n/**\n * Appends key=value pairs to an array, supporting multi-valued objects.\n * @param {*} key The key prefix.\n * @param {goog.uri.utils.QueryValue} value The value to serialize.\n * @param {!Array<string>} pairs The array to which the 'key=value' strings\n *     should be appended.\n * @private\n */\ngoog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {\n  goog.asserts.assertString(key);\n  if (goog.isArray(value)) {\n    // Convince the compiler it's an array.\n    goog.asserts.assertArray(value);\n    for (var j = 0; j < value.length; j++) {\n      // Convert to string explicitly, to short circuit the null and array\n      // logic in this function -- this ensures that null and undefined get\n      // written as literal 'null' and 'undefined', and arrays don't get\n      // expanded out but instead encoded in the default way.\n      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);\n    }\n  } else if (value != null) {\n    // Skip a top-level null or undefined entirely.\n    pairs.push(\n        key +\n        // Check for empty string. Zero gets encoded into the url as literal\n        // strings.  For empty string, skip the equal sign, to be consistent\n        // with UriBuilder.java.\n        (value === '' ? '' : '=' + goog.string.urlEncode(value)));\n  }\n};\n\n\n/**\n * Builds a query data string from a sequence of alternating keys and values.\n * Currently generates \"&key&\" for empty args.\n *\n * @param {!IArrayLike<string|goog.uri.utils.QueryValue>} keysAndValues\n *     Alternating keys and values. See the QueryArray typedef.\n * @param {number=} opt_startIndex A start offset into the arary, defaults to 0.\n * @return {string} The encoded query string, in the form 'a=1&b=2'.\n */\ngoog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {\n  goog.asserts.assert(\n      Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0,\n      'goog.uri.utils: Key/value lists must be even in length.');\n\n  var params = [];\n  for (var i = opt_startIndex || 0; i < keysAndValues.length; i += 2) {\n    var key = /** @type {string} */ (keysAndValues[i]);\n    goog.uri.utils.appendKeyValuePairs_(key, keysAndValues[i + 1], params);\n  }\n  return params.join('&');\n};\n\n\n/**\n * Builds a query data string from a map.\n * Currently generates \"&key&\" for empty args.\n *\n * @param {!Object<string, goog.uri.utils.QueryValue>} map An object where keys\n *     are URI-encoded parameter keys, and the values are arbitrary types\n *     or arrays. Keys with a null value are dropped.\n * @return {string} The encoded query string, in the form 'a=1&b=2'.\n */\ngoog.uri.utils.buildQueryDataFromMap = function(map) {\n  var params = [];\n  for (var key in map) {\n    goog.uri.utils.appendKeyValuePairs_(key, map[key], params);\n  }\n  return params.join('&');\n};\n\n\n/**\n * Appends URI parameters to an existing URI.\n *\n * The variable arguments may contain alternating keys and values.  Keys are\n * assumed to be already URI encoded.  The values should not be URI-encoded,\n * and will instead be encoded by this function.\n * <pre>\n * appendParams('http://www.foo.com?existing=true',\n *     'key1', 'value1',\n *     'key2', 'value?willBeEncoded',\n *     'key3', ['valueA', 'valueB', 'valueC'],\n *     'key4', null);\n * result: 'http://www.foo.com?existing=true&' +\n *     'key1=value1&' +\n *     'key2=value%3FwillBeEncoded&' +\n *     'key3=valueA&key3=valueB&key3=valueC'\n * </pre>\n *\n * A single call to this function will not exhibit quadratic behavior in IE,\n * whereas multiple repeated calls may, although the effect is limited by\n * fact that URL's generally can't exceed 2kb.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {...(goog.uri.utils.QueryArray|goog.uri.utils.QueryValue)}\n * var_args\n *     An array or argument list conforming to goog.uri.utils.QueryArray.\n * @return {string} The URI with all query parameters added.\n */\ngoog.uri.utils.appendParams = function(uri, var_args) {\n  var queryData = arguments.length == 2 ?\n      goog.uri.utils.buildQueryData(arguments[1], 0) :\n      goog.uri.utils.buildQueryData(arguments, 1);\n  return goog.uri.utils.appendQueryDataToUri_(uri, queryData);\n};\n\n\n/**\n * Appends query parameters from a map.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object<goog.uri.utils.QueryValue>} map An object where keys are\n *     URI-encoded parameter keys, and the values are arbitrary types or arrays.\n *     Keys with a null value are dropped.\n * @return {string} The new parameters.\n */\ngoog.uri.utils.appendParamsFromMap = function(uri, map) {\n  var queryData = goog.uri.utils.buildQueryDataFromMap(map);\n  return goog.uri.utils.appendQueryDataToUri_(uri, queryData);\n};\n\n\n/**\n * Appends a single URI parameter.\n *\n * Repeated calls to this can exhibit quadratic behavior in IE6 due to the\n * way string append works, though it should be limited given the 2kb limit.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {string} key The key, which must already be URI encoded.\n * @param {*=} opt_value The value, which will be stringized and encoded\n *     (assumed not already to be encoded).  If omitted, undefined, or null, the\n *     key will be added as a valueless parameter.\n * @return {string} The URI with the query parameter added.\n */\ngoog.uri.utils.appendParam = function(uri, key, opt_value) {\n  var value = (opt_value != null) ? '=' + goog.string.urlEncode(opt_value) : '';\n  return goog.uri.utils.appendQueryDataToUri_(uri, key + value);\n};\n\n\n/**\n * Finds the next instance of a query parameter with the specified name.\n *\n * Does not instantiate any objects.\n *\n * @param {string} uri The URI to search.  May contain a fragment identifier\n *     if opt_hashIndex is specified.\n * @param {number} startIndex The index to begin searching for the key at.  A\n *     match may be found even if this is one character after the ampersand.\n * @param {string} keyEncoded The URI-encoded key.\n * @param {number} hashOrEndIndex Index to stop looking at.  If a hash\n *     mark is present, it should be its index, otherwise it should be the\n *     length of the string.\n * @return {number} The position of the first character in the key's name,\n *     immediately after either a question mark or a dot.\n * @private\n */\ngoog.uri.utils.findParam_ = function(\n    uri, startIndex, keyEncoded, hashOrEndIndex) {\n  var index = startIndex;\n  var keyLength = keyEncoded.length;\n\n  // Search for the key itself and post-filter for surronuding punctuation,\n  // rather than expensively building a regexp.\n  while ((index = uri.indexOf(keyEncoded, index)) >= 0 &&\n         index < hashOrEndIndex) {\n    var precedingChar = uri.charCodeAt(index - 1);\n    // Ensure that the preceding character is '&' or '?'.\n    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND ||\n        precedingChar == goog.uri.utils.CharCode_.QUESTION) {\n      // Ensure the following character is '&', '=', '#', or NaN\n      // (end of string).\n      var followingChar = uri.charCodeAt(index + keyLength);\n      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL ||\n          followingChar == goog.uri.utils.CharCode_.AMPERSAND ||\n          followingChar == goog.uri.utils.CharCode_.HASH) {\n        return index;\n      }\n    }\n    index += keyLength + 1;\n  }\n\n  return -1;\n};\n\n\n/**\n * Regular expression for finding a hash mark or end of string.\n * @type {RegExp}\n * @private\n */\ngoog.uri.utils.hashOrEndRe_ = /#|$/;\n\n\n/**\n * Determines if the URI contains a specific key.\n *\n * Performs no object instantiations.\n *\n * @param {string} uri The URI to process.  May contain a fragment\n *     identifier.\n * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.\n * @return {boolean} Whether the key is present.\n */\ngoog.uri.utils.hasParam = function(uri, keyEncoded) {\n  return goog.uri.utils.findParam_(\n             uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;\n};\n\n\n/**\n * Gets the first value of a query parameter.\n * @param {string} uri The URI to process.  May contain a fragment.\n * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.\n * @return {?string} The first value of the parameter (URI-decoded), or null\n *     if the parameter is not found.\n */\ngoog.uri.utils.getParamValue = function(uri, keyEncoded) {\n  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);\n  var foundIndex =\n      goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);\n\n  if (foundIndex < 0) {\n    return null;\n  } else {\n    var endPosition = uri.indexOf('&', foundIndex);\n    if (endPosition < 0 || endPosition > hashOrEndIndex) {\n      endPosition = hashOrEndIndex;\n    }\n    // Progress forth to the end of the \"key=\" or \"key&\" substring.\n    foundIndex += keyEncoded.length + 1;\n    // Use substr, because it (unlike substring) will return empty string\n    // if foundIndex > endPosition.\n    return goog.string.urlDecode(\n        uri.substr(foundIndex, endPosition - foundIndex));\n  }\n};\n\n\n/**\n * Gets all values of a query parameter.\n * @param {string} uri The URI to process.  May contain a fragment.\n * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.\n * @return {!Array<string>} All URI-decoded values with the given key.\n *     If the key is not found, this will have length 0, but never be null.\n */\ngoog.uri.utils.getParamValues = function(uri, keyEncoded) {\n  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);\n  var position = 0;\n  var foundIndex;\n  var result = [];\n\n  while ((foundIndex = goog.uri.utils.findParam_(\n              uri, position, keyEncoded, hashOrEndIndex)) >= 0) {\n    // Find where this parameter ends, either the '&' or the end of the\n    // query parameters.\n    position = uri.indexOf('&', foundIndex);\n    if (position < 0 || position > hashOrEndIndex) {\n      position = hashOrEndIndex;\n    }\n\n    // Progress forth to the end of the \"key=\" or \"key&\" substring.\n    foundIndex += keyEncoded.length + 1;\n    // Use substr, because it (unlike substring) will return empty string\n    // if foundIndex > position.\n    result.push(\n        goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));\n  }\n\n  return result;\n};\n\n\n/**\n * Regexp to find trailing question marks and ampersands.\n * @type {RegExp}\n * @private\n */\ngoog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;\n\n\n/**\n * Removes all instances of a query parameter.\n * @param {string} uri The URI to process.  Must not contain a fragment.\n * @param {string} keyEncoded The URI-encoded key.\n * @return {string} The URI with all instances of the parameter removed.\n */\ngoog.uri.utils.removeParam = function(uri, keyEncoded) {\n  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);\n  var position = 0;\n  var foundIndex;\n  var buffer = [];\n\n  // Look for a query parameter.\n  while ((foundIndex = goog.uri.utils.findParam_(\n              uri, position, keyEncoded, hashOrEndIndex)) >= 0) {\n    // Get the portion of the query string up to, but not including, the ?\n    // or & starting the parameter.\n    buffer.push(uri.substring(position, foundIndex));\n    // Progress to immediately after the '&'.  If not found, go to the end.\n    // Avoid including the hash mark.\n    position = Math.min(\n        (uri.indexOf('&', foundIndex) + 1) || hashOrEndIndex, hashOrEndIndex);\n  }\n\n  // Append everything that is remaining.\n  buffer.push(uri.substr(position));\n\n  // Join the buffer, and remove trailing punctuation that remains.\n  return buffer.join('').replace(\n      goog.uri.utils.trailingQueryPunctuationRe_, '$1');\n};\n\n\n/**\n * Replaces all existing definitions of a parameter with a single definition.\n *\n * Repeated calls to this can exhibit quadratic behavior due to the need to\n * find existing instances and reconstruct the string, though it should be\n * limited given the 2kb limit.  Consider using appendParams or setParamsFromMap\n * to update multiple parameters in bulk.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {string} keyEncoded The key, which must already be URI encoded.\n * @param {*} value The value, which will be stringized and encoded (assumed\n *     not already to be encoded).\n * @return {string} The URI with the query parameter added.\n */\ngoog.uri.utils.setParam = function(uri, keyEncoded, value) {\n  return goog.uri.utils.appendParam(\n      goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);\n};\n\n\n/**\n * Effeciently set or remove multiple query parameters in a URI. Order of\n * unchanged parameters will not be modified, all updated parameters will be\n * appended to the end of the query. Params with values of null or undefined are\n * removed.\n *\n * @param {string} uri The URI to process.\n * @param {!Object<string, goog.uri.utils.QueryValue>} params A list of\n *     parameters to update. If null or undefined, the param will be removed.\n * @return {string} An updated URI where the query data has been updated with\n *     the params.\n */\ngoog.uri.utils.setParamsFromMap = function(uri, params) {\n  var parts = goog.uri.utils.splitQueryData_(uri);\n  var queryData = parts[1];\n  var buffer = [];\n  if (queryData) {\n    goog.array.forEach(queryData.split('&'), function(pair) {\n      var indexOfEquals = pair.indexOf('=');\n      var name = indexOfEquals >= 0 ? pair.substr(0, indexOfEquals) : pair;\n      if (!params.hasOwnProperty(name)) {\n        buffer.push(pair);\n      }\n    });\n  }\n  parts[1] = goog.uri.utils.appendQueryData_(\n      buffer.join('&'), goog.uri.utils.buildQueryDataFromMap(params));\n  return goog.uri.utils.joinQueryData_(parts);\n};\n\n\n/**\n * Generates a URI path using a given URI and a path with checks to\n * prevent consecutive \"//\". The baseUri passed in must not contain\n * query or fragment identifiers. The path to append may not contain query or\n * fragment identifiers.\n *\n * @param {string} baseUri URI to use as the base.\n * @param {string} path Path to append.\n * @return {string} Updated URI.\n */\ngoog.uri.utils.appendPath = function(baseUri, path) {\n  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);\n\n  // Remove any trailing '/'\n  if (goog.string.endsWith(baseUri, '/')) {\n    baseUri = baseUri.substr(0, baseUri.length - 1);\n  }\n  // Remove any leading '/'\n  if (goog.string.startsWith(path, '/')) {\n    path = path.substr(1);\n  }\n  return goog.string.buildString(baseUri, '/', path);\n};\n\n\n/**\n * Replaces the path.\n * @param {string} uri URI to use as the base.\n * @param {string} path New path.\n * @return {string} Updated URI.\n */\ngoog.uri.utils.setPath = function(uri, path) {\n  // Add any missing '/'.\n  if (!goog.string.startsWith(path, '/')) {\n    path = '/' + path;\n  }\n  var parts = goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      parts[goog.uri.utils.ComponentIndex.SCHEME],\n      parts[goog.uri.utils.ComponentIndex.USER_INFO],\n      parts[goog.uri.utils.ComponentIndex.DOMAIN],\n      parts[goog.uri.utils.ComponentIndex.PORT], path,\n      parts[goog.uri.utils.ComponentIndex.QUERY_DATA],\n      parts[goog.uri.utils.ComponentIndex.FRAGMENT]);\n};\n\n\n/**\n * Standard supported query parameters.\n * @enum {string}\n */\ngoog.uri.utils.StandardQueryParam = {\n\n  /** Unused parameter for unique-ifying. */\n  RANDOM: 'zx'\n};\n\n\n/**\n * Sets the zx parameter of a URI to a random value.\n * @param {string} uri Any URI.\n * @return {string} That URI with the \"zx\" parameter added or replaced to\n *     contain a random string.\n */\ngoog.uri.utils.makeUnique = function(uri) {\n  return goog.uri.utils.setParam(\n      uri, goog.uri.utils.StandardQueryParam.RANDOM,\n      goog.string.getRandomString());\n};\n"],
"names":["goog","provide","require","uri","utils","CharCode_","AMPERSAND","EQUAL","HASH","QUESTION","buildFromEncodedParts","goog.uri.utils.buildFromEncodedParts","opt_scheme","opt_userInfo","opt_domain","opt_port","opt_path","opt_queryData","opt_fragment","out","splitRe_","RegExp","ComponentIndex","SCHEME","USER_INFO","DOMAIN","PORT","PATH","QUERY_DATA","FRAGMENT","split","goog.uri.utils.split","match","decodeIfPossible_","goog.uri.utils.decodeIfPossible_","opt_preserveReserved","decodeURI","decodeURIComponent","getComponentByIndex_","goog.uri.utils.getComponentByIndex_","componentIndex","getScheme","goog.uri.utils.getScheme","getEffectiveScheme","goog.uri.utils.getEffectiveScheme","scheme","global","self","location","protocol","substr","length","toLowerCase","getUserInfoEncoded","goog.uri.utils.getUserInfoEncoded","getUserInfo","goog.uri.utils.getUserInfo","getDomainEncoded","goog.uri.utils.getDomainEncoded","getDomain","goog.uri.utils.getDomain","getPort","goog.uri.utils.getPort","Number","getPathEncoded","goog.uri.utils.getPathEncoded","getPath","goog.uri.utils.getPath","getQueryData","goog.uri.utils.getQueryData","getFragmentEncoded","goog.uri.utils.getFragmentEncoded","hashIndex","indexOf","setFragmentEncoded","goog.uri.utils.setFragmentEncoded","fragment","removeFragment","getFragment","goog.uri.utils.getFragment","getHost","goog.uri.utils.getHost","pieces","getOrigin","goog.uri.utils.getOrigin","getPathAndAfter","goog.uri.utils.getPathAndAfter","goog.uri.utils.removeFragment","haveSameDomain","goog.uri.utils.haveSameDomain","uri1","uri2","pieces1","pieces2","assertNoFragmentsOrQueries_","goog.uri.utils.assertNoFragmentsOrQueries_","asserts","assert","QueryValue","QueryArray","parseQueryData","goog.uri.utils.parseQueryData","encodedQuery","callback","pairs","i","indexOfEquals","name","value","substring","string","urlDecode","splitQueryData_","goog.uri.utils.splitQueryData_","questionIndex","queryData","joinQueryData_","goog.uri.utils.joinQueryData_","parts","appendQueryData_","goog.uri.utils.appendQueryData_","newData","appendQueryDataToUri_","goog.uri.utils.appendQueryDataToUri_","appendKeyValuePairs_","goog.uri.utils.appendKeyValuePairs_","key","assertString","isArray","assertArray","j","String","push","urlEncode","buildQueryData","goog.uri.utils.buildQueryData","keysAndValues","opt_startIndex","Math","max","params","join","buildQueryDataFromMap","goog.uri.utils.buildQueryDataFromMap","map","appendParams","goog.uri.utils.appendParams","var_args","arguments","appendParamsFromMap","goog.uri.utils.appendParamsFromMap","appendParam","goog.uri.utils.appendParam","opt_value","findParam_","goog.uri.utils.findParam_","startIndex","keyEncoded","hashOrEndIndex","index","keyLength","precedingChar","charCodeAt","followingChar","hashOrEndRe_","hasParam","goog.uri.utils.hasParam","search","getParamValue","goog.uri.utils.getParamValue","foundIndex","endPosition","getParamValues","goog.uri.utils.getParamValues","position","result","trailingQueryPunctuationRe_","removeParam","goog.uri.utils.removeParam","buffer","min","replace","setParam","goog.uri.utils.setParam","setParamsFromMap","goog.uri.utils.setParamsFromMap","array","forEach","pair","hasOwnProperty","appendPath","goog.uri.utils.appendPath","baseUri","path","endsWith","startsWith","buildString","setPath","goog.uri.utils.setPath","StandardQueryParam","RANDOM","makeUnique","goog.uri.utils.makeUnique","getRandomString"]
}
