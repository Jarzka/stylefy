{
"version":3,
"file":"goog.iter.iter.js",
"lineCount":774,
"mappings":"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",
"sources":["goog/iter/iter.js"],
"sourcesContent":["// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Python style iteration utilities.\n * @author arv@google.com (Erik Arvidsson)\n */\n\n\ngoog.provide('goog.iter');\ngoog.provide('goog.iter.Iterable');\ngoog.provide('goog.iter.Iterator');\ngoog.provide('goog.iter.StopIteration');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.functions');\ngoog.require('goog.math');\n\n\n/**\n * @typedef {{length:number}|{__iterator__}}\n */\ngoog.iter.Iterable;\n\n\n/**\n * Singleton Error object that is used to terminate iterations.\n * @const {!Error}\n */\ngoog.iter.StopIteration = ('StopIteration' in goog.global) ?\n    // For script engines that support legacy iterators.\n    goog.global['StopIteration'] :\n    {message: 'StopIteration', stack: ''};\n\n\n\n/**\n * Class/interface for iterators.  An iterator needs to implement a `next`\n * method and it needs to throw a `goog.iter.StopIteration` when the\n * iteration passes beyond the end.  Iterators have no `hasNext` method.\n * It is recommended to always use the helper functions to iterate over the\n * iterator or in case you are only targeting JavaScript 1.7 for in loops.\n * @constructor\n * @template VALUE\n */\ngoog.iter.Iterator = function() {};\n\n\n/**\n * Returns the next value of the iteration.  This will throw the object\n * {@see goog.iter.StopIteration} when the iteration passes the end.\n * @return {VALUE} Any object or value.\n */\ngoog.iter.Iterator.prototype.next = function() {\n  throw goog.iter.StopIteration;\n};\n\n\n/**\n * Returns the `Iterator` object itself.  This is used to implement\n * the iterator protocol in JavaScript 1.7\n * @param {boolean=} opt_keys  Whether to return the keys or values. Default is\n *     to only return the values.  This is being used by the for-in loop (true)\n *     and the for-each-in loop (false).  Even though the param gives a hint\n *     about what the iterator will return there is no guarantee that it will\n *     return the keys when true is passed.\n * @return {!goog.iter.Iterator<VALUE>} The object itself.\n */\ngoog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {\n  return this;\n};\n\n\n/**\n * Returns an iterator that knows how to iterate over the values in the object.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable  If the\n *     object is an iterator it will be returned as is.  If the object has an\n *     `__iterator__` method that will be called to get the value\n *     iterator.  If the object is an array-like object we create an iterator\n *     for that.\n * @return {!goog.iter.Iterator<VALUE>} An iterator that knows how to iterate\n *     over the values in `iterable`.\n * @template VALUE\n */\ngoog.iter.toIterator = function(iterable) {\n  if (iterable instanceof goog.iter.Iterator) {\n    return iterable;\n  }\n  if (typeof iterable.__iterator__ == 'function') {\n    return /** @type {{__iterator__:function(this:?, boolean=)}} */ (iterable)\n        .__iterator__(false);\n  }\n  if (goog.isArrayLike(iterable)) {\n    var like = /** @type {!IArrayLike<number|string>} */ (iterable);\n    var i = 0;\n    var newIter = new goog.iter.Iterator;\n    newIter.next = function() {\n      while (true) {\n        if (i >= like.length) {\n          throw goog.iter.StopIteration;\n        }\n        // Don't include deleted elements.\n        if (!(i in like)) {\n          i++;\n          continue;\n        }\n        return like[i++];\n      }\n    };\n    return newIter;\n  }\n\n\n  // TODO(arv): Should we fall back on goog.structs.getValues()?\n  throw new Error('Not implemented');\n};\n\n\n/**\n * Calls a function for each element in the iterator with the element of the\n * iterator passed as argument.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable  The iterator\n *     to iterate over. If the iterable is an object `toIterator` will be\n *     called on it.\n * @param {function(this:THIS,VALUE,?,!goog.iter.Iterator<VALUE>)} f\n *     The function to call for every element.  This function takes 3 arguments\n *     (the element, undefined, and the iterator) and the return value is\n *     irrelevant.  The reason for passing undefined as the second argument is\n *     so that the same function can be used in {@see goog.array.forEach} as\n *     well as others.  The third parameter is of type \"number\" for\n *     arraylike objects, undefined, otherwise.\n * @param {THIS=} opt_obj  The object to be used as the value of 'this' within\n *     `f`.\n * @template THIS, VALUE\n */\ngoog.iter.forEach = function(iterable, f, opt_obj) {\n  if (goog.isArrayLike(iterable)) {\n\n    try {\n      // NOTES: this passes the index number to the second parameter\n      // of the callback contrary to the documentation above.\n      goog.array.forEach(\n          /** @type {IArrayLike<?>} */ (iterable), f, opt_obj);\n    } catch (ex) {\n      if (ex !== goog.iter.StopIteration) {\n        throw ex;\n      }\n    }\n  } else {\n    iterable = goog.iter.toIterator(iterable);\n\n    try {\n      while (true) {\n        f.call(opt_obj, iterable.next(), undefined, iterable);\n      }\n    } catch (ex) {\n      if (ex !== goog.iter.StopIteration) {\n        throw ex;\n      }\n    }\n  }\n};\n\n\n/**\n * Calls a function for every element in the iterator, and if the function\n * returns true adds the element to a new iterator.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to iterate over.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every element. This function takes 3 arguments\n *     (the element, undefined, and the iterator) and should return a boolean.\n *     If the return value is true the element will be included in the returned\n *     iterator.  If it is false the element is not included.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator in which only elements\n *     that passed the test are present.\n * @template THIS, VALUE\n */\ngoog.iter.filter = function(iterable, f, opt_obj) {\n  var iterator = goog.iter.toIterator(iterable);\n  var newIter = new goog.iter.Iterator;\n  newIter.next = function() {\n    while (true) {\n      var val = iterator.next();\n      if (f.call(opt_obj, val, undefined, iterator)) {\n        return val;\n      }\n    }\n  };\n  return newIter;\n};\n\n\n/**\n * Calls a function for every element in the iterator, and if the function\n * returns false adds the element to a new iterator.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to iterate over.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every element. This function takes 3 arguments\n *     (the element, undefined, and the iterator) and should return a boolean.\n *     If the return value is false the element will be included in the returned\n *     iterator.  If it is true the element is not included.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator in which only elements\n *     that did not pass the test are present.\n * @template THIS, VALUE\n */\ngoog.iter.filterFalse = function(iterable, f, opt_obj) {\n  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);\n};\n\n\n/**\n * Creates a new iterator that returns the values in a range.  This function\n * can take 1, 2 or 3 arguments:\n * <pre>\n * range(5) same as range(0, 5, 1)\n * range(2, 5) same as range(2, 5, 1)\n * </pre>\n *\n * @param {number} startOrStop  The stop value if only one argument is provided.\n *     The start value if 2 or more arguments are provided.  If only one\n *     argument is used the start value is 0.\n * @param {number=} opt_stop  The stop value.  If left out then the first\n *     argument is used as the stop value.\n * @param {number=} opt_step  The number to increment with between each call to\n *     next.  This can be negative.\n * @return {!goog.iter.Iterator<number>} A new iterator that returns the values\n *     in the range.\n */\ngoog.iter.range = function(startOrStop, opt_stop, opt_step) {\n  var start = 0;\n  var stop = startOrStop;\n  var step = opt_step || 1;\n  if (arguments.length > 1) {\n    start = startOrStop;\n    stop = +opt_stop;\n  }\n  if (step == 0) {\n    throw new Error('Range step argument must not be zero');\n  }\n\n  var newIter = new goog.iter.Iterator;\n  newIter.next = function() {\n    if (step > 0 && start >= stop || step < 0 && start <= stop) {\n      throw goog.iter.StopIteration;\n    }\n    var rv = start;\n    start += step;\n    return rv;\n  };\n  return newIter;\n};\n\n\n/**\n * Joins the values in a iterator with a delimiter.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to get the values from.\n * @param {string} deliminator  The text to put between the values.\n * @return {string} The joined value string.\n * @template VALUE\n */\ngoog.iter.join = function(iterable, deliminator) {\n  return goog.iter.toArray(iterable).join(deliminator);\n};\n\n\n/**\n * For every element in the iterator call a function and return a new iterator\n * with that value.\n *\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterator to iterate over.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):RESULT} f\n *     The function to call for every element.  This function takes 3 arguments\n *     (the element, undefined, and the iterator) and should return a new value.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<RESULT>} A new iterator that returns the\n *     results of applying the function to each element in the original\n *     iterator.\n * @template THIS, VALUE, RESULT\n */\ngoog.iter.map = function(iterable, f, opt_obj) {\n  var iterator = goog.iter.toIterator(iterable);\n  var newIter = new goog.iter.Iterator;\n  newIter.next = function() {\n    var val = iterator.next();\n    return f.call(opt_obj, val, undefined, iterator);\n  };\n  return newIter;\n};\n\n\n/**\n * Passes every element of an iterator into a function and accumulates the\n * result.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to iterate over.\n * @param {function(this:THIS,VALUE,VALUE):VALUE} f The function to call for\n *     every element. This function takes 2 arguments (the function's previous\n *     result or the initial value, and the value of the current element).\n *     function(previousValue, currentElement) : newValue.\n * @param {VALUE} val The initial value to pass into the function on the first\n *     call.\n * @param {THIS=} opt_obj  The object to be used as the value of 'this' within\n *     f.\n * @return {VALUE} Result of evaluating f repeatedly across the values of\n *     the iterator.\n * @template THIS, VALUE\n */\ngoog.iter.reduce = function(iterable, f, val, opt_obj) {\n  var rval = val;\n  goog.iter.forEach(\n      iterable, function(val) { rval = f.call(opt_obj, rval, val); });\n  return rval;\n};\n\n\n/**\n * Goes through the values in the iterator. Calls f for each of these, and if\n * any of them returns true, this returns true (without checking the rest). If\n * all return false this will return false.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {boolean} true if any value passes the test.\n * @template THIS, VALUE\n */\ngoog.iter.some = function(iterable, f, opt_obj) {\n  iterable = goog.iter.toIterator(iterable);\n\n  try {\n    while (true) {\n      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {\n        return true;\n      }\n    }\n  } catch (ex) {\n    if (ex !== goog.iter.StopIteration) {\n      throw ex;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Goes through the values in the iterator. Calls f for each of these and if any\n * of them returns false this returns false (without checking the rest). If all\n * return true this will return true.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {boolean} true if every value passes the test.\n * @template THIS, VALUE\n */\ngoog.iter.every = function(iterable, f, opt_obj) {\n  iterable = goog.iter.toIterator(iterable);\n\n  try {\n    while (true) {\n      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {\n        return false;\n      }\n    }\n  } catch (ex) {\n    if (ex !== goog.iter.StopIteration) {\n      throw ex;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Takes zero or more iterables and returns one iterator that will iterate over\n * them in the order chained.\n * @param {...!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} var_args Any\n *     number of iterable objects.\n * @return {!goog.iter.Iterator<VALUE>} Returns a new iterator that will\n *     iterate over all the given iterables' contents.\n * @template VALUE\n */\ngoog.iter.chain = function(var_args) {\n  return goog.iter.chainFromIterable(arguments);\n};\n\n\n/**\n * Takes a single iterable containing zero or more iterables and returns one\n * iterator that will iterate over each one in the order given.\n * @see https://goo.gl/5NRp5d\n * @param {goog.iter.Iterator<?>|goog.iter.Iterable} iterable The iterable of\n *     iterables to chain.\n * @return {!goog.iter.Iterator<VALUE>} Returns a new iterator that will\n *     iterate over all the contents of the iterables contained within\n *     `iterable`.\n * @template VALUE\n */\ngoog.iter.chainFromIterable = function(iterable) {\n  var iterator = goog.iter.toIterator(iterable);\n  var iter = new goog.iter.Iterator();\n  var current = null;\n\n  iter.next = function() {\n    while (true) {\n      if (current == null) {\n        var it = iterator.next();\n        current = goog.iter.toIterator(it);\n      }\n      try {\n        return current.next();\n      } catch (ex) {\n        if (ex !== goog.iter.StopIteration) {\n          throw ex;\n        }\n        current = null;\n      }\n    }\n  };\n\n  return iter;\n};\n\n\n/**\n * Builds a new iterator that iterates over the original, but skips elements as\n * long as a supplied function returns true.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator that drops elements from\n *     the original iterator as long as `f` is true.\n * @template THIS, VALUE\n */\ngoog.iter.dropWhile = function(iterable, f, opt_obj) {\n  var iterator = goog.iter.toIterator(iterable);\n  var newIter = new goog.iter.Iterator;\n  var dropping = true;\n  newIter.next = function() {\n    while (true) {\n      var val = iterator.next();\n      if (dropping && f.call(opt_obj, val, undefined, iterator)) {\n        continue;\n      } else {\n        dropping = false;\n      }\n      return val;\n    }\n  };\n  return newIter;\n};\n\n\n/**\n * Builds a new iterator that iterates over the original, but only as long as a\n * supplied function returns true.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS=} opt_obj This is used as the 'this' object in f when called.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator that keeps elements in\n *     the original iterator as long as the function is true.\n * @template THIS, VALUE\n */\ngoog.iter.takeWhile = function(iterable, f, opt_obj) {\n  var iterator = goog.iter.toIterator(iterable);\n  var iter = new goog.iter.Iterator();\n  iter.next = function() {\n    var val = iterator.next();\n    if (f.call(opt_obj, val, undefined, iterator)) {\n      return val;\n    }\n    throw goog.iter.StopIteration;\n  };\n  return iter;\n};\n\n\n/**\n * Converts the iterator to an array\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to convert to an array.\n * @return {!Array<VALUE>} An array of the elements the iterator iterates over.\n * @template VALUE\n */\ngoog.iter.toArray = function(iterable) {\n  // Fast path for array-like.\n  if (goog.isArrayLike(iterable)) {\n    return goog.array.toArray(/** @type {!IArrayLike<?>} */ (iterable));\n  }\n  iterable = goog.iter.toIterator(iterable);\n  var array = [];\n  goog.iter.forEach(iterable, function(val) { array.push(val); });\n  return array;\n};\n\n\n/**\n * Iterates over two iterables and returns true if they contain the same\n * sequence of elements and have the same length.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable1 The first\n *     iterable object.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable2 The second\n *     iterable object.\n * @param {function(VALUE,VALUE):boolean=} opt_equalsFn Optional comparison\n *     function.\n *     Should take two arguments to compare, and return true if the arguments\n *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which\n *     compares the elements using the built-in '===' operator.\n * @return {boolean} true if the iterables contain the same sequence of elements\n *     and have the same length.\n * @template VALUE\n */\ngoog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {\n  var fillValue = {};\n  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);\n  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;\n  return goog.iter.every(\n      pairs, function(pair) { return equalsFn(pair[0], pair[1]); });\n};\n\n\n/**\n * Advances the iterator to the next position, returning the given default value\n * instead of throwing an exception if the iterator has no more entries.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterable\n *     object.\n * @param {VALUE} defaultValue The value to return if the iterator is empty.\n * @return {VALUE} The next item in the iteration, or defaultValue if the\n *     iterator was empty.\n * @template VALUE\n */\ngoog.iter.nextOrValue = function(iterable, defaultValue) {\n  try {\n    return goog.iter.toIterator(iterable).next();\n  } catch (e) {\n    if (e != goog.iter.StopIteration) {\n      throw e;\n    }\n    return defaultValue;\n  }\n};\n\n\n/**\n * Cartesian product of zero or more sets.  Gives an iterator that gives every\n * combination of one element chosen from each set.  For example,\n * ([1, 2], [3, 4]) gives ([1, 3], [1, 4], [2, 3], [2, 4]).\n * @see http://docs.python.org/library/itertools.html#itertools.product\n * @param {...!IArrayLike<VALUE>} var_args Zero or more sets, as\n *     arrays.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} An iterator that gives each\n *     n-tuple (as an array).\n * @template VALUE\n */\ngoog.iter.product = function(var_args) {\n  var someArrayEmpty =\n      goog.array.some(arguments, function(arr) { return !arr.length; });\n\n  // An empty set in a cartesian product gives an empty set.\n  if (someArrayEmpty || !arguments.length) {\n    return new goog.iter.Iterator();\n  }\n\n  var iter = new goog.iter.Iterator();\n  var arrays = arguments;\n\n  // The first indices are [0, 0, ...]\n  /** @type {?Array<number>} */\n  var indicies = goog.array.repeat(0, arrays.length);\n\n  iter.next = function() {\n\n    if (indicies) {\n      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {\n        return arrays[arrayIndex][valueIndex];\n      });\n\n      // Generate the next-largest indices for the next call.\n      // Increase the rightmost index. If it goes over, increase the next\n      // rightmost (like carry-over addition).\n      for (var i = indicies.length - 1; i >= 0; i--) {\n        // Assertion prevents compiler warning below.\n        goog.asserts.assert(indicies);\n        if (indicies[i] < arrays[i].length - 1) {\n          indicies[i]++;\n          break;\n        }\n\n        // We're at the last indices (the last element of every array), so\n        // the iteration is over on the next call.\n        if (i == 0) {\n          indicies = null;\n          break;\n        }\n        // Reset the index in this column and loop back to increment the\n        // next one.\n        indicies[i] = 0;\n      }\n      return retVal;\n    }\n\n    throw goog.iter.StopIteration;\n  };\n\n  return iter;\n};\n\n\n/**\n * Create an iterator to cycle over the iterable's elements indefinitely.\n * For example, ([1, 2, 3]) would return : 1, 2, 3, 1, 2, 3, ...\n * @see: http://docs.python.org/library/itertools.html#itertools.cycle.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable object.\n * @return {!goog.iter.Iterator<VALUE>} An iterator that iterates indefinitely\n *     over the values in `iterable`.\n * @template VALUE\n */\ngoog.iter.cycle = function(iterable) {\n  var baseIterator = goog.iter.toIterator(iterable);\n\n  // We maintain a cache to store the iterable elements as we iterate\n  // over them. The cache is used to return elements once we have\n  // iterated over the iterable once.\n  var cache = [];\n  var cacheIndex = 0;\n\n  var iter = new goog.iter.Iterator();\n\n  // This flag is set after the iterable is iterated over once\n  var useCache = false;\n\n  iter.next = function() {\n    var returnElement = null;\n\n    // Pull elements off the original iterator if not using cache\n    if (!useCache) {\n      try {\n        // Return the element from the iterable\n        returnElement = baseIterator.next();\n        cache.push(returnElement);\n        return returnElement;\n      } catch (e) {\n        // If an exception other than StopIteration is thrown\n        // or if there are no elements to iterate over (the iterable was empty)\n        // throw an exception\n        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {\n          throw e;\n        }\n        // set useCache to true after we know that a 'StopIteration' exception\n        // was thrown and the cache is not empty (to handle the 'empty iterable'\n        // use case)\n        useCache = true;\n      }\n    }\n\n    returnElement = cache[cacheIndex];\n    cacheIndex = (cacheIndex + 1) % cache.length;\n\n    return returnElement;\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that counts indefinitely from a starting value.\n * @see http://docs.python.org/2/library/itertools.html#itertools.count\n * @param {number=} opt_start The starting value. Default is 0.\n * @param {number=} opt_step The number to increment with between each call to\n *     next. Negative and floating point numbers are allowed. Default is 1.\n * @return {!goog.iter.Iterator<number>} A new iterator that returns the values\n *     in the series.\n */\ngoog.iter.count = function(opt_start, opt_step) {\n  var counter = opt_start || 0;\n  var step = (opt_step !== undefined) ? opt_step : 1;\n  var iter = new goog.iter.Iterator();\n\n  iter.next = function() {\n    var returnValue = counter;\n    counter += step;\n    return returnValue;\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns the same object or value repeatedly.\n * @param {VALUE} value Any object or value to repeat.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator that returns the\n *     repeated value.\n * @template VALUE\n */\ngoog.iter.repeat = function(value) {\n  var iter = new goog.iter.Iterator();\n\n  iter.next = goog.functions.constant(value);\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns running totals from the numbers in\n * `iterable`. For example, the array {@code [1, 2, 3, 4, 5]} yields\n * {@code 1 -> 3 -> 6 -> 10 -> 15}.\n * @see http://docs.python.org/3.2/library/itertools.html#itertools.accumulate\n * @param {!goog.iter.Iterator<number>|!goog.iter.Iterable} iterable The\n *     iterable of numbers to accumulate.\n * @return {!goog.iter.Iterator<number>} A new iterator that returns the\n *     numbers in the series.\n */\ngoog.iter.accumulate = function(iterable) {\n  var iterator = goog.iter.toIterator(iterable);\n  var total = 0;\n  var iter = new goog.iter.Iterator();\n\n  iter.next = function() {\n    total += iterator.next();\n    return total;\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns arrays containing the ith elements from the\n * provided iterables. The returned arrays will be the same size as the number\n * of iterables given in `var_args`. Once the shortest iterable is\n * exhausted, subsequent calls to `next()` will throw\n * `goog.iter.StopIteration`.\n * @see http://docs.python.org/2/library/itertools.html#itertools.izip\n * @param {...!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} var_args Any\n *     number of iterable objects.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator that returns\n *     arrays of elements from the provided iterables.\n * @template VALUE\n */\ngoog.iter.zip = function(var_args) {\n  var args = arguments;\n  var iter = new goog.iter.Iterator();\n\n  if (args.length > 0) {\n    var iterators = goog.array.map(args, goog.iter.toIterator);\n    iter.next = function() {\n      var arr = goog.array.map(iterators, function(it) { return it.next(); });\n      return arr;\n    };\n  }\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns arrays containing the ith elements from the\n * provided iterables. The returned arrays will be the same size as the number\n * of iterables given in `var_args`. Shorter iterables will be extended\n * with `fillValue`. Once the longest iterable is exhausted, subsequent\n * calls to `next()` will throw `goog.iter.StopIteration`.\n * @see http://docs.python.org/2/library/itertools.html#itertools.izip_longest\n * @param {VALUE} fillValue The object or value used to fill shorter iterables.\n * @param {...!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} var_args Any\n *     number of iterable objects.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator that returns\n *     arrays of elements from the provided iterables.\n * @template VALUE\n */\ngoog.iter.zipLongest = function(fillValue, var_args) {\n  var args = goog.array.slice(arguments, 1);\n  var iter = new goog.iter.Iterator();\n\n  if (args.length > 0) {\n    var iterators = goog.array.map(args, goog.iter.toIterator);\n\n    iter.next = function() {\n      var iteratorsHaveValues = false;  // false when all iterators are empty.\n      var arr = goog.array.map(iterators, function(it) {\n        var returnValue;\n        try {\n          returnValue = it.next();\n          // Iterator had a value, so we've not exhausted the iterators.\n          // Set flag accordingly.\n          iteratorsHaveValues = true;\n        } catch (ex) {\n          if (ex !== goog.iter.StopIteration) {\n            throw ex;\n          }\n          returnValue = fillValue;\n        }\n        return returnValue;\n      });\n\n      if (!iteratorsHaveValues) {\n        throw goog.iter.StopIteration;\n      }\n      return arr;\n    };\n  }\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that filters `iterable` based on a series of\n * `selectors`. On each call to `next()`, one item is taken from\n * both the `iterable` and `selectors` iterators. If the item from\n * `selectors` evaluates to true, the item from `iterable` is given.\n * Otherwise, it is skipped. Once either `iterable` or `selectors`\n * is exhausted, subsequent calls to `next()` will throw\n * `goog.iter.StopIteration`.\n * @see http://docs.python.org/2/library/itertools.html#itertools.compress\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to filter.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} selectors An\n *     iterable of items to be evaluated in a boolean context to determine if\n *     the corresponding element in `iterable` should be included in the\n *     result.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator that returns the\n *     filtered values.\n * @template VALUE\n */\ngoog.iter.compress = function(iterable, selectors) {\n  var selectorIterator = goog.iter.toIterator(selectors);\n\n  return goog.iter.filter(\n      iterable, function() { return !!selectorIterator.next(); });\n};\n\n\n\n/**\n * Implements the `goog.iter.groupBy` iterator.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to group.\n * @param {function(VALUE): KEY=} opt_keyFunc  Optional function for\n *     determining the key value for each group in the `iterable`. Default\n *     is the identity function.\n * @constructor\n * @extends {goog.iter.Iterator<!Array<?>>}\n * @template KEY, VALUE\n * @private\n */\ngoog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {\n\n  /**\n   * The iterable to group, coerced to an iterator.\n   * @type {!goog.iter.Iterator}\n   */\n  this.iterator = goog.iter.toIterator(iterable);\n\n  /**\n   * A function for determining the key value for each element in the iterable.\n   * If no function is provided, the identity function is used and returns the\n   * element unchanged.\n   * @type {function(VALUE): KEY}\n   */\n  this.keyFunc = opt_keyFunc || goog.functions.identity;\n\n  /**\n   * The target key for determining the start of a group.\n   * @type {KEY}\n   */\n  this.targetKey;\n\n  /**\n   * The current key visited during iteration.\n   * @type {KEY}\n   */\n  this.currentKey;\n\n  /**\n   * The current value being added to the group.\n   * @type {VALUE}\n   */\n  this.currentValue;\n};\ngoog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);\n\n\n/** @override */\ngoog.iter.GroupByIterator_.prototype.next = function() {\n  while (this.currentKey == this.targetKey) {\n    this.currentValue = this.iterator.next();  // Exits on StopIteration\n    this.currentKey = this.keyFunc(this.currentValue);\n  }\n  this.targetKey = this.currentKey;\n  return [this.currentKey, this.groupItems_(this.targetKey)];\n};\n\n\n/**\n * Performs the grouping of objects using the given key.\n * @param {KEY} targetKey  The target key object for the group.\n * @return {!Array<VALUE>} An array of grouped objects.\n * @private\n */\ngoog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {\n  var arr = [];\n  while (this.currentKey == targetKey) {\n    arr.push(this.currentValue);\n    try {\n      this.currentValue = this.iterator.next();\n    } catch (ex) {\n      if (ex !== goog.iter.StopIteration) {\n        throw ex;\n      }\n      break;\n    }\n    this.currentKey = this.keyFunc(this.currentValue);\n  }\n  return arr;\n};\n\n\n/**\n * Creates an iterator that returns arrays containing elements from the\n * `iterable` grouped by a key value. For iterables with repeated\n * elements (i.e. sorted according to a particular key function), this function\n * has a `uniq`-like effect. For example, grouping the array:\n * {@code [A, B, B, C, C, A]} produces\n * {@code [A, [A]], [B, [B, B]], [C, [C, C]], [A, [A]]}.\n * @see http://docs.python.org/2/library/itertools.html#itertools.groupby\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to group.\n * @param {function(VALUE): KEY=} opt_keyFunc  Optional function for\n *     determining the key value for each group in the `iterable`. Default\n *     is the identity function.\n * @return {!goog.iter.Iterator<!Array<?>>} A new iterator that returns\n *     arrays of consecutive key and groups.\n * @template KEY, VALUE\n */\ngoog.iter.groupBy = function(iterable, opt_keyFunc) {\n  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);\n};\n\n\n/**\n * Gives an iterator that gives the result of calling the given function\n * <code>f</code> with the arguments taken from the next element from\n * <code>iterable</code> (the elements are expected to also be iterables).\n *\n * Similar to {@see goog.iter.map} but allows the function to accept multiple\n * arguments from the iterable.\n *\n * @param {!goog.iter.Iterator<?>|!goog.iter.Iterable} iterable The iterable of\n *     iterables to iterate over.\n * @param {function(this:THIS,...*):RESULT} f The function to call for every\n *     element.  This function takes N+2 arguments, where N represents the\n *     number of items from the next element of the iterable. The two\n *     additional arguments passed to the function are undefined and the\n *     iterator itself. The function should return a new value.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<RESULT>} A new iterator that returns the\n *     results of applying the function to each element in the original\n *     iterator.\n * @template THIS, RESULT\n */\ngoog.iter.starMap = function(iterable, f, opt_obj) {\n  var iterator = goog.iter.toIterator(iterable);\n  var iter = new goog.iter.Iterator();\n\n  iter.next = function() {\n    var args = goog.iter.toArray(iterator.next());\n    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));\n  };\n\n  return iter;\n};\n\n\n/**\n * Returns an array of iterators each of which can iterate over the values in\n * `iterable` without advancing the others.\n * @see http://docs.python.org/2/library/itertools.html#itertools.tee\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to tee.\n * @param {number=} opt_num  The number of iterators to create. Default is 2.\n * @return {!Array<goog.iter.Iterator<VALUE>>} An array of iterators.\n * @template VALUE\n */\ngoog.iter.tee = function(iterable, opt_num) {\n  var iterator = goog.iter.toIterator(iterable);\n  var num = (typeof opt_num === 'number') ? opt_num : 2;\n  var buffers =\n      goog.array.map(goog.array.range(num), function() { return []; });\n\n  var addNextIteratorValueToBuffers = function() {\n    var val = iterator.next();\n    goog.array.forEach(buffers, function(buffer) { buffer.push(val); });\n  };\n\n  var createIterator = function(buffer) {\n    // Each tee'd iterator has an associated buffer (initially empty). When a\n    // tee'd iterator's buffer is empty, it calls\n    // addNextIteratorValueToBuffers(), adding the next value to all tee'd\n    // iterators' buffers, and then returns that value. This allows each\n    // iterator to be advanced independently.\n    var iter = new goog.iter.Iterator();\n\n    iter.next = function() {\n      if (goog.array.isEmpty(buffer)) {\n        addNextIteratorValueToBuffers();\n      }\n      goog.asserts.assert(!goog.array.isEmpty(buffer));\n      return buffer.shift();\n    };\n\n    return iter;\n  };\n\n  return goog.array.map(buffers, createIterator);\n};\n\n\n/**\n * Creates an iterator that returns arrays containing a count and an element\n * obtained from the given `iterable`.\n * @see http://docs.python.org/2/library/functions.html#enumerate\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to enumerate.\n * @param {number=} opt_start  Optional starting value. Default is 0.\n * @return {!goog.iter.Iterator<!Array<?>>} A new iterator containing\n *     count/item pairs.\n * @template VALUE\n */\ngoog.iter.enumerate = function(iterable, opt_start) {\n  return goog.iter.zip(goog.iter.count(opt_start), iterable);\n};\n\n\n/**\n * Creates an iterator that returns the first `limitSize` elements from an\n * iterable. If this number is greater than the number of elements in the\n * iterable, all the elements are returned.\n * @see http://goo.gl/V0sihp Inspired by the limit iterator in Guava.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to limit.\n * @param {number} limitSize  The maximum number of elements to return.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator containing\n *     `limitSize` elements.\n * @template VALUE\n */\ngoog.iter.limit = function(iterable, limitSize) {\n  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);\n\n  var iterator = goog.iter.toIterator(iterable);\n\n  var iter = new goog.iter.Iterator();\n  var remaining = limitSize;\n\n  iter.next = function() {\n    if (remaining-- > 0) {\n      return iterator.next();\n    }\n    throw goog.iter.StopIteration;\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that is advanced `count` steps ahead. Consumed\n * values are silently discarded. If `count` is greater than the number\n * of elements in `iterable`, an empty iterator is returned. Subsequent\n * calls to `next()` will throw `goog.iter.StopIteration`.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to consume.\n * @param {number} count  The number of elements to consume from the iterator.\n * @return {!goog.iter.Iterator<VALUE>} An iterator advanced zero or more steps\n *     ahead.\n * @template VALUE\n */\ngoog.iter.consume = function(iterable, count) {\n  goog.asserts.assert(goog.math.isInt(count) && count >= 0);\n\n  var iterator = goog.iter.toIterator(iterable);\n\n  while (count-- > 0) {\n    goog.iter.nextOrValue(iterator, null);\n  }\n\n  return iterator;\n};\n\n\n/**\n * Creates an iterator that returns a range of elements from an iterable.\n * Similar to {@see goog.array.slice} but does not support negative indexes.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to slice.\n * @param {number} start  The index of the first element to return.\n * @param {number=} opt_end  The index after the last element to return. If\n *     defined, must be greater than or equal to `start`.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator containing a slice of\n *     the original.\n * @template VALUE\n */\ngoog.iter.slice = function(iterable, start, opt_end) {\n  goog.asserts.assert(goog.math.isInt(start) && start >= 0);\n\n  var iterator = goog.iter.consume(iterable, start);\n\n  if (typeof opt_end === 'number') {\n    goog.asserts.assert(goog.math.isInt(opt_end) && opt_end >= start);\n    iterator = goog.iter.limit(iterator, opt_end - start /* limitSize */);\n  }\n\n  return iterator;\n};\n\n\n/**\n * Checks an array for duplicate elements.\n * @param {?IArrayLike<VALUE>} arr The array to check for\n *     duplicates.\n * @return {boolean} True, if the array contains duplicates, false otherwise.\n * @private\n * @template VALUE\n */\n// TODO(user): Consider moving this into goog.array as a public function.\ngoog.iter.hasDuplicates_ = function(arr) {\n  var deduped = [];\n  goog.array.removeDuplicates(arr, deduped);\n  return arr.length != deduped.length;\n};\n\n\n/**\n * Creates an iterator that returns permutations of elements in\n * `iterable`.\n *\n * Permutations are obtained by taking the Cartesian product of\n * `opt_length` iterables and filtering out those with repeated\n * elements. For example, the permutations of {@code [1,2,3]} are\n * {@code [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]}.\n * @see http://docs.python.org/2/library/itertools.html#itertools.permutations\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable from which to generate permutations.\n * @param {number=} opt_length Length of each permutation. If omitted, defaults\n *     to the length of `iterable`.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator containing the\n *     permutations of `iterable`.\n * @template VALUE\n */\ngoog.iter.permutations = function(iterable, opt_length) {\n  var elements = goog.iter.toArray(iterable);\n  var length = (typeof opt_length === 'number') ? opt_length : elements.length;\n\n  var sets = goog.array.repeat(elements, length);\n  var product = goog.iter.product.apply(undefined, sets);\n\n  return goog.iter.filter(\n      product, function(arr) { return !goog.iter.hasDuplicates_(arr); });\n};\n\n\n/**\n * Creates an iterator that returns combinations of elements from\n * `iterable`.\n *\n * Combinations are obtained by taking the {@see goog.iter.permutations} of\n * `iterable` and filtering those whose elements appear in the order they\n * are encountered in `iterable`. For example, the 3-length combinations\n * of {@code [0,1,2,3]} are {@code [[0,1,2], [0,1,3], [0,2,3], [1,2,3]]}.\n * @see http://docs.python.org/2/library/itertools.html#itertools.combinations\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable from which to generate combinations.\n * @param {number} length The length of each combination.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator containing\n *     combinations from the `iterable`.\n * @template VALUE\n */\ngoog.iter.combinations = function(iterable, length) {\n  var elements = goog.iter.toArray(iterable);\n  var indexes = goog.iter.range(elements.length);\n  var indexIterator = goog.iter.permutations(indexes, length);\n  // sortedIndexIterator will now give arrays of with the given length that\n  // indicate what indexes into \"elements\" should be returned on each iteration.\n  var sortedIndexIterator = goog.iter.filter(\n      indexIterator, function(arr) { return goog.array.isSorted(arr); });\n\n  var iter = new goog.iter.Iterator();\n\n  function getIndexFromElements(index) { return elements[index]; }\n\n  iter.next = function() {\n    return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns combinations of elements from\n * `iterable`, with repeated elements possible.\n *\n * Combinations are obtained by taking the Cartesian product of `length`\n * iterables and filtering those whose elements appear in the order they are\n * encountered in `iterable`. For example, the 2-length combinations of\n * {@code [1,2,3]} are {@code [[1,1], [1,2], [1,3], [2,2], [2,3], [3,3]]}.\n * @see https://goo.gl/C0yXe4\n * @see https://goo.gl/djOCsk\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to combine.\n * @param {number} length The length of each combination.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator containing\n *     combinations from the `iterable`.\n * @template VALUE\n */\ngoog.iter.combinationsWithReplacement = function(iterable, length) {\n  var elements = goog.iter.toArray(iterable);\n  var indexes = goog.array.range(elements.length);\n  var sets = goog.array.repeat(indexes, length);\n  var indexIterator = goog.iter.product.apply(undefined, sets);\n  // sortedIndexIterator will now give arrays of with the given length that\n  // indicate what indexes into \"elements\" should be returned on each iteration.\n  var sortedIndexIterator = goog.iter.filter(\n      indexIterator, function(arr) { return goog.array.isSorted(arr); });\n\n  var iter = new goog.iter.Iterator();\n\n  function getIndexFromElements(index) { return elements[index]; }\n\n  iter.next = function() {\n    return goog.array.map(\n        /** @type {!Array<number>} */\n        (sortedIndexIterator.next()), getIndexFromElements);\n  };\n\n  return iter;\n};\n"],
"names":["goog","provide","require","iter","Iterable","StopIteration","global","message","stack","Iterator","goog.iter.Iterator","prototype","next","goog.iter.Iterator.prototype.next","__iterator__","goog.iter.Iterator.prototype.__iterator__","opt_keys","toIterator","goog.iter.toIterator","iterable","isArrayLike","like","i","newIter","newIter.next","length","Error","forEach","goog.iter.forEach","f","opt_obj","array","ex","call","undefined","filter","goog.iter.filter","iterator","val","filterFalse","goog.iter.filterFalse","functions","not","range","goog.iter.range","startOrStop","opt_stop","opt_step","start","stop","step","arguments","rv","join","goog.iter.join","deliminator","toArray","map","goog.iter.map","reduce","goog.iter.reduce","rval","some","goog.iter.some","every","goog.iter.every","chain","goog.iter.chain","var_args","chainFromIterable","goog.iter.chainFromIterable","current","iter.next","it","dropWhile","goog.iter.dropWhile","dropping","takeWhile","goog.iter.takeWhile","goog.iter.toArray","push","equals","goog.iter.equals","iterable1","iterable2","opt_equalsFn","fillValue","pairs","zipLongest","equalsFn","defaultCompareEquality","pair","nextOrValue","goog.iter.nextOrValue","defaultValue","e","product","goog.iter.product","someArrayEmpty","arr","arrays","indicies","repeat","retVal","valueIndex","arrayIndex","asserts","assert","cycle","goog.iter.cycle","baseIterator","cache","cacheIndex","useCache","returnElement","isEmpty","count","goog.iter.count","opt_start","counter","returnValue","goog.iter.repeat","value","constant","accumulate","goog.iter.accumulate","total","zip","goog.iter.zip","args","iterators","goog.iter.zipLongest","slice","iteratorsHaveValues","compress","goog.iter.compress","selectors","selectorIterator","GroupByIterator_","goog.iter.GroupByIterator_","opt_keyFunc","keyFunc","identity","targetKey","currentKey","currentValue","inherits","goog.iter.GroupByIterator_.prototype.next","groupItems_","goog.iter.GroupByIterator_.prototype.groupItems_","groupBy","goog.iter.groupBy","starMap","goog.iter.starMap","apply","concat","tee","goog.iter.tee","opt_num","num","buffers","addNextIteratorValueToBuffers","buffer","createIterator","shift","enumerate","goog.iter.enumerate","limit","goog.iter.limit","limitSize","math","isInt","remaining","consume","goog.iter.consume","goog.iter.slice","opt_end","hasDuplicates_","goog.iter.hasDuplicates_","deduped","removeDuplicates","permutations","goog.iter.permutations","opt_length","elements","sets","combinations","goog.iter.combinations","indexes","indexIterator","sortedIndexIterator","isSorted","getIndexFromElements","index","combinationsWithReplacement","goog.iter.combinationsWithReplacement"]
}
