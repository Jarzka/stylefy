{"version":3,"sources":["cljs/tools/reader/impl/commons.cljs"],"mappings":"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","names":["cljs.tools.reader.impl.commons/number-literal?","reader","initch","cljs.tools.reader.impl.utils/numeric?","cljs.tools.reader.impl.commons/read-past","pred","rdr","ch","cljs.tools.reader.impl.commons/skip-line","cljs.tools.reader.impl.utils/newline?","cljs.tools.reader.impl.commons/int-pattern","cljs.tools.reader.impl.commons/ratio-pattern","cljs.tools.reader.impl.commons/float-pattern","cljs.tools.reader.impl.commons/match-int","s","m","cljs.core/vec","cljs.core/re-find","negate?","a","js/parseInt","n","bn","js/isNaN","cljs.tools.reader.impl.commons/match-ratio","numerator","denominator","cljs.core.subs","cljs.tools.reader.impl.commons/match-float","js/parseFloat","cljs.tools.reader.impl.commons/matches?","pattern","vec__29257","cljs.core.nth","match","cljs.tools.reader.impl.commons/match-number","cljs.tools.reader.impl.commons/parse-symbol","token","ns-idx","ns","cljs.core/count","sym","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","cljs.tools.reader.impl.commons/read-comment","seq29274","G__29275","cljs.core/first","cljs.core/next","self__4717__auto__","_","cljs.tools.reader.impl.commons/throwing-reader","msg","cljs.tools.reader.impl.errors.reader_error"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.commons\n  (:refer-clojure :exclude [char])\n  (:require\n   [cljs.tools.reader.impl.errors :refer [reader-error]]\n   [cljs.tools.reader.reader-types :refer [peek-char read-char]]\n   [cljs.tools.reader.impl.utils :refer [numeric? newline? char]]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; helpers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn ^boolean number-literal?\n  \"Checks whether the reader is at the start of a number literal\"\n  [^not-native reader initch]\n  (or (numeric? initch)\n      (and (or (identical? \\+ initch) (identical?  \\- initch))\n           (numeric? (peek-char reader)))))\n\n(defn read-past\n  \"Read until first character that doesn't match pred, returning\n   char.\"\n  [pred ^not-native rdr]\n  (loop [ch (read-char rdr)]\n    (if ^boolean (pred ch)\n      (recur (read-char rdr))\n      ch)))\n\n(defn skip-line\n  \"Advances the reader to the end of a line. Returns the reader\"\n  [^not-native reader]\n  (loop []\n    (when-not (newline? (read-char reader))\n      (recur)))\n  reader)\n\n(def int-pattern #\"^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?$\")\n(def ratio-pattern #\"([-+]?[0-9]+)/([0-9]+)\")\n(def float-pattern #\"([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?\")\n\n(defn- match-int\n  [s]\n  (let [m (vec (re-find int-pattern s))]\n    (if-not (nil? (m 2))\n      0\n      (let [^boolean negate? (identical? \"-\" (m 1))\n            a (cond\n               (not (nil? (m 3))) [(m 3) 10]\n               (not (nil? (m 4))) [(m 4) 16]\n               (not (nil? (m 5))) [(m 5) 8]\n               (not (nil? (m 7))) [(m 7) (js/parseInt (m 6))]\n               :else              [nil nil])\n            n (a 0)]\n        (when-not (nil? n)\n          (let [bn (js/parseInt n (a 1))\n                bn (if negate? (* -1 bn) bn)]\n            (when-not (js/isNaN bn)\n              bn)))))))\n\n(defn- match-ratio\n  [s]\n  (let [m (vec (re-find ratio-pattern s))\n        numerator (m 1)\n        denominator (m 2)\n        numerator (if (re-find #\"^\\+\" numerator)\n                    (subs numerator 1)\n                    numerator)]\n    (/ (-> numerator   js/parseInt) ;;; No ratio type in cljs\n       (-> denominator js/parseInt)))); So will convert to js/Number\n\n(defn- match-float\n  [s]\n  (let [m (vec (re-find float-pattern s))]\n    (if-not (nil? (m 4)) ;; for BigDecimal \"10.03M\", as all parsed to js/Number\n      (js/parseFloat (m 1))\n      (js/parseFloat s))))\n\n(defn ^boolean matches? [pattern s]\n  (let [[match] (re-find pattern s)]\n    (identical? match s)))\n\n(defn match-number [s]\n  (if (matches? int-pattern s)\n    (match-int s)\n    (if (matches? float-pattern s)\n      (match-float s)\n      (when (matches? ratio-pattern s)\n        (match-ratio s)))))\n\n(defn parse-symbol\n  \"Parses a string into a vector of the namespace and symbol\"\n  [token]\n  (when-not (or (identical? \"\" token)\n                (true? (.test #\":$\" token))\n                (true? (.test #\"^::\" token)))\n    (let [ns-idx (.indexOf token \"/\")\n          ns (when (pos? ns-idx)\n               (subs token 0 ns-idx))]\n      (if-not (nil? ns)\n        (let [ns-idx (inc ns-idx)]\n          (when-not (== ns-idx (count token))\n            (let [sym (subs token ns-idx)]\n              (when (and (not (numeric? (nth sym 0)))\n                         (not (identical? \"\" sym))\n                         (false? (.test #\":$\" ns))\n                         (or (identical? sym \"/\")\n                             (== -1 (.indexOf sym \"/\"))))\n                [ns sym]))))\n        (when (or (identical? token \"/\")\n                  (== -1 (.indexOf token \"/\")))\n          [nil token])))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; readers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn read-comment\n  [rdr & _]\n  (skip-line rdr))\n\n(defn throwing-reader\n  [msg]\n  (fn [rdr & _]\n    (reader-error rdr msg)))\n"]}