{"version":3,"sources":["stylefy/examples/full_page.cljs"],"mappings":"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","names":["stylefy.examples.full-page/phone-width","stylefy.examples.full-page/tablet","stylefy.examples.full-page/header","stylefy.examples.full-page/bs-row-overrides","stylefy.examples.full-page/main","stylefy.examples.full-page/main-content","stylefy.examples.full-page/clearfix","stylefy.examples.full-page/footer","stylefy.examples.full-page/meme","stylefy.examples.full-page/lorem","stylefy.examples.full-page/clock-body","stylefy.examples.full-page/clock-hand","type","time-value","p1__28155#","p1__28156#","second-to-deg","minute-to-deg","hour-to-deg","G__28157","cljs.core/Keyword","js/Error","G__28158","G__28159","G__28160","stylefy.examples.full-page/clock","time","reagent.core.atom","cljs-time.core/now","updating?","cljs.core.atom","reagent.core/create-class","c__26891__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__26892__auto__","switch__26274__auto__","state_28176","state_val_28177","statearr-28178","inst_28162","cljs.core.async.impl.ioc-helpers/take!","inst_28174","cljs.core.async.impl.ioc-helpers/return-chan","inst_28164","inst_28165","cljs.core/deref","statearr-28179","statearr-28180","statearr-28181","inst_28167","inst_28168","statearr-28182","statearr-28183","statearr-28184","inst_28172","statearr-28185","statearr-28186","state-machine__26275__auto__","ret-value__26276__auto__","result__26277__auto__","cljs.core/keyword-identical?","ex__26278__auto__","e28187","statearr-28188","cljs.core/seq","statearr-28189","cljs.core/first","state__26893__auto__","statearr-28190","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","cljs.core/reset!","stylefy.core.use_style","cljs-time.core/second","cljs-time.core/minute","cljs-time.core/hour","stylefy.examples.full-page/full-page","stylefy.core.use_sub_style","cljs.core.merge"],"sourcesContent":["(ns stylefy.examples.full-page\n  (:require [reagent.core :as r]\n            [cljs-time.core :as t]\n            [cljs.core.async :refer [<! timeout]]\n            [stylefy.core :as stylefy :refer [use-style use-sub-style]])\n  (:require-macros [cljs.core.async.macros :refer [go go-loop]]))\n\n(def phone-width \"514px\")\n(def tablet \"770px\")\n\n(def header {:display :flex\n             :flex-direction :column\n             :background-color \"rgb(3, 84, 114)\" ; Fallback\n             :background-image \"url(images/background.jpg)\"\n             :background-size \"100%\"\n             :text-transform \"uppercase\"\n             :color \"white\"\n             :padding \"15px\"\n             :text-align :center\n             :justify-content :center\n             :align-self :center\n             ::stylefy/sub-styles\n             {:infinity {:font-size \"150px\"\n                         :margin-top \"-0.4em\"\n                         :margin-bottom \"-0.4em\"\n                         ::stylefy/media {{:max-width phone-width} {:font-size \"75px\"}}}\n              :h1 {:font-size \"80px\"\n                   ::stylefy/media {{:max-width phone-width} {:font-size \"40px\"}}}\n              :h2 {:font-size \"40px\"\n                   :letter-spacing \"0.5em\"\n                   ::stylefy/media {{:max-width phone-width} {:font-size \"20px\"}}}}})\n\n(def bs-row-overrides {:margin-right 0\n                       :margin-left 0})\n\n(def main {:margin-top \"5px\"\n           :margin-bottom \"15px\"})\n\n(def main-content {:border-right \"1px solid black\"\n                   :padding \"15px\"\n                   ::stylefy/media {{:max-width tablet} {:border-right \"none\"}}})\n\n(def clearfix {::stylefy/mode {:after {:clear \"both\"\n                                       :content \".\" ;\n                                       :display \"block\"\n                                       :height 0\n                                       :line-height 0\n                                       :visibility \"hidden\"}}})\n\n(def footer {:background-color \"#BBBBBB\"\n             :padding \"5px\"\n             :text-align :center})\n\n(def meme {:width \"100%\"\n           :margin-top \"1em\"\n           :margin-bottom \"1em\"})\n\n(def lorem \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\")\n\n(def clock-body {:position :relative\n                 :border \"4px solid rgb(3, 84, 114)\"\n                 :background-color \"#EEEEEE\"\n                 :border-radius \"100%\"\n                 :width \"200px\"\n                 :height \"200px\"\n                 :margin-left \"auto\"\n                 :margin-right \"auto\"})\n\n(defn clock-hand [type time-value]\n  (let [second-to-deg #(str \"rotate(\" (- (* (/ % 60) 360) 90) \"deg)\")\n        minute-to-deg second-to-deg\n        hour-to-deg #(str \"rotate(\" (- (* (/ % 24) 360) 90) \"deg)\")]\n    {:position :relative\n     :top \"50%\"\n     :left \"50%\"\n     :width (case type :second \"90px\"\n                       :minute \"90px\"\n                       :hour \"40px\")\n     :height (case type :second \"2px\"\n                        :minute \"4px\"\n                        :hour \"6px\")\n     :background-color (case type :second \"red\"\n                                  :minute \"black\"\n                                  :hour \"black\")\n     :transform-origin \"top left\"\n     :transform (case type :second (second-to-deg time-value)\n                           :minute (minute-to-deg time-value)\n                           :hour (hour-to-deg time-value))}))\n\n(defn clock []\n  (let [time (r/atom (t/now))\n        updating? (atom true)]\n    (r/create-class\n      {:component-did-mount #(go-loop []\n                                       (<! (timeout 1000))\n                                       (when @updating?\n                                         (reset! time (t/now))\n                                         (recur)))\n       :component-will-unmount #(reset! updating? false)\n       :render\n       (fn []\n         [:div (use-style clock-body)\n          ; Clock hands should not use stylefy, because clock-hand will generate\n          ; many different styles; we do not want to create a new CSS class from each different result.\n          ; In this case, inline style is a better option.\n          [:div {:style (clock-hand :second (t/second @time))}]\n          [:div {:style (clock-hand :minute (t/minute @time))}]\n          [:div {:style (clock-hand :hour (t/hour @time))}]])})))\n\n(defn full-page []\n  [:div\n   [:header (use-style header)\n    [:h1 (use-sub-style header :infinity) \"\u221e\"]\n    [:h1 (use-sub-style header :h1) \"Full Page Style\"]\n    [:h1 (use-sub-style header :h2) \"by stylefy\"]]\n   [:div.row (use-style (merge bs-row-overrides clearfix))\n    [:div.main.col-sm-8 (use-style main)\n     [:div (use-style main-content)\n      [:article\n       [:h1 \"Lorem ipsum 1\"]\n       [:p lorem]]\n      [:article\n       [:h1 \"CSS Clock\"]\n       [clock]]\n      [:article\n       [:h1 \"Lorem ipsum 3\"]\n       [:p lorem]\n       [:div (use-style {:color \"red\" :margin-right \"5px\"} {:class \"text-left text-uppercase\"})\n        \"Text left uppercase\"]\n       [:div (use-style {:color \"red\" :margin-right \"5px\"} {:class \"text-uppercase text-center\"})\n        \"Text center uppercase\"]\n       [:div (use-style {:color \"red\" :margin-right \"5px\"} {:class [\"text-right\" \"text-uppercase\"]})\n        \"Text right uppercase\"]]]]\n    [:aside.col-sm-4\n     [:img (merge\n             (use-style meme)\n             {:src \"images/meme.jpg\"})]]]\n   [:footer (use-style footer)\n    \"Pretty much useless footer\"]])"]}