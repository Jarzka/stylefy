{
"version":3,
"file":"goog.string.string.js",
"lineCount":797,
"mappings":"AAuBAA,IAAAC,QAAA,CAAa,aAAb,CAAA;AACAD,IAAAC,QAAA,CAAa,qBAAb,CAAA;AAEAD,IAAAE,QAAA,CAAa,eAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,gCAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,mBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,sBAAb,CAAA;AAOA,yBAAAF,IAAAG,OAAAC,uBAAA,GACIJ,IAAAK,OAAA,CAAY,oCAAZ,EAAkD,KAAlD,CADJ;AAOA,yBAAAL,IAAAG,OAAAG,8BAAA,GACIN,IAAAK,OAAA,CAAY,2CAAZ,EAAyD,KAAzD,CADJ;AAQA,sBAAAL,IAAAG,OAAAI,QAAA,GAAsB,CACpBC,KAAM,GADc,CAAtB;AAWA;;;;;AAAAR,IAAAG,OAAAM,WAAA,GAAyBT,IAAAG,OAAAO,SAAAD,WAAzB;AASA;;;;;AAAAT,IAAAG,OAAAQ,SAAA,GAAuBX,IAAAG,OAAAO,SAAAC,SAAvB;AAUA;;;;;AAAAX,IAAAG,OAAAS,0BAAA,GACIZ,IAAAG,OAAAO,SAAAE,0BADJ;AAWA;;;;;AAAAZ,IAAAG,OAAAU,wBAAA,GACIb,IAAAG,OAAAO,SAAAG,wBADJ;AAWA;;;;;AAAAb,IAAAG,OAAAW,sBAAA,GAAoCd,IAAAG,OAAAO,SAAAI,sBAApC;AAWA;;;;;AAAAd,IAAAG,OAAAY,KAAA,GAAmBC,QAAQ,CAACC,GAAD,EAAMC,QAAN,CAAgB;AACzC,MAAIC,aAAaF,GAAAG,MAAA,CAAU,IAAV,CAAjB;AACA,MAAIC,eAAe,EAAnB;AAEA,MAAIC,gBAAgBC,KAAAC,UAAAC,MAAAC,KAAA,CAA2BC,SAA3B,EAAsC,CAAtC,CAApB;AACA,SAAOL,aAAAM,OAAP,IAGOT,UAAAS,OAHP,GAG2B,CAH3B;AAIEP,gBAAA,IAAgBF,UAAAU,MAAA,EAAhB,GAAqCP,aAAAO,MAAA,EAArC;AAJF;AAOA,SAAOR,YAAP,GAAsBF,UAAAW,KAAA,CAAgB,IAAhB,CAAtB;AAZyC,CAA3C;AAsBA;;;;AAAA9B,IAAAG,OAAA4B,mBAAA,GAAiCC,QAAQ,CAACf,GAAD,CAAM;AAI7C,SAAOA,GAAAgB,QAAA,CAAY,YAAZ,EAA0B,GAA1B,CAAAA,QAAA,CAAuC,YAAvC,EAAqD,EAArD,CAAP;AAJ6C,CAA/C;AAaA;;;;AAAAjC,IAAAG,OAAA+B,oBAAA,GAAkClC,IAAAG,OAAAO,SAAAwB,oBAAlC;AAQA;;;;AAAAlC,IAAAG,OAAAgC,cAAA,GAA4BC,QAAQ,CAACnB,GAAD,CAAM;AACxC,SAAOA,GAAAW,OAAP,IAAqB,CAArB;AADwC,CAA1C;AAYA;;;;;AAAA5B,IAAAG,OAAAkC,QAAA,GAAsBrC,IAAAG,OAAA+B,oBAAtB;AAWA;;;;;AAAAlC,IAAAG,OAAAmC,wBAAA,GAAsCC,QAAQ,CAACtB,GAAD,CAAM;AAClD,SAAOjB,IAAAG,OAAA+B,oBAAA,CAAgClC,IAAAG,OAAAqC,SAAA,CAAqBvB,GAArB,CAAhC,CAAP;AADkD,CAApD;AAaA;;;;;AAAAjB,IAAAG,OAAAsC,YAAA,GAA0BzC,IAAAG,OAAAmC,wBAA1B;AAQA;;;;AAAAtC,IAAAG,OAAAuC,qBAAA,GAAmCC,QAAQ,CAAC1B,GAAD,CAAM;AAC/C,SAAO,CAAC,YAAA2B,KAAA,CAAkB3B,GAAlB,CAAR;AAD+C,CAAjD;AAUA;;;;AAAAjB,IAAAG,OAAA0C,QAAA,GAAsBC,QAAQ,CAAC7B,GAAD,CAAM;AAClC,SAAO,CAAC,WAAA2B,KAAA,CAAiB3B,GAAjB,CAAR;AADkC,CAApC;AAWA;;;;AAAAjB,IAAAG,OAAA4C,UAAA,GAAwBC,QAAQ,CAAC/B,GAAD,CAAM;AACpC,SAAO,CAAC,QAAA2B,KAAA,CAAc3B,GAAd,CAAR;AADoC,CAAtC;AAUA;;;;AAAAjB,IAAAG,OAAA8C,eAAA,GAA6BC,QAAQ,CAACjC,GAAD,CAAM;AACzC,SAAO,CAAC,cAAA2B,KAAA,CAAoB3B,GAApB,CAAR;AADyC,CAA3C;AAUA;;;;AAAAjB,IAAAG,OAAAgD,QAAA,GAAsBC,QAAQ,CAACC,EAAD,CAAK;AACjC,SAAOA,EAAP,IAAa,GAAb;AADiC,CAAnC;AAUA;;;;AAAArD,IAAAG,OAAAmD,cAAA,GAA4BC,QAAQ,CAACF,EAAD,CAAK;AACvC,SAAOA,EAAAzB,OAAP,IAAoB,CAApB,IAAyByB,EAAzB,IAA+B,GAA/B,IAAsCA,EAAtC,IAA4C,GAA5C,IACIA,EADJ,IACU,GADV,IACsBA,EADtB,IAC4B,GAD5B;AADuC,CAAzC;AAYA;;;;AAAArD,IAAAG,OAAAqD,cAAA,GAA4BC,QAAQ,CAACxC,GAAD,CAAM;AACxC,SAAOA,GAAAgB,QAAA,CAAY,gBAAZ,EAA8B,GAA9B,CAAP;AADwC,CAA1C;AAUA;;;;AAAAjC,IAAAG,OAAAuD,qBAAA,GAAmCC,QAAQ,CAAC1C,GAAD,CAAM;AAC/C,SAAOA,GAAAgB,QAAA,CAAY,eAAZ,EAA6B,IAA7B,CAAP;AAD+C,CAAjD;AAWA;;;;AAAAjC,IAAAG,OAAAyD,oBAAA,GAAkCC,QAAQ,CAAC5C,GAAD,CAAM;AAC9C,SAAOA,GAAAgB,QAAA,CAAY,UAAZ,EAAwB,GAAxB,CAAP;AAD8C,CAAhD;AAYA;;;;AAAAjC,IAAAG,OAAA2D,gBAAA,GAA8BC,QAAQ,CAAC9C,GAAD,CAAM;AAC1C,SAAOA,GAAAgB,QAAA,CAAY,cAAZ,EAA4B,GAA5B,CAAP;AAD0C,CAA5C;AAYA;;;;AAAAjC,IAAAG,OAAA6D,uBAAA,GAAqCC,QAAQ,CAAChD,GAAD,CAAM;AACjD,SAAOA,GAAAgB,QAAA,CAAY,aAAZ,EAA2B,GAA3B,CAAAA,QAAA,CACM,0BADN,EACkC,EADlC,CAAP;AADiD,CAAnD;AAWA;;;;AAAAjC,IAAAG,OAAA+D,KAAA,GAAmBlE,IAAAG,OAAAO,SAAAwD,KAAnB;AAQA;;;;AAAAlE,IAAAG,OAAAgE,SAAA,GAAuBC,QAAQ,CAACnD,GAAD,CAAM;AAInC,SAAOA,GAAAgB,QAAA,CAAY,YAAZ,EAA0B,EAA1B,CAAP;AAJmC,CAArC;AAaA;;;;AAAAjC,IAAAG,OAAAkE,UAAA,GAAwBC,QAAQ,CAACrD,GAAD,CAAM;AAIpC,SAAOA,GAAAgB,QAAA,CAAY,YAAZ,EAA0B,EAA1B,CAAP;AAJoC,CAAtC;AAkBA;;;;;AAAAjC,IAAAG,OAAAoE,uBAAA,GACIvE,IAAAG,OAAAO,SAAA6D,uBADJ;AAgBA;;;;;;;AAAAvE,IAAAG,OAAAqE,oBAAA,GAAkCC,QAAQ,CAACC,IAAD,EAAOC,IAAP,EAAaC,eAAb,CAA8B;AACtE,MAAIF,IAAJ,IAAYC,IAAZ;AACE,WAAO,CAAP;AADF;AAGA,MAAI,CAACD,IAAL;AACE,WAAO,EAAP;AADF;AAGA,MAAI,CAACC,IAAL;AACE,WAAO,CAAP;AADF;AAMA,MAAIE,UAAUH,IAAAI,YAAA,EAAAC,MAAA,CAAyBH,eAAzB,CAAd;AACA,MAAII,UAAUL,IAAAG,YAAA,EAAAC,MAAA,CAAyBH,eAAzB,CAAd;AAEA,MAAIK,QAAQC,IAAAC,IAAA,CAASN,OAAAjD,OAAT,EAAyBoD,OAAApD,OAAzB,CAAZ;AAEA,OAAK,IAAIwD,IAAI,CAAb,EAAgBA,CAAhB,GAAoBH,KAApB,EAA2BG,CAAA,EAA3B,CAAgC;AAC9B,QAAIC,IAAIR,OAAA,CAAQO,CAAR,CAAR;AACA,QAAIE,IAAIN,OAAA,CAAQI,CAAR,CAAR;AAGA,QAAIC,CAAJ,IAASC,CAAT,CAAY;AAGV,UAAIC,OAAOC,QAAA,CAASH,CAAT,EAAY,EAAZ,CAAX;AACA,UAAI,CAACI,KAAA,CAAMF,IAAN,CAAL,CAAkB;AAChB,YAAIG,OAAOF,QAAA,CAASF,CAAT,EAAY,EAAZ,CAAX;AACA,YAAI,CAACG,KAAA,CAAMC,IAAN,CAAL,IAAoBH,IAApB,GAA2BG,IAA3B;AACE,iBAAOH,IAAP,GAAcG,IAAd;AADF;AAFgB;AAMlB,aAAOL,CAAA,GAAIC,CAAJ,GAAQ,EAAR,GAAa,CAApB;AAVU;AALkB;AAoBhC,MAAIT,OAAAjD,OAAJ,IAAsBoD,OAAApD,OAAtB;AACE,WAAOiD,OAAAjD,OAAP,GAAwBoD,OAAApD,OAAxB;AADF;AAOA,SAAO8C,IAAA,GAAOC,IAAP,GAAc,EAAd,GAAmB,CAA1B;AA7CsE,CAAxE;AAkEA;;;;;AAAA3E,IAAAG,OAAAwF,gBAAA,GAA8BC,QAAQ,CAAClB,IAAD,EAAOC,IAAP,CAAa;AACjD,SAAO3E,IAAAG,OAAAqE,oBAAA,CAAgCE,IAAhC,EAAsCC,IAAtC,EAA4C,UAA5C,CAAP;AADiD,CAAnD;AAiBA;;;;;AAAA3E,IAAAG,OAAA0F,kBAAA,GAAgCC,QAAQ,CAACpB,IAAD,EAAOC,IAAP,CAAa;AACnD,SAAO3E,IAAAG,OAAAqE,oBAAA,CAAgCE,IAAhC,EAAsCC,IAAtC,EAA4C,gBAA5C,CAAP;AADmD,CAArD;AAYA;;;;;AAAA3E,IAAAG,OAAA4F,gBAAA,GAA8B/F,IAAAG,OAAA0F,kBAA9B;AAUA;;;;AAAA7F,IAAAG,OAAA6F,UAAA,GAAwBC,QAAQ,CAAChF,GAAD,CAAM;AACpC,SAAOiF,kBAAA,CAAmBC,MAAA,CAAOlF,GAAP,CAAnB,CAAP;AADoC,CAAtC;AAWA;;;;AAAAjB,IAAAG,OAAAiG,UAAA,GAAwBC,QAAQ,CAACpF,GAAD,CAAM;AACpC,SAAOqF,kBAAA,CAAmBrF,GAAAgB,QAAA,CAAY,KAAZ,EAAmB,GAAnB,CAAnB,CAAP;AADoC,CAAtC;AAWA;;;;;AAAAjC,IAAAG,OAAAoG,YAAA,GAA0BvG,IAAAG,OAAAO,SAAA6F,YAA1B;AA+CA;;;;;AAAAvG,IAAAG,OAAAqG,WAAA,GAAyBC,QAAQ,CAACxF,GAAD,EAAMyF,8BAAN,CAAsC;AACrEzF,KAAA,GAAMjB,IAAAG,OAAAO,SAAA8F,WAAA,CAAgCvF,GAAhC,EAAqCyF,8BAArC,CAAN;AACA,MAAI1G,IAAAG,OAAAC,uBAAJ;AACEa,OAAA,GAAMA,GAAAgB,QAAA,CAAYjC,IAAAG,OAAAwG,MAAZ,EAA+B,WAA/B,CAAN;AADF;AAGA,SAAO1F,GAAP;AALqE,CAAvE;AAcA,uCAAAjB,IAAAG,OAAAwG,MAAA,GAAoB,IAApB;AASA;;;;AAAA3G,IAAAG,OAAAyG,iBAAA,GAA+BC,QAAQ,CAAC5F,GAAD,CAAM;AAC3C,MAAIjB,IAAAG,OAAA2G,SAAA,CAAqB7F,GAArB,EAA0B,MAA1B,CAAJ;AAGE,QAAI,CAACjB,IAAAG,OAAAG,8BAAL,IACI,UADJ,IACkBN,IAAA+G,OADlB;AAEE,aAAO/G,IAAAG,OAAA6G,0BAAA,CAAsC/F,GAAtC,CAAP;AAFF;AAKE,aAAOjB,IAAAG,OAAA8G,yBAAA,CAAqChG,GAArC,CAAP;AALF;AAHF;AAWA,SAAOA,GAAP;AAZ2C,CAA7C;AAuBA;;;;;AAAAjB,IAAAG,OAAA+G,6BAAA,GAA2CC,QAAQ,CAAClG,GAAD,EAAMmG,QAAN,CAAgB;AACjE,MAAIpH,IAAAG,OAAA2G,SAAA,CAAqB7F,GAArB,EAA0B,MAA1B,CAAJ;AACE,WAAOjB,IAAAG,OAAA6G,0BAAA,CAAsC/F,GAAtC,EAA2CmG,QAA3C,CAAP;AADF;AAGA,SAAOnG,GAAP;AAJiE,CAAnE;AAkBA;;;;;;AAAAjB,IAAAG,OAAA6G,0BAAA,GAAwCK,QAAQ,CAACpG,GAAD,EAAMqG,YAAN,CAAoB;wCAElE,IAAIC,OAAO,CAAC,WAAS,MAAV,EAAe,UAAQ,MAAvB,EAA4B,UAAQ,MAApC,EAAyC,YAAU,GAAnD,CAAX;AAFkE,0BAIlE,IAAIC,GAAJ;AACA,MAAIF,YAAJ;AACEE,OAAA,GAAMF,YAAAG,cAAA,CAA2B,KAA3B,CAAN;AADF;AAGED,OAAA,GAAMxH,IAAA+G,OAAAK,SAAAK,cAAA,CAAmC,KAAnC,CAAN;AAHF;AAUA,SAAOxG,GAAAgB,QAAA,CAAYjC,IAAAG,OAAAuH,qBAAZ,EAA8C,QAAQ,CAACC,CAAD,EAAIC,MAAJ,CAAY;AAEvE,QAAIC,QAAQN,IAAA,CAAKI,CAAL,CAAZ;AACA,QAAIE,KAAJ;AACE,aAAOA,KAAP;AADF;AAIA,QAAID,MAAAE,OAAA,CAAc,CAAd,CAAJ,IAAwB,GAAxB,CAA6B;AAE3B,UAAIC,IAAIC,MAAA,CAAO,GAAP,GAAaJ,MAAAK,OAAA,CAAc,CAAd,CAAb,CAAR;AACA,UAAI,CAACxC,KAAA,CAAMsC,CAAN,CAAL;AACEF,aAAA,GAAQ1B,MAAA+B,aAAA,CAAoBH,CAApB,CAAR;AADF;AAH2B;AAQ7B,QAAI,CAACF,KAAL,CAAY;AAGV7H,UAAAmI,IAAAC,KAAAC,aAAA,CACIb,GADJ,EAEIxH,IAAAsI,KAAAC,qBAAAC,6CAAA,CAEQxI,IAAAG,OAAAsI,MAAAC,KAAA,CAAuB,qBAAvB,CAFR,EAEuDf,CAFvD,GAE2D,GAF3D,CAFJ,CAAA;AAMAE,WAAA,GAAQL,GAAAmB,WAAAC,UAAAnH,MAAA,CAA+B,CAA/B,EAAkC,EAAlC,CAAR;AATU;AAYZ,WAAO8F,IAAA,CAAKI,CAAL,CAAP,GAAiBE,KAAjB;AA3BuE,GAAlE,CAAP;AAfkE,CAApE;AAqDA;;;;;AAAA7H,IAAAG,OAAA8G,yBAAA,GAAuC4B,QAAQ,CAAC5H,GAAD,CAAM;AACnD,SAAOA,GAAAgB,QAAA,CAAY,YAAZ,EAA0B,QAAQ,CAAC0F,CAAD,EAAIC,MAAJ,CAAY;AACnD,WAAQA,MAAR;AACE,WAAK,KAAL;AACE,eAAO,MAAP;AACF,WAAK,IAAL;AACE,eAAO,MAAP;AACF,WAAK,IAAL;AACE,eAAO,MAAP;AACF,WAAK,MAAL;AACE,eAAO,GAAP;AACF;AACE,YAAIA,MAAAE,OAAA,CAAc,CAAd,CAAJ,IAAwB,GAAxB,CAA6B;AAE3B,cAAIC,IAAIC,MAAA,CAAO,GAAP,GAAaJ,MAAAK,OAAA,CAAc,CAAd,CAAb,CAAR;AACA,cAAI,CAACxC,KAAA,CAAMsC,CAAN,CAAL;AACE,mBAAO5B,MAAA+B,aAAA,CAAoBH,CAApB,CAAP;AADF;AAH2B;AAQ7B,eAAOJ,CAAP;AAlBJ;AADmD,GAA9C,CAAP;AADmD,CAArD;AAgCA,gCAAA3H,IAAAG,OAAAuH,qBAAA,GAAmC,iBAAnC;AAUA;;;;;AAAA1H,IAAAG,OAAA2I,iBAAA,GAA+BC,QAAQ,CAAC9H,GAAD,EAAM+H,OAAN,CAAe;AAEpD,SAAOhJ,IAAAG,OAAAoG,YAAA,CAAwBtF,GAAAgB,QAAA,CAAY,KAAZ,EAAmB,YAAnB,CAAxB,EAAuD+G,OAAvD,CAAP;AAFoD,CAAtD;AAYA;;;;AAAAhJ,IAAAG,OAAA8I,eAAA,GAA6BC,QAAQ,CAACjI,GAAD,CAAM;AACzC,SAAOA,GAAAgB,QAAA,CAAY,aAAZ,EAA2B,IAA3B,GAAkCjC,IAAAG,OAAAI,QAAAC,KAAlC,CAAP;AADyC,CAA3C;AAoBA;;;;;AAAAR,IAAAG,OAAAgJ,YAAA,GAA0BC,QAAQ,CAACnI,GAAD,EAAMoI,UAAN,CAAkB;AAClD,MAAIzH,SAASyH,UAAAzH,OAAb;AACA,OAAK,IAAIwD,IAAI,CAAb,EAAgBA,CAAhB,GAAoBxD,MAApB,EAA4BwD,CAAA,EAA5B,CAAiC;AAC/B,QAAIkE,YAAY1H,MAAA,IAAU,CAAV,GAAcyH,UAAd,GAA2BA,UAAAvB,OAAA,CAAkB1C,CAAlB,CAA3C;AACA,QAAInE,GAAA6G,OAAA,CAAW,CAAX,CAAJ,IAAqBwB,SAArB,IAAkCrI,GAAA6G,OAAA,CAAW7G,GAAAW,OAAX,GAAwB,CAAxB,CAAlC,IAAgE0H,SAAhE;AACE,aAAOrI,GAAAsI,UAAA,CAAc,CAAd,EAAiBtI,GAAAW,OAAjB,GAA8B,CAA9B,CAAP;AADF;AAF+B;AAMjC,SAAOX,GAAP;AARkD,CAApD;AAsBA;;;;;;AAAAjB,IAAAG,OAAAqJ,SAAA,GAAuBC,QAAQ,CAACxI,GAAD,EAAMyI,KAAN,EAAaC,4BAAb,CAA2C;AACxE,MAAIA,4BAAJ;AACE1I,OAAA,GAAMjB,IAAAG,OAAAyG,iBAAA,CAA6B3F,GAA7B,CAAN;AADF;AAIA,MAAIA,GAAAW,OAAJ,GAAiB8H,KAAjB;AACEzI,OAAA,GAAMA,GAAAsI,UAAA,CAAc,CAAd,EAAiBG,KAAjB,GAAyB,CAAzB,CAAN,GAAoC,KAApC;AADF;AAIA,MAAIC,4BAAJ;AACE1I,OAAA,GAAMjB,IAAAG,OAAAqG,WAAA,CAAuBvF,GAAvB,CAAN;AADF;AAIA,SAAOA,GAAP;AAbwE,CAA1E;AA6BA;;;;;;;AAAAjB,IAAAG,OAAAyJ,eAAA,GAA6BC,QAAQ,CACjC5I,GADiC,EAC5ByI,KAD4B,EACrBC,4BADqB,EACSG,iBADT,CAC4B;AAC/D,MAAIH,4BAAJ;AACE1I,OAAA,GAAMjB,IAAAG,OAAAyG,iBAAA,CAA6B3F,GAA7B,CAAN;AADF;AAIA,MAAI6I,iBAAJ,IAAyB7I,GAAAW,OAAzB,GAAsC8H,KAAtC,CAA6C;AAC3C,QAAII,iBAAJ,GAAwBJ,KAAxB;AACEI,uBAAA,GAAoBJ,KAApB;AADF;AAGA,QAAIK,WAAW9I,GAAAW,OAAXmI,GAAwBD,iBAA5B;AACA,QAAIE,aAAaN,KAAbM,GAAqBF,iBAAzB;AACA7I,OAAA,GAAMA,GAAAsI,UAAA,CAAc,CAAd,EAAiBS,UAAjB,CAAN,GAAqC,KAArC,GAA6C/I,GAAAsI,UAAA,CAAcQ,QAAd,CAA7C;AAN2C,GAA7C;AAOO,QAAI9I,GAAAW,OAAJ,GAAiB8H,KAAjB,CAAwB;AAE7B,UAAIO,OAAO/E,IAAAgF,MAAA,CAAWR,KAAX,GAAmB,CAAnB,CAAX;AACA,UAAIS,SAASlJ,GAAAW,OAATuI,GAAsBF,IAA1B;AACAA,UAAA,IAAQP,KAAR,GAAgB,CAAhB;AACAzI,SAAA,GAAMA,GAAAsI,UAAA,CAAc,CAAd,EAAiBU,IAAjB,CAAN,GAA+B,KAA/B,GAAuChJ,GAAAsI,UAAA,CAAcY,MAAd,CAAvC;AAL6B;AAP/B;AAeA,MAAIR,4BAAJ;AACE1I,OAAA,GAAMjB,IAAAG,OAAAqG,WAAA,CAAuBvF,GAAvB,CAAN;AADF;AAIA,SAAOA,GAAP;AAxB+D,CADjE;AAiCA,+CAAAjB,IAAAG,OAAAiK,oBAAA,GAAkC,CAChC,OAAM,KAD0B,EAEhC,KAAM,KAF0B,EAGhC,KAAM,KAH0B,EAIhC,KAAM,KAJ0B,EAKhC,KAAM,KAL0B,EAMhC,KAAM,KAN0B,EAOhC,OAAQ,OAPwB,EAQhC,IAAK,KAR2B,EAShC,KAAM,MAT0B,EAehC,OAAK,SAf2B,CAAlC;AAuBA,+CAAApK,IAAAG,OAAAkK,eAAA,GAA6B,CAC3B,IAAM,KADqB,CAA7B;AAYA;;;;AAAArK,IAAAG,OAAAmK,MAAA,GAAoBC,QAAQ,CAAC5C,CAAD,CAAI;AAC9BA,GAAA,GAAIxB,MAAA,CAAOwB,CAAP,CAAJ;AACA,MAAI6C,KAAK,CAAC,GAAD,CAAT;AACA,OAAK,IAAIpF,IAAI,CAAb,EAAgBA,CAAhB,GAAoBuC,CAAA/F,OAApB,EAA8BwD,CAAA,EAA9B,CAAmC;AACjC,QAAI/B,KAAKsE,CAAAG,OAAA,CAAS1C,CAAT,CAAT;AACA,QAAIqF,KAAKpH,EAAAqH,WAAA,CAAc,CAAd,CAAT;AACAF,MAAA,CAAGpF,CAAH,GAAO,CAAP,CAAA,GAAYpF,IAAAG,OAAAiK,oBAAA,CAAgC/G,EAAhC,CAAZ,KACMoH,EAAD,GAAM,EAAN,IAAYA,EAAZ,GAAiB,GAAjB,GAAwBpH,EAAxB,GAA6BrD,IAAAG,OAAAwK,WAAA,CAAuBtH,EAAvB,CADlC;AAHiC;AAMnCmH,IAAAI,KAAA,CAAQ,GAAR,CAAA;AACA,SAAOJ,EAAA1I,KAAA,CAAQ,EAAR,CAAP;AAV8B,CAAhC;AAmBA;;;;AAAA9B,IAAAG,OAAA0K,aAAA,GAA2BC,QAAQ,CAAC7J,GAAD,CAAM;AACvC,MAAIuJ,KAAK,EAAT;AACA,OAAK,IAAIpF,IAAI,CAAb,EAAgBA,CAAhB,GAAoBnE,GAAAW,OAApB,EAAgCwD,CAAA,EAAhC;AACEoF,MAAA,CAAGpF,CAAH,CAAA,GAAQpF,IAAAG,OAAAwK,WAAA,CAAuB1J,GAAA6G,OAAA,CAAW1C,CAAX,CAAvB,CAAR;AADF;AAGA,SAAOoF,EAAA1I,KAAA,CAAQ,EAAR,CAAP;AALuC,CAAzC;AAeA;;;;AAAA9B,IAAAG,OAAAwK,WAAA,GAAyBI,QAAQ,CAACC,CAAD,CAAI;AACnC,MAAIA,CAAJ,IAAShL,IAAAG,OAAAkK,eAAT;AACE,WAAOrK,IAAAG,OAAAkK,eAAA,CAA2BW,CAA3B,CAAP;AADF;AAIA,MAAIA,CAAJ,IAAShL,IAAAG,OAAAiK,oBAAT;AACE,WAAOpK,IAAAG,OAAAkK,eAAA,CAA2BW,CAA3B,CAAP,GAAuChL,IAAAG,OAAAiK,oBAAA,CAAgCY,CAAhC,CAAvC;AADF;AAIA,MAAIC,KAAKD,CAAT;AACA,MAAIP,KAAKO,CAAAN,WAAA,CAAa,CAAb,CAAT;AACA,MAAID,EAAJ,GAAS,EAAT,IAAeA,EAAf,GAAoB,GAApB;AACEQ,MAAA,GAAKD,CAAL;AADF,QAEO;AAEL,QAAIP,EAAJ,GAAS,GAAT,CAAc;AACZQ,QAAA,GAAK,KAAL;AACA,UAAIR,EAAJ,GAAS,EAAT,IAAeA,EAAf,GAAoB,GAApB;AACEQ,UAAA,IAAM,GAAN;AADF;AAFY,KAAd,KAKO;AACLA,QAAA,GAAK,KAAL;AACA,UAAIR,EAAJ,GAAS,IAAT;AACEQ,UAAA,IAAM,GAAN;AADF;AAFK;AAMPA,MAAA,IAAMR,EAAAS,SAAA,CAAY,EAAZ,CAAAC,YAAA,EAAN;AAbK;AAgBP,SAAOnL,IAAAG,OAAAkK,eAAA,CAA2BW,CAA3B,CAAP,GAAuCC,EAAvC;AA7BmC,CAArC;AAuCA;;;;;AAAAjL,IAAAG,OAAA2G,SAAA,GAAuB9G,IAAAG,OAAAO,SAAAoG,SAAvB;AASA;;;;;AAAA9G,IAAAG,OAAAiL,wBAAA,GACIpL,IAAAG,OAAAO,SAAA0K,wBADJ;AAWA;;;;;AAAApL,IAAAG,OAAAkL,QAAA,GAAsBC,QAAQ,CAAC3D,CAAD,EAAI4D,EAAJ,CAAQ;AACpC,SAAO5D,CAAA,IAAK4D,EAAL,GAAU5D,CAAAvG,MAAA,CAAQmK,EAAR,CAAA3J,OAAV,GAA+B,CAA/B,GAAmC,CAA1C;AADoC,CAAtC;AAcA;;;;;;AAAA5B,IAAAG,OAAAqL,SAAA,GAAuBC,QAAQ,CAAC9D,CAAD,EAAI+D,KAAJ,EAAWC,YAAX,CAAyB;AACtD,MAAIC,YAAYjE,CAAhB;AAEA,MAAI+D,KAAJ,IAAa,CAAb,IAAkBA,KAAlB,GAA0B/D,CAAA/F,OAA1B,IAAsC+J,YAAtC,GAAqD,CAArD;AACEC,aAAA,GAAYjE,CAAAM,OAAA,CAAS,CAAT,EAAYyD,KAAZ,CAAZ,GACI/D,CAAAM,OAAA,CAASyD,KAAT,GAAiBC,YAAjB,EAA+BhE,CAAA/F,OAA/B,GAA0C8J,KAA1C,GAAkDC,YAAlD,CADJ;AADF;AAIA,SAAOC,SAAP;AAPsD,CAAxD;AAkBA;;;;;AAAA5L,IAAAG,OAAA0L,OAAA,GAAqBC,QAAQ,CAAC7K,GAAD,EAAMgH,MAAN,CAAc;AACzC,SAAOhH,GAAAgB,QAAA,CAAYgG,MAAZ,EAAoB,EAApB,CAAP;AADyC,CAA3C;AAYA;;;;;AAAAjI,IAAAG,OAAA4L,UAAA,GAAwBC,QAAQ,CAACrE,CAAD,EAAI4D,EAAJ,CAAQ;AACtC,MAAIU,KAAK,IAAIC,MAAJ,CAAWlM,IAAAG,OAAAgM,aAAA,CAAyBZ,EAAzB,CAAX,EAAyC,GAAzC,CAAT;AACA,SAAO5D,CAAA1F,QAAA,CAAUgK,EAAV,EAAc,EAAd,CAAP;AAFsC,CAAxC;AAcA;;;;;;AAAAjM,IAAAG,OAAAiM,WAAA,GAAyBC,QAAQ,CAAC1E,CAAD,EAAI4D,EAAJ,EAAQe,WAAR,CAAqB;AACpD,MAAIL,KAAK,IAAIC,MAAJ,CAAWlM,IAAAG,OAAAgM,aAAA,CAAyBZ,EAAzB,CAAX,EAAyC,GAAzC,CAAT;AACA,SAAO5D,CAAA1F,QAAA,CAAUgK,EAAV,EAAcK,WAAArK,QAAA,CAAoB,KAApB,EAA2B,MAA3B,CAAd,CAAP;AAFoD,CAAtD;AAYA;;;;AAAAjC,IAAAG,OAAAgM,aAAA,GAA2BI,QAAQ,CAAC5E,CAAD,CAAI;AACrC,SAAOxB,MAAA,CAAOwB,CAAP,CAAA1F,QAAA,CACM,+BADN,EACuC,MADvC,CAAAA,QAAA,CAEM,OAFN,EAEe,OAFf,CAAP;AADqC,CAAvC;AAcA;;;;;AAAAjC,IAAAG,OAAAqM,OAAA,GAAsBrG,MAAA3E,UAAAgL,OAAD,GAA4B,QAAQ,CAACrM,MAAD,EAASyB,MAAT,CAAiB;AAExE,SAAOzB,MAAAqM,OAAA,CAAc5K,MAAd,CAAP;AAFwE,CAArD,GAGjB,QAAQ,CAACzB,MAAD,EAASyB,MAAT,CAAiB;AAC3B,SAAOE,CAAA,IAAIP,KAAJ,CAAUK,MAAV,GAAmB,CAAnB,CAAAE,MAAA,CAA2B3B,MAA3B,CAAP;AAD2B,CAH7B;AAqBA;;;;;;AAAAH,IAAAG,OAAAsM,UAAA,GAAwBC,QAAQ,CAACC,GAAD,EAAM/K,MAAN,EAAcgL,aAAd,CAA6B;AAC3D,MAAIjF,IACCiF,aAAD,KAAmBC,SAAnB,GAAgCF,GAAAG,QAAA,CAAYF,aAAZ,CAAhC,GAA6DzG,MAAA,CAAOwG,GAAP,CADjE;AAEA,MAAIjB,QAAQ/D,CAAAoF,QAAA,CAAU,GAAV,CAAZ;AACA,MAAIrB,KAAJ,IAAa,EAAb;AACEA,SAAA,GAAQ/D,CAAA/F,OAAR;AADF;AAGA,SAAO5B,IAAAG,OAAAqM,OAAA,CAAmB,GAAnB,EAAwBtH,IAAA8H,IAAA,CAAS,CAAT,EAAYpL,MAAZ,GAAqB8J,KAArB,CAAxB,CAAP,GAA8D/D,CAA9D;AAP2D,CAA7D;AAkBA;;;;AAAA3H,IAAAG,OAAAqC,SAAA,GAAuByK,QAAQ,CAACC,GAAD,CAAM;AACnC,SAAOA,GAAA,IAAO,IAAP,GAAc,EAAd,GAAmB/G,MAAA,CAAO+G,GAAP,CAA1B;AADmC,CAArC;AAmBA;;;;AAAAlN,IAAAG,OAAAgN,YAAA,GAA0BC,QAAQ,CAAClM,QAAD,CAAW;AAC3C,SAAOK,KAAAC,UAAAM,KAAAJ,KAAA,CAA0BC,SAA1B,EAAqC,EAArC,CAAP;AAD2C,CAA7C;AAcA;;;AAAA3B,IAAAG,OAAAkN,gBAAA,GAA8BC,QAAQ,EAAG;AACvC,MAAIC,IAAI,UAAR;AACA,SAAOrI,IAAAgF,MAAA,CAAWhF,IAAAsI,OAAA,EAAX,GAA2BD,CAA3B,CAAArC,SAAA,CAAuC,EAAvC,CAAP,GACIhG,IAAAuI,IAAA,CAASvI,IAAAgF,MAAA,CAAWhF,IAAAsI,OAAA,EAAX,GAA2BD,CAA3B,CAAT,GAAyCvN,IAAA0N,IAAA,EAAzC,CAAAxC,SAAA,CAA8D,EAA9D,CADJ;AAFuC,CAAzC;AAiBA;;;;;AAAAlL,IAAAG,OAAAwN,gBAAA,GAA8B3N,IAAAG,OAAAO,SAAAiN,gBAA9B;AAcA;;;;AAAA3N,IAAAG,OAAAyN,SAAA,GAAuBC,QAAQ,CAAC5M,GAAD,CAAM;AACnC,MAAI6M,SAAS,CAAb;AACA,OAAK,IAAI1I,IAAI,CAAb,EAAgBA,CAAhB,GAAoBnE,GAAAW,OAApB,EAAgC,EAAEwD,CAAlC;AAEE0I,UAAA,GAAU,EAAV,GAAeA,MAAf,GAAwB7M,GAAAyJ,WAAA,CAAetF,CAAf,CAAxB,KAA+C,CAA/C;AAFF;AAIA,SAAO0I,MAAP;AANmC,CAArC;AAeA,+BAAA9N,IAAAG,OAAA4N,qBAAA,GAAmC7I,IAAAsI,OAAA,EAAnC,GAAmD,UAAnD,GAAgE,CAAhE;AAQA;;;AAAAxN,IAAAG,OAAA6N,mBAAA,GAAiCC,QAAQ,EAAG;AAC1C,SAAO,OAAP,GAAiBjO,IAAAG,OAAA4N,qBAAA,EAAjB;AAD0C,CAA5C;AAgBA;;;;AAAA/N,IAAAG,OAAA+N,SAAA,GAAuBC,QAAQ,CAAClN,GAAD,CAAM;AACnC,MAAI0L,MAAM3E,MAAA,CAAO/G,GAAP,CAAV;AACA,MAAI0L,GAAJ,IAAW,CAAX,IAAgB3M,IAAAG,OAAA+B,oBAAA,CAAgCjB,GAAhC,CAAhB;AACE,WAAOmN,GAAP;AADF;AAGA,SAAOzB,GAAP;AALmC,CAArC;AAkBA;;;;AAAA3M,IAAAG,OAAAkO,iBAAA,GAA+BC,QAAQ,CAACrN,GAAD,CAAM;AAC3C,SAAO,wBAAA2B,KAAA,CAA8B3B,GAA9B,CAAP;AAD2C,CAA7C;AAcA;;;;AAAAjB,IAAAG,OAAAoO,iBAAA,GAA+BC,QAAQ,CAACvN,GAAD,CAAM;AAC3C,SAAO,kBAAA2B,KAAA,CAAwB3B,GAAxB,CAAP;AAD2C,CAA7C;AAYA;;;;AAAAjB,IAAAG,OAAAsO,YAAA,GAA0BC,QAAQ,CAACzN,GAAD,CAAM;AACtC,SAAOkF,MAAA,CAAOlF,GAAP,CAAAgB,QAAA,CAAoB,YAApB,EAAkC,QAAQ,CAAC0M,GAAD,EAAM5J,KAAN,CAAa;AAC5D,WAAOA,KAAAoG,YAAA,EAAP;AAD4D,GAAvD,CAAP;AADsC,CAAxC;AAcA;;;;AAAAnL,IAAAG,OAAAyO,eAAA,GAA6BC,QAAQ,CAAC5N,GAAD,CAAM;AACzC,SAAOkF,MAAA,CAAOlF,GAAP,CAAAgB,QAAA,CAAoB,UAApB,EAAgC,KAAhC,CAAA6C,YAAA,EAAP;AADyC,CAA3C;AAoCA;;;;;AAAA9E,IAAAG,OAAA2O,YAAA,GAA0BC,QAAQ,CAAC9N,GAAD,EAAM+N,cAAN,CAAsB;AACtD,MAAIC,aAAc,MAAOD,eAAR,KAA2B,QAA3B,GACbhP,IAAAG,OAAAgM,aAAA,CAAyB6C,cAAzB,CADa,GAEb,KAFJ;AAMAC,YAAA,GAAaA,UAAA,GAAa,IAAb,GAAoBA,UAApB,GAAiC,IAAjC,GAAwC,EAArD;AAEA,MAAIC,SAAS,IAAIhD,MAAJ,CAAW,IAAX,GAAkB+C,UAAlB,GAA+B,UAA/B,EAA2C,GAA3C,CAAb;AACA,SAAOhO,GAAAgB,QAAA,CAAYiN,MAAZ,EAAoB,QAAQ,CAACP,GAAD,EAAMQ,EAAN,EAAUC,EAAV,CAAc;AAC/C,WAAOD,EAAP,GAAYC,EAAAjE,YAAA,EAAZ;AAD+C,GAA1C,CAAP;AAVsD,CAAxD;AA6BA;;;;AAAAnL,IAAAG,OAAAkP,WAAA,GAAyBC,QAAQ,CAACrO,GAAD,CAAM;AACrC,SAAOkF,MAAA,CAAOlF,GAAA6G,OAAA,CAAW,CAAX,CAAP,CAAAqD,YAAA,EAAP,GACIhF,MAAA,CAAOlF,GAAAgH,OAAA,CAAW,CAAX,CAAP,CAAAnD,YAAA,EADJ;AADqC,CAAvC;AAuBA;;;;AAAA9E,IAAAG,OAAAqF,SAAA,GAAuB+J,QAAQ,CAAC1H,KAAD,CAAQ;AAErC,MAAI2H,QAAA,CAAS3H,KAAT,CAAJ;AACEA,SAAA,GAAQ1B,MAAA,CAAO0B,KAAP,CAAR;AADF;AAIA,MAAI,MAAOA,MAAX,KAAqB,QAArB;AAEE,WAAO,WAAAjF,KAAA,CAAiBiF,KAAjB,CAAA,GAA0BrC,QAAA,CAASqC,KAAT,EAAgB,EAAhB,CAA1B,GAAgDrC,QAAA,CAASqC,KAAT,EAAgB,EAAhB,CAAvD;AAFF;AAKA,SAAOuG,GAAP;AAXqC,CAAvC;AAiCA;;;;;;AAAApO,IAAAG,OAAAsP,WAAA,GAAyBC,QAAQ,CAACzO,GAAD,EAAM0O,SAAN,EAAiBC,KAAjB,CAAwB;AACvD,MAAIC,QAAQ5O,GAAAG,MAAA,CAAUuO,SAAV,CAAZ;AACA,MAAIG,YAAY,EAAhB;AAIA,SAAOF,KAAP,GAAe,CAAf,IAAoBC,KAAAjO,OAApB,CAAkC;AAChCkO,aAAAlF,KAAA,CAAeiF,KAAAhO,MAAA,EAAf,CAAA;AACA+N,SAAA,EAAA;AAFgC;AAMlC,MAAIC,KAAAjO,OAAJ;AACEkO,aAAAlF,KAAA,CAAeiF,KAAA/N,KAAA,CAAW6N,SAAX,CAAf,CAAA;AADF;AAIA,SAAOG,SAAP;AAhBuD,CAAzD;AAiCA;;;;;AAAA9P,IAAAG,OAAA4P,cAAA,GAA4BC,QAAQ,CAAC/O,GAAD,EAAMgP,UAAN,CAAkB;AACpD,MAAI,CAACA,UAAL;AACE,WAAOhP,GAAP;AADF;AAEO,QAAI,MAAOgP,WAAX,IAAyB,QAAzB;AACLA,gBAAA,GAAa,CAACA,UAAD,CAAb;AADK;AAFP;AAMA,MAAIC,qBAAqB,EAAzB;AACA,OAAK,IAAI9K,IAAI,CAAb,EAAgBA,CAAhB,GAAoB6K,UAAArO,OAApB,EAAuCwD,CAAA,EAAvC,CAA4C;AAC1C,QAAI6K,UAAA,CAAW7K,CAAX,CAAJ,IAAqB,EAArB;AACE;AADF;AAGA,QAAI+K,wBAAwBlP,GAAAmP,YAAA,CAAgBH,UAAA,CAAW7K,CAAX,CAAhB,CAA5B;AACA,QAAI+K,qBAAJ,GAA4BD,kBAA5B;AACEA,wBAAA,GAAqBC,qBAArB;AADF;AAL0C;AAS5C,MAAID,kBAAJ,IAA0B,EAA1B;AACE,WAAOjP,GAAP;AADF;AAGA,SAAOA,GAAAQ,MAAA,CAAUyO,kBAAV,GAA+B,CAA/B,CAAP;AApBoD,CAAtD;AA8BA;;;;;AAAAlQ,IAAAG,OAAAkQ,aAAA,GAA2BC,QAAQ,CAACjL,CAAD,EAAIC,CAAJ,CAAO;AACxC,MAAIiL,KAAK,EAAT;AACA,MAAIC,KAAK,EAAT;AAEA,MAAInL,CAAJ,IAASC,CAAT;AACE,WAAO,CAAP;AADF;AAIA,MAAI,CAACD,CAAAzD,OAAL,IAAiB,CAAC0D,CAAA1D,OAAlB;AACE,WAAOsD,IAAA8H,IAAA,CAAS3H,CAAAzD,OAAT,EAAmB0D,CAAA1D,OAAnB,CAAP;AADF;AAIA,OAAK,IAAIwD,IAAI,CAAb,EAAgBA,CAAhB,GAAoBE,CAAA1D,OAApB,GAA+B,CAA/B,EAAkCwD,CAAA,EAAlC;AACEmL,MAAA,CAAGnL,CAAH,CAAA,GAAQA,CAAR;AADF;AAIA,OAAK,IAAIA,IAAI,CAAb,EAAgBA,CAAhB,GAAoBC,CAAAzD,OAApB,EAA8BwD,CAAA,EAA9B,CAAmC;AACjCoL,MAAA,CAAG,CAAH,CAAA,GAAQpL,CAAR,GAAY,CAAZ;AAEA,SAAK,IAAIqL,IAAI,CAAb,EAAgBA,CAAhB,GAAoBnL,CAAA1D,OAApB,EAA8B6O,CAAA,EAA9B,CAAmC;AACjC,UAAIC,OAAO1I,MAAA,CAAO3C,CAAA,CAAED,CAAF,CAAP,IAAeE,CAAA,CAAEmL,CAAF,CAAf,CAAX;AAGAD,QAAA,CAAGC,CAAH,GAAO,CAAP,CAAA,GAAYvL,IAAAC,IAAA,CAASqL,EAAA,CAAGC,CAAH,CAAT,GAAiB,CAAjB,EAAoBF,EAAA,CAAGE,CAAH,GAAO,CAAP,CAApB,GAAgC,CAAhC,EAAmCF,EAAA,CAAGE,CAAH,CAAnC,GAA2CC,IAA3C,CAAZ;AAJiC;AAOnC,SAAK,IAAID,IAAI,CAAb,EAAgBA,CAAhB,GAAoBF,EAAA3O,OAApB,EAA+B6O,CAAA,EAA/B;AACEF,QAAA,CAAGE,CAAH,CAAA,GAAQD,EAAA,CAAGC,CAAH,CAAR;AADF;AAViC;AAenC,SAAOD,EAAA,CAAGlL,CAAA1D,OAAH,CAAP;AA/BwC,CAA1C;;",
"sources":["goog/string/string.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for string manipulation.\n * @author arv@google.com (Erik Arvidsson)\n */\n\n\n/**\n * Namespace for string utilities\n */\ngoog.provide('goog.string');\ngoog.provide('goog.string.Unicode');\n\ngoog.require('goog.dom.safe');\ngoog.require('goog.html.uncheckedconversions');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.internal');\n\n\n/**\n * @define {boolean} Enables HTML escaping of lowercase letter \"e\" which helps\n * with detection of double-escaping as this letter is frequently used.\n */\ngoog.string.DETECT_DOUBLE_ESCAPING =\n    goog.define('goog.string.DETECT_DOUBLE_ESCAPING', false);\n\n\n/**\n * @define {boolean} Whether to force non-dom html unescaping.\n */\ngoog.string.FORCE_NON_DOM_HTML_UNESCAPING =\n    goog.define('goog.string.FORCE_NON_DOM_HTML_UNESCAPING', false);\n\n\n/**\n * Common Unicode string characters.\n * @enum {string}\n */\ngoog.string.Unicode = {\n  NBSP: '\\xa0'\n};\n\n\n/**\n * Fast prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix A string to look for at the start of `str`.\n * @return {boolean} True if `str` begins with `prefix`.\n */\ngoog.string.startsWith = goog.string.internal.startsWith;\n\n\n/**\n * Fast suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix`.\n */\ngoog.string.endsWith = goog.string.internal.endsWith;\n\n\n/**\n * Case-insensitive prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix  A string to look for at the end of `str`.\n * @return {boolean} True if `str` begins with `prefix` (ignoring\n *     case).\n */\ngoog.string.caseInsensitiveStartsWith =\n    goog.string.internal.caseInsensitiveStartsWith;\n\n\n/**\n * Case-insensitive suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix` (ignoring\n *     case).\n */\ngoog.string.caseInsensitiveEndsWith =\n    goog.string.internal.caseInsensitiveEndsWith;\n\n\n/**\n * Case-insensitive equality checker.\n * @param {string} str1 First string to check.\n * @param {string} str2 Second string to check.\n * @return {boolean} True if `str1` and `str2` are the same string,\n *     ignoring case.\n */\ngoog.string.caseInsensitiveEquals = goog.string.internal.caseInsensitiveEquals;\n\n\n/**\n * Does simple python-style string substitution.\n * subs(\"foo%s hot%s\", \"bar\", \"dog\") becomes \"foobar hotdog\".\n * @param {string} str The string containing the pattern.\n * @param {...*} var_args The items to substitute into the pattern.\n * @return {string} A copy of `str` in which each occurrence of\n *     {@code %s} has been replaced an argument from `var_args`.\n */\ngoog.string.subs = function(str, var_args) {\n  var splitParts = str.split('%s');\n  var returnString = '';\n\n  var subsArguments = Array.prototype.slice.call(arguments, 1);\n  while (subsArguments.length &&\n         // Replace up to the last split part. We are inserting in the\n         // positions between split parts.\n         splitParts.length > 1) {\n    returnString += splitParts.shift() + subsArguments.shift();\n  }\n\n  return returnString + splitParts.join('%s');  // Join unused '%s'\n};\n\n\n/**\n * Converts multiple whitespace chars (spaces, non-breaking-spaces, new lines\n * and tabs) to a single space, and strips leading and trailing whitespace.\n * @param {string} str Input string.\n * @return {string} A copy of `str` with collapsed whitespace.\n */\ngoog.string.collapseWhitespace = function(str) {\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/[\\s\\xa0]+/g, ' ').replace(/^\\s+|\\s+$/g, '');\n};\n\n\n/**\n * Checks if a string is empty or contains only whitespaces.\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty or whitespace only.\n */\ngoog.string.isEmptyOrWhitespace = goog.string.internal.isEmptyOrWhitespace;\n\n\n/**\n * Checks if a string is empty.\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty.\n */\ngoog.string.isEmptyString = function(str) {\n  return str.length == 0;\n};\n\n\n/**\n * Checks if a string is empty or contains only whitespaces.\n *\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty or whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace instead.\n */\ngoog.string.isEmpty = goog.string.isEmptyOrWhitespace;\n\n\n/**\n * Checks if a string is null, undefined, empty or contains only whitespaces.\n * @param {*} str The string to check.\n * @return {boolean} Whether `str` is null, undefined, empty, or\n *     whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str))\n *     instead.\n */\ngoog.string.isEmptyOrWhitespaceSafe = function(str) {\n  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));\n};\n\n\n/**\n * Checks if a string is null, undefined, empty or contains only whitespaces.\n *\n * @param {*} str The string to check.\n * @return {boolean} Whether `str` is null, undefined, empty, or\n *     whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace instead.\n */\ngoog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;\n\n\n/**\n * Checks if a string is all breaking whitespace.\n * @param {string} str The string to check.\n * @return {boolean} Whether the string is all breaking whitespace.\n */\ngoog.string.isBreakingWhitespace = function(str) {\n  return !/[^\\t\\n\\r ]/.test(str);\n};\n\n\n/**\n * Checks if a string contains all letters.\n * @param {string} str string to check.\n * @return {boolean} True if `str` consists entirely of letters.\n */\ngoog.string.isAlpha = function(str) {\n  return !/[^a-zA-Z]/.test(str);\n};\n\n\n/**\n * Checks if a string contains only numbers.\n * @param {*} str string to check. If not a string, it will be\n *     casted to one.\n * @return {boolean} True if `str` is numeric.\n */\ngoog.string.isNumeric = function(str) {\n  return !/[^0-9]/.test(str);\n};\n\n\n/**\n * Checks if a string contains only numbers or letters.\n * @param {string} str string to check.\n * @return {boolean} True if `str` is alphanumeric.\n */\ngoog.string.isAlphaNumeric = function(str) {\n  return !/[^a-zA-Z0-9]/.test(str);\n};\n\n\n/**\n * Checks if a character is a space character.\n * @param {string} ch Character to check.\n * @return {boolean} True if `ch` is a space.\n */\ngoog.string.isSpace = function(ch) {\n  return ch == ' ';\n};\n\n\n/**\n * Checks if a character is a valid unicode character.\n * @param {string} ch Character to check.\n * @return {boolean} True if `ch` is a valid unicode character.\n */\ngoog.string.isUnicodeChar = function(ch) {\n  return ch.length == 1 && ch >= ' ' && ch <= '~' ||\n      ch >= '\\u0080' && ch <= '\\uFFFD';\n};\n\n\n/**\n * Takes a string and replaces newlines with a space. Multiple lines are\n * replaced with a single space.\n * @param {string} str The string from which to strip newlines.\n * @return {string} A copy of `str` stripped of newlines.\n */\ngoog.string.stripNewlines = function(str) {\n  return str.replace(/(\\r\\n|\\r|\\n)+/g, ' ');\n};\n\n\n/**\n * Replaces Windows and Mac new lines with unix style: \\r or \\r\\n with \\n.\n * @param {string} str The string to in which to canonicalize newlines.\n * @return {string} `str` A copy of {@code} with canonicalized newlines.\n */\ngoog.string.canonicalizeNewlines = function(str) {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, '\\n');\n};\n\n\n/**\n * Normalizes whitespace in a string, replacing all whitespace chars with\n * a space.\n * @param {string} str The string in which to normalize whitespace.\n * @return {string} A copy of `str` with all whitespace normalized.\n */\ngoog.string.normalizeWhitespace = function(str) {\n  return str.replace(/\\xa0|\\s/g, ' ');\n};\n\n\n/**\n * Normalizes spaces in a string, replacing all consecutive spaces and tabs\n * with a single space. Replaces non-breaking space with a space.\n * @param {string} str The string in which to normalize spaces.\n * @return {string} A copy of `str` with all consecutive spaces and tabs\n *    replaced with a single space.\n */\ngoog.string.normalizeSpaces = function(str) {\n  return str.replace(/\\xa0|[ \\t]+/g, ' ');\n};\n\n\n/**\n * Removes the breaking spaces from the left and right of the string and\n * collapses the sequences of breaking spaces in the middle into single spaces.\n * The original and the result strings render the same way in HTML.\n * @param {string} str A string in which to collapse spaces.\n * @return {string} Copy of the string with normalized breaking spaces.\n */\ngoog.string.collapseBreakingSpaces = function(str) {\n  return str.replace(/[\\t\\r\\n ]+/g, ' ')\n      .replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g, '');\n};\n\n\n/**\n * Trims white spaces to the left and right of a string.\n * @param {string} str The string to trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.trim = goog.string.internal.trim;\n\n\n/**\n * Trims whitespaces at the left end of a string.\n * @param {string} str The string to left trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.trimLeft = function(str) {\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/^[\\s\\xa0]+/, '');\n};\n\n\n/**\n * Trims whitespaces at the right end of a string.\n * @param {string} str The string to right trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.trimRight = function(str) {\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/[\\s\\xa0]+$/, '');\n};\n\n\n/**\n * A string comparator that ignores case.\n * -1 = str1 less than str2\n *  0 = str1 equals str2\n *  1 = str1 greater than str2\n *\n * @param {string} str1 The string to compare.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} The comparator result, as described above.\n */\ngoog.string.caseInsensitiveCompare =\n    goog.string.internal.caseInsensitiveCompare;\n\n\n/**\n * Compares two strings interpreting their numeric substrings as numbers.\n *\n * @param {string} str1 First string.\n * @param {string} str2 Second string.\n * @param {!RegExp} tokenizerRegExp Splits a string into substrings of\n *     non-negative integers, non-numeric characters and optionally fractional\n *     numbers starting with a decimal point.\n * @return {number} Negative if str1 < str2, 0 is str1 == str2, positive if\n *     str1 > str2.\n * @private\n */\ngoog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {\n  if (str1 == str2) {\n    return 0;\n  }\n  if (!str1) {\n    return -1;\n  }\n  if (!str2) {\n    return 1;\n  }\n\n  // Using match to split the entire string ahead of time turns out to be faster\n  // for most inputs than using RegExp.exec or iterating over each character.\n  var tokens1 = str1.toLowerCase().match(tokenizerRegExp);\n  var tokens2 = str2.toLowerCase().match(tokenizerRegExp);\n\n  var count = Math.min(tokens1.length, tokens2.length);\n\n  for (var i = 0; i < count; i++) {\n    var a = tokens1[i];\n    var b = tokens2[i];\n\n    // Compare pairs of tokens, returning if one token sorts before the other.\n    if (a != b) {\n      // Only if both tokens are integers is a special comparison required.\n      // Decimal numbers are sorted as strings (e.g., '.09' < '.1').\n      var num1 = parseInt(a, 10);\n      if (!isNaN(num1)) {\n        var num2 = parseInt(b, 10);\n        if (!isNaN(num2) && num1 - num2) {\n          return num1 - num2;\n        }\n      }\n      return a < b ? -1 : 1;\n    }\n  }\n\n  // If one string is a substring of the other, the shorter string sorts first.\n  if (tokens1.length != tokens2.length) {\n    return tokens1.length - tokens2.length;\n  }\n\n  // The two strings must be equivalent except for case (perfect equality is\n  // tested at the head of the function.) Revert to default ASCII string\n  // comparison to stabilize the sort.\n  return str1 < str2 ? -1 : 1;\n};\n\n\n/**\n * String comparison function that handles non-negative integer numbers in a\n * way humans might expect. Using this function, the string 'File 2.jpg' sorts\n * before 'File 10.jpg', and 'Version 1.9' before 'Version 1.10'. The comparison\n * is mostly case-insensitive, though strings that are identical except for case\n * are sorted with the upper-case strings before lower-case.\n *\n * This comparison function is up to 50x slower than either the default or the\n * case-insensitive compare. It should not be used in time-critical code, but\n * should be fast enough to sort several hundred short strings (like filenames)\n * with a reasonable delay.\n *\n * @param {string} str1 The string to compare in a numerically sensitive way.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than\n *     0 if str1 > str2.\n */\ngoog.string.intAwareCompare = function(str1, str2) {\n  return goog.string.numberAwareCompare_(str1, str2, /\\d+|\\D+/g);\n};\n\n\n/**\n * String comparison function that handles non-negative integer and fractional\n * numbers in a way humans might expect. Using this function, the string\n * 'File 2.jpg' sorts before 'File 10.jpg', and '3.14' before '3.2'. Equivalent\n * to {@link goog.string.intAwareCompare} apart from the way how it interprets\n * dots.\n *\n * @param {string} str1 The string to compare in a numerically sensitive way.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than\n *     0 if str1 > str2.\n */\ngoog.string.floatAwareCompare = function(str1, str2) {\n  return goog.string.numberAwareCompare_(str1, str2, /\\d+|\\.\\d+|\\D+/g);\n};\n\n\n/**\n * Alias for {@link goog.string.floatAwareCompare}.\n *\n * @param {string} str1\n * @param {string} str2\n * @return {number}\n */\ngoog.string.numerateCompare = goog.string.floatAwareCompare;\n\n\n/**\n * URL-encodes a string\n * @param {*} str The string to url-encode.\n * @return {string} An encoded copy of `str` that is safe for urls.\n *     Note that '#', ':', and other characters used to delimit portions\n *     of URLs *will* be encoded.\n */\ngoog.string.urlEncode = function(str) {\n  return encodeURIComponent(String(str));\n};\n\n\n/**\n * URL-decodes the string. We need to specially handle '+'s because\n * the javascript library doesn't convert them to spaces.\n * @param {string} str The string to url decode.\n * @return {string} The decoded `str`.\n */\ngoog.string.urlDecode = function(str) {\n  return decodeURIComponent(str.replace(/\\+/g, ' '));\n};\n\n\n/**\n * Converts \\n to <br>s or <br />s.\n * @param {string} str The string in which to convert newlines.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} A copy of `str` with converted newlines.\n */\ngoog.string.newLineToBr = goog.string.internal.newLineToBr;\n\n\n/**\n * Escapes double quote '\"' and single quote '\\'' characters in addition to\n * '&', '<', and '>' so that a string can be included in an HTML tag attribute\n * value within double or single quotes.\n *\n * It should be noted that > doesn't need to be escaped for the HTML or XML to\n * be valid, but it has been decided to escape it for consistency with other\n * implementations.\n *\n * With goog.string.DETECT_DOUBLE_ESCAPING, this function escapes also the\n * lowercase letter \"e\".\n *\n * NOTE(user):\n * HtmlEscape is often called during the generation of large blocks of HTML.\n * Using statics for the regular expressions and strings is an optimization\n * that can more than half the amount of time IE spends in this function for\n * large apps, since strings and regexes both contribute to GC allocations.\n *\n * Testing for the presence of a character before escaping increases the number\n * of function calls, but actually provides a speed increase for the average\n * case -- since the average case often doesn't require the escaping of all 4\n * characters and indexOf() is much cheaper than replace().\n * The worst case does suffer slightly from the additional calls, therefore the\n * opt_isLikelyToContainHtmlChars option has been included for situations\n * where all 4 HTML entities are very likely to be present and need escaping.\n *\n * Some benchmarks (times tended to fluctuate +-0.05ms):\n *                                     FireFox                     IE6\n * (no chars / average (mix of cases) / all 4 chars)\n * no checks                     0.13 / 0.22 / 0.22         0.23 / 0.53 / 0.80\n * indexOf                       0.08 / 0.17 / 0.26         0.22 / 0.54 / 0.84\n * indexOf + re test             0.07 / 0.17 / 0.28         0.19 / 0.50 / 0.85\n *\n * An additional advantage of checking if replace actually needs to be called\n * is a reduction in the number of object allocations, so as the size of the\n * application grows the difference between the various methods would increase.\n *\n * @param {string} str string to be escaped.\n * @param {boolean=} opt_isLikelyToContainHtmlChars Don't perform a check to see\n *     if the character needs replacing - use this option if you expect each of\n *     the characters to appear often. Leave false if you expect few html\n *     characters to occur in your strings, such as if you are escaping HTML.\n * @return {string} An escaped copy of `str`.\n */\ngoog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {\n  str = goog.string.internal.htmlEscape(str, opt_isLikelyToContainHtmlChars);\n  if (goog.string.DETECT_DOUBLE_ESCAPING) {\n    str = str.replace(goog.string.E_RE_, '&#101;');\n  }\n  return str;\n};\n\n\n/**\n * Regular expression that matches a lowercase letter \"e\", for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.E_RE_ = /e/g;\n\n\n/**\n * Unescapes an HTML string.\n *\n * @param {string} str The string to unescape.\n * @return {string} An unescaped copy of `str`.\n */\ngoog.string.unescapeEntities = function(str) {\n  if (goog.string.contains(str, '&')) {\n    // We are careful not to use a DOM if we do not have one or we explicitly\n    // requested non-DOM html unescaping.\n    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING &&\n        'document' in goog.global) {\n      return goog.string.unescapeEntitiesUsingDom_(str);\n    } else {\n      // Fall back on pure XML entities\n      return goog.string.unescapePureXmlEntities_(str);\n    }\n  }\n  return str;\n};\n\n\n/**\n * Unescapes a HTML string using the provided document.\n *\n * @param {string} str The string to unescape.\n * @param {!Document} document A document to use in escaping the string.\n * @return {string} An unescaped copy of `str`.\n */\ngoog.string.unescapeEntitiesWithDocument = function(str, document) {\n  if (goog.string.contains(str, '&')) {\n    return goog.string.unescapeEntitiesUsingDom_(str, document);\n  }\n  return str;\n};\n\n\n/**\n * Unescapes an HTML string using a DOM to resolve non-XML, non-numeric\n * entities. This function is XSS-safe and whitespace-preserving.\n * @private\n * @param {string} str The string to unescape.\n * @param {Document=} opt_document An optional document to use for creating\n *     elements. If this is not specified then the default window.document\n *     will be used.\n * @return {string} The unescaped `str` string.\n */\ngoog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {\n  /** @type {!Object<string, string>} */\n  var seen = {'&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"'};\n  /** @type {!Element} */\n  var div;\n  if (opt_document) {\n    div = opt_document.createElement('div');\n  } else {\n    div = goog.global.document.createElement('div');\n  }\n  // Match as many valid entity characters as possible. If the actual entity\n  // happens to be shorter, it will still work as innerHTML will return the\n  // trailing characters unchanged. Since the entity characters do not include\n  // open angle bracket, there is no chance of XSS from the innerHTML use.\n  // Since no whitespace is passed to innerHTML, whitespace is preserved.\n  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {\n    // Check for cached entity.\n    var value = seen[s];\n    if (value) {\n      return value;\n    }\n    // Check for numeric entity.\n    if (entity.charAt(0) == '#') {\n      // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex numbers.\n      var n = Number('0' + entity.substr(1));\n      if (!isNaN(n)) {\n        value = String.fromCharCode(n);\n      }\n    }\n    // Fall back to innerHTML otherwise.\n    if (!value) {\n      // Append a non-entity character to avoid a bug in Webkit that parses\n      // an invalid entity at the end of innerHTML text as the empty string.\n      goog.dom.safe.setInnerHtml(\n          div,\n          goog.html.uncheckedconversions\n              .safeHtmlFromStringKnownToSatisfyTypeContract(\n                  goog.string.Const.from('Single HTML entity.'), s + ' '));\n      // Then remove the trailing character from the result.\n      value = div.firstChild.nodeValue.slice(0, -1);\n    }\n    // Cache and return.\n    return seen[s] = value;\n  });\n};\n\n\n/**\n * Unescapes XML entities.\n * @private\n * @param {string} str The string to unescape.\n * @return {string} An unescaped copy of `str`.\n */\ngoog.string.unescapePureXmlEntities_ = function(str) {\n  return str.replace(/&([^;]+);/g, function(s, entity) {\n    switch (entity) {\n      case 'amp':\n        return '&';\n      case 'lt':\n        return '<';\n      case 'gt':\n        return '>';\n      case 'quot':\n        return '\"';\n      default:\n        if (entity.charAt(0) == '#') {\n          // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex.\n          var n = Number('0' + entity.substr(1));\n          if (!isNaN(n)) {\n            return String.fromCharCode(n);\n          }\n        }\n        // For invalid entities we just return the entity\n        return s;\n    }\n  });\n};\n\n\n/**\n * Regular expression that matches an HTML entity.\n * See also HTML5: Tokenization / Tokenizing character references.\n * @private\n * @type {!RegExp}\n */\ngoog.string.HTML_ENTITY_PATTERN_ = /&([^;\\s<&]+);?/g;\n\n\n/**\n * Do escaping of whitespace to preserve spatial formatting. We use character\n * entity #160 to make it safer for xml.\n * @param {string} str The string in which to escape whitespace.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} An escaped copy of `str`.\n */\ngoog.string.whitespaceEscape = function(str, opt_xml) {\n  // This doesn't use goog.string.preserveSpaces for backwards compatibility.\n  return goog.string.newLineToBr(str.replace(/  /g, ' &#160;'), opt_xml);\n};\n\n\n/**\n * Preserve spaces that would be otherwise collapsed in HTML by replacing them\n * with non-breaking space Unicode characters.\n * @param {string} str The string in which to preserve whitespace.\n * @return {string} A copy of `str` with preserved whitespace.\n */\ngoog.string.preserveSpaces = function(str) {\n  return str.replace(/(^|[\\n ]) /g, '$1' + goog.string.Unicode.NBSP);\n};\n\n\n/**\n * Strip quote characters around a string.  The second argument is a string of\n * characters to treat as quotes.  This can be a single character or a string of\n * multiple character and in that case each of those are treated as possible\n * quote characters. For example:\n *\n * <pre>\n * goog.string.stripQuotes('\"abc\"', '\"`') --\u003e 'abc'\n * goog.string.stripQuotes('`abc`', '\"`') --\u003e 'abc'\n * </pre>\n *\n * @param {string} str The string to strip.\n * @param {string} quoteChars The quote characters to strip.\n * @return {string} A copy of `str` without the quotes.\n */\ngoog.string.stripQuotes = function(str, quoteChars) {\n  var length = quoteChars.length;\n  for (var i = 0; i < length; i++) {\n    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);\n    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {\n      return str.substring(1, str.length - 1);\n    }\n  }\n  return str;\n};\n\n\n/**\n * Truncates a string to a certain length and adds '...' if necessary.  The\n * length also accounts for the ellipsis, so a maximum length of 10 and a string\n * 'Hello World!' produces 'Hello W...'.\n * @param {string} str The string to truncate.\n * @param {number} chars Max number of characters.\n * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped\n *     characters from being cut off in the middle.\n * @return {string} The truncated `str` string.\n */\ngoog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.unescapeEntities(str);\n  }\n\n  if (str.length > chars) {\n    str = str.substring(0, chars - 3) + '...';\n  }\n\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.htmlEscape(str);\n  }\n\n  return str;\n};\n\n\n/**\n * Truncate a string in the middle, adding \"...\" if necessary,\n * and favoring the beginning of the string.\n * @param {string} str The string to truncate the middle of.\n * @param {number} chars Max number of characters.\n * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped\n *     characters from being cutoff in the middle.\n * @param {number=} opt_trailingChars Optional number of trailing characters to\n *     leave at the end of the string, instead of truncating as close to the\n *     middle as possible.\n * @return {string} A truncated copy of `str`.\n */\ngoog.string.truncateMiddle = function(\n    str, chars, opt_protectEscapedCharacters, opt_trailingChars) {\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.unescapeEntities(str);\n  }\n\n  if (opt_trailingChars && str.length > chars) {\n    if (opt_trailingChars > chars) {\n      opt_trailingChars = chars;\n    }\n    var endPoint = str.length - opt_trailingChars;\n    var startPoint = chars - opt_trailingChars;\n    str = str.substring(0, startPoint) + '...' + str.substring(endPoint);\n  } else if (str.length > chars) {\n    // Favor the beginning of the string:\n    var half = Math.floor(chars / 2);\n    var endPos = str.length - half;\n    half += chars % 2;\n    str = str.substring(0, half) + '...' + str.substring(endPos);\n  }\n\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.htmlEscape(str);\n  }\n\n  return str;\n};\n\n\n/**\n * Special chars that need to be escaped for goog.string.quote.\n * @private {!Object<string, string>}\n */\ngoog.string.specialEscapeChars_ = {\n  '\\0': '\\\\0',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  '\\x0B': '\\\\x0B',  // '\\v' is not supported in JScript\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n  // To support the use case of embedding quoted strings inside of script\n  // tags, we have to make sure HTML comments and opening/closing script tags do\n  // not appear in the resulting string. The specific strings that must be\n  // escaped are documented at:\n  // https://html.spec.whatwg.org/multipage/scripting.html#restrictions-for-contents-of-script-elements\n  '<': '\\\\u003C'  // NOTE: JSON.parse crashes on '\\\\x3c'.\n};\n\n\n/**\n * Character mappings used internally for goog.string.escapeChar.\n * @private {!Object<string, string>}\n */\ngoog.string.jsEscapeCache_ = {\n  '\\'': '\\\\\\''\n};\n\n\n/**\n * Encloses a string in double quotes and escapes characters so that the\n * string is a valid JS string. The resulting string is safe to embed in\n * `<script>` tags as \"<\" is escaped.\n * @param {string} s The string to quote.\n * @return {string} A copy of `s` surrounded by double quotes.\n */\ngoog.string.quote = function(s) {\n  s = String(s);\n  var sb = ['\"'];\n  for (var i = 0; i < s.length; i++) {\n    var ch = s.charAt(i);\n    var cc = ch.charCodeAt(0);\n    sb[i + 1] = goog.string.specialEscapeChars_[ch] ||\n        ((cc > 31 && cc < 127) ? ch : goog.string.escapeChar(ch));\n  }\n  sb.push('\"');\n  return sb.join('');\n};\n\n\n/**\n * Takes a string and returns the escaped string for that input string.\n * @param {string} str The string to escape.\n * @return {string} An escaped string representing `str`.\n */\ngoog.string.escapeString = function(str) {\n  var sb = [];\n  for (var i = 0; i < str.length; i++) {\n    sb[i] = goog.string.escapeChar(str.charAt(i));\n  }\n  return sb.join('');\n};\n\n\n/**\n * Takes a character and returns the escaped string for that character. For\n * example escapeChar(String.fromCharCode(15)) -> \"\\\\x0E\".\n * @param {string} c The character to escape.\n * @return {string} An escaped string representing `c`.\n */\ngoog.string.escapeChar = function(c) {\n  if (c in goog.string.jsEscapeCache_) {\n    return goog.string.jsEscapeCache_[c];\n  }\n\n  if (c in goog.string.specialEscapeChars_) {\n    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];\n  }\n\n  var rv = c;\n  var cc = c.charCodeAt(0);\n  if (cc > 31 && cc < 127) {\n    rv = c;\n  } else {\n    // tab is 9 but handled above\n    if (cc < 256) {\n      rv = '\\\\x';\n      if (cc < 16 || cc > 256) {\n        rv += '0';\n      }\n    } else {\n      rv = '\\\\u';\n      if (cc < 4096) {  // \\u1000\n        rv += '0';\n      }\n    }\n    rv += cc.toString(16).toUpperCase();\n  }\n\n  return goog.string.jsEscapeCache_[c] = rv;\n};\n\n\n/**\n * Determines whether a string contains a substring.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n */\ngoog.string.contains = goog.string.internal.contains;\n\n\n/**\n * Determines whether a string contains a substring, ignoring case.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n */\ngoog.string.caseInsensitiveContains =\n    goog.string.internal.caseInsensitiveContains;\n\n\n/**\n * Returns the non-overlapping occurrences of ss in s.\n * If either s or ss evalutes to false, then returns zero.\n * @param {string} s The string to look in.\n * @param {string} ss The string to look for.\n * @return {number} Number of occurrences of ss in s.\n */\ngoog.string.countOf = function(s, ss) {\n  return s && ss ? s.split(ss).length - 1 : 0;\n};\n\n\n/**\n * Removes a substring of a specified length at a specific\n * index in a string.\n * @param {string} s The base string from which to remove.\n * @param {number} index The index at which to remove the substring.\n * @param {number} stringLength The length of the substring to remove.\n * @return {string} A copy of `s` with the substring removed or the full\n *     string if nothing is removed or the input is invalid.\n */\ngoog.string.removeAt = function(s, index, stringLength) {\n  var resultStr = s;\n  // If the index is greater or equal to 0 then remove substring\n  if (index >= 0 && index < s.length && stringLength > 0) {\n    resultStr = s.substr(0, index) +\n        s.substr(index + stringLength, s.length - index - stringLength);\n  }\n  return resultStr;\n};\n\n\n/**\n * Removes the first occurrence of a substring from a string.\n * @param {string} str The base string from which to remove.\n * @param {string} substr The string to remove.\n * @return {string} A copy of `str` with `substr` removed or the\n *     full string if nothing is removed.\n */\ngoog.string.remove = function(str, substr) {\n  return str.replace(substr, '');\n};\n\n\n/**\n *  Removes all occurrences of a substring from a string.\n *  @param {string} s The base string from which to remove.\n *  @param {string} ss The string to remove.\n *  @return {string} A copy of `s` with `ss` removed or the full\n *      string if nothing is removed.\n */\ngoog.string.removeAll = function(s, ss) {\n  var re = new RegExp(goog.string.regExpEscape(ss), 'g');\n  return s.replace(re, '');\n};\n\n\n/**\n *  Replaces all occurrences of a substring of a string with a new substring.\n *  @param {string} s The base string from which to remove.\n *  @param {string} ss The string to replace.\n *  @param {string} replacement The replacement string.\n *  @return {string} A copy of `s` with `ss` replaced by\n *      `replacement` or the original string if nothing is replaced.\n */\ngoog.string.replaceAll = function(s, ss, replacement) {\n  var re = new RegExp(goog.string.regExpEscape(ss), 'g');\n  return s.replace(re, replacement.replace(/\\$/g, '$$$$'));\n};\n\n\n/**\n * Escapes characters in the string that are not safe to use in a RegExp.\n * @param {*} s The string to escape. If not a string, it will be casted\n *     to one.\n * @return {string} A RegExp safe, escaped copy of `s`.\n */\ngoog.string.regExpEscape = function(s) {\n  return String(s)\n      .replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1')\n      .replace(/\\x08/g, '\\\\x08');\n};\n\n\n/**\n * Repeats a string n times.\n * @param {string} string The string to repeat.\n * @param {number} length The number of times to repeat.\n * @return {string} A string containing `length` repetitions of\n *     `string`.\n */\ngoog.string.repeat = (String.prototype.repeat) ? function(string, length) {\n  // The native method is over 100 times faster than the alternative.\n  return string.repeat(length);\n} : function(string, length) {\n  return new Array(length + 1).join(string);\n};\n\n\n/**\n * Pads number to given length and optionally rounds it to a given precision.\n * For example:\n * <pre>padNumber(1.25, 2, 3) -> '01.250'\n * padNumber(1.25, 2) -> '01.25'\n * padNumber(1.25, 2, 1) -> '01.3'\n * padNumber(1.25, 0) -> '1.25'</pre>\n *\n * @param {number} num The number to pad.\n * @param {number} length The desired length.\n * @param {number=} opt_precision The desired precision.\n * @return {string} `num` as a string with the given options.\n */\ngoog.string.padNumber = function(num, length, opt_precision) {\n  var s =\n      (opt_precision !== undefined) ? num.toFixed(opt_precision) : String(num);\n  var index = s.indexOf('.');\n  if (index == -1) {\n    index = s.length;\n  }\n  return goog.string.repeat('0', Math.max(0, length - index)) + s;\n};\n\n\n/**\n * Returns a string representation of the given object, with\n * null and undefined being returned as the empty string.\n *\n * @param {*} obj The object to convert.\n * @return {string} A string representation of the `obj`.\n */\ngoog.string.makeSafe = function(obj) {\n  return obj == null ? '' : String(obj);\n};\n\n\n/**\n * Concatenates string expressions. This is useful\n * since some browsers are very inefficient when it comes to using plus to\n * concat strings. Be careful when using null and undefined here since\n * these will not be included in the result. If you need to represent these\n * be sure to cast the argument to a String first.\n * For example:\n * <pre>buildString('a', 'b', 'c', 'd') -> 'abcd'\n * buildString(null, undefined) -> ''\n * </pre>\n * @param {...*} var_args A list of strings to concatenate. If not a string,\n *     it will be casted to one.\n * @return {string} The concatenation of `var_args`.\n */\ngoog.string.buildString = function(var_args) {\n  return Array.prototype.join.call(arguments, '');\n};\n\n\n/**\n * Returns a string with at least 64-bits of randomness.\n *\n * Doesn't trust JavaScript's random function entirely. Uses a combination of\n * random and current timestamp, and then encodes the string in base-36 to\n * make it shorter.\n *\n * @return {string} A random string, e.g. sn1s7vb4gcic.\n */\ngoog.string.getRandomString = function() {\n  var x = 2147483648;\n  return Math.floor(Math.random() * x).toString(36) +\n      Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);\n};\n\n\n/**\n * Compares two version numbers.\n *\n * @param {string|number} version1 Version of first item.\n * @param {string|number} version2 Version of second item.\n *\n * @return {number}  1 if `version1` is higher.\n *                   0 if arguments are equal.\n *                  -1 if `version2` is higher.\n */\ngoog.string.compareVersions = goog.string.internal.compareVersions;\n\n\n/**\n * String hash function similar to java.lang.String.hashCode().\n * The hash code for a string is computed as\n * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n * where s[i] is the ith character of the string and n is the length of\n * the string. We mod the result to make it between 0 (inclusive) and 2^32\n * (exclusive).\n * @param {string} str A string.\n * @return {number} Hash value for `str`, between 0 (inclusive) and 2^32\n *  (exclusive). The empty string returns 0.\n */\ngoog.string.hashCode = function(str) {\n  var result = 0;\n  for (var i = 0; i < str.length; ++i) {\n    // Normalize to 4 byte range, 0 ... 2^32.\n    result = (31 * result + str.charCodeAt(i)) >>> 0;\n  }\n  return result;\n};\n\n\n/**\n * The most recent unique ID. |0 is equivalent to Math.floor in this case.\n * @type {number}\n * @private\n */\ngoog.string.uniqueStringCounter_ = Math.random() * 0x80000000 | 0;\n\n\n/**\n * Generates and returns a string which is unique in the current document.\n * This is useful, for example, to create unique IDs for DOM elements.\n * @return {string} A unique id.\n */\ngoog.string.createUniqueString = function() {\n  return 'goog_' + goog.string.uniqueStringCounter_++;\n};\n\n\n/**\n * Converts the supplied string to a number, which may be Infinity or NaN.\n * This function strips whitespace: (toNumber(' 123') === 123)\n * This function accepts scientific notation: (toNumber('1e1') === 10)\n *\n * This is better than JavaScript's built-in conversions because, sadly:\n *     (Number(' ') === 0) and (parseFloat('123a') === 123)\n *\n * @param {string} str The string to convert.\n * @return {number} The number the supplied string represents, or NaN.\n */\ngoog.string.toNumber = function(str) {\n  var num = Number(str);\n  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {\n    return NaN;\n  }\n  return num;\n};\n\n\n/**\n * Returns whether the given string is lower camel case (e.g. \"isFooBar\").\n *\n * Note that this assumes the string is entirely letters.\n * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms\n *\n * @param {string} str String to test.\n * @return {boolean} Whether the string is lower camel case.\n */\ngoog.string.isLowerCamelCase = function(str) {\n  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);\n};\n\n\n/**\n * Returns whether the given string is upper camel case (e.g. \"FooBarBaz\").\n *\n * Note that this assumes the string is entirely letters.\n * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms\n *\n * @param {string} str String to test.\n * @return {boolean} Whether the string is upper camel case.\n */\ngoog.string.isUpperCamelCase = function(str) {\n  return /^([A-Z][a-z]*)+$/.test(str);\n};\n\n\n/**\n * Converts a string from selector-case to camelCase (e.g. from\n * \"multi-part-string\" to \"multiPartString\"), useful for converting\n * CSS selectors and HTML dataset keys to their equivalent JS properties.\n * @param {string} str The string in selector-case form.\n * @return {string} The string in camelCase form.\n */\ngoog.string.toCamelCase = function(str) {\n  return String(str).replace(/\\-([a-z])/g, function(all, match) {\n    return match.toUpperCase();\n  });\n};\n\n\n/**\n * Converts a string from camelCase to selector-case (e.g. from\n * \"multiPartString\" to \"multi-part-string\"), useful for converting JS\n * style and dataset properties to equivalent CSS selectors and HTML keys.\n * @param {string} str The string in camelCase form.\n * @return {string} The string in selector-case form.\n */\ngoog.string.toSelectorCase = function(str) {\n  return String(str).replace(/([A-Z])/g, '-$1').toLowerCase();\n};\n\n\n/**\n * Converts a string into TitleCase. First character of the string is always\n * capitalized in addition to the first letter of every subsequent word.\n * Words are delimited by one or more whitespaces by default. Custom delimiters\n * can optionally be specified to replace the default, which doesn't preserve\n * whitespace delimiters and instead must be explicitly included if needed.\n *\n * Default delimiter => \" \":\n *    goog.string.toTitleCase('oneTwoThree')    => 'OneTwoThree'\n *    goog.string.toTitleCase('one two three')  => 'One Two Three'\n *    goog.string.toTitleCase('  one   two   ') => '  One   Two   '\n *    goog.string.toTitleCase('one_two_three')  => 'One_two_three'\n *    goog.string.toTitleCase('one-two-three')  => 'One-two-three'\n *\n * Custom delimiter => \"_-.\":\n *    goog.string.toTitleCase('oneTwoThree', '_-.')       => 'OneTwoThree'\n *    goog.string.toTitleCase('one two three', '_-.')     => 'One two three'\n *    goog.string.toTitleCase('  one   two   ', '_-.')    => '  one   two   '\n *    goog.string.toTitleCase('one_two_three', '_-.')     => 'One_Two_Three'\n *    goog.string.toTitleCase('one-two-three', '_-.')     => 'One-Two-Three'\n *    goog.string.toTitleCase('one...two...three', '_-.') => 'One...Two...Three'\n *    goog.string.toTitleCase('one. two. three', '_-.')   => 'One. two. three'\n *    goog.string.toTitleCase('one-two.three', '_-.')     => 'One-Two.Three'\n *\n * @param {string} str String value in camelCase form.\n * @param {string=} opt_delimiters Custom delimiter character set used to\n *      distinguish words in the string value. Each character represents a\n *      single delimiter. When provided, default whitespace delimiter is\n *      overridden and must be explicitly included if needed.\n * @return {string} String value in TitleCase form.\n */\ngoog.string.toTitleCase = function(str, opt_delimiters) {\n  var delimiters = (typeof opt_delimiters === 'string') ?\n      goog.string.regExpEscape(opt_delimiters) :\n      '\\\\s';\n\n  // For IE8, we need to prevent using an empty character set. Otherwise,\n  // incorrect matching will occur.\n  delimiters = delimiters ? '|[' + delimiters + ']+' : '';\n\n  var regexp = new RegExp('(^' + delimiters + ')([a-z])', 'g');\n  return str.replace(regexp, function(all, p1, p2) {\n    return p1 + p2.toUpperCase();\n  });\n};\n\n\n/**\n * Capitalizes a string, i.e. converts the first letter to uppercase\n * and all other letters to lowercase, e.g.:\n *\n * goog.string.capitalize('one')     => 'One'\n * goog.string.capitalize('ONE')     => 'One'\n * goog.string.capitalize('one two') => 'One two'\n *\n * Note that this function does not trim initial whitespace.\n *\n * @param {string} str String value to capitalize.\n * @return {string} String value with first letter in uppercase.\n */\ngoog.string.capitalize = function(str) {\n  return String(str.charAt(0)).toUpperCase() +\n      String(str.substr(1)).toLowerCase();\n};\n\n\n/**\n * Parse a string in decimal or hexidecimal ('0xFFFF') form.\n *\n * To parse a particular radix, please use parseInt(string, radix) directly. See\n * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt\n *\n * This is a wrapper for the built-in parseInt function that will only parse\n * numbers as base 10 or base 16.  Some JS implementations assume strings\n * starting with \"0\" are intended to be octal. ES3 allowed but discouraged\n * this behavior. ES5 forbids it.  This function emulates the ES5 behavior.\n *\n * For more information, see Mozilla JS Reference: http://goo.gl/8RiFj\n *\n * @param {string|number|null|undefined} value The value to be parsed.\n * @return {number} The number, parsed. If the string failed to parse, this\n *     will be NaN.\n */\ngoog.string.parseInt = function(value) {\n  // Force finite numbers to strings.\n  if (isFinite(value)) {\n    value = String(value);\n  }\n\n  if (typeof value === 'string') {\n    // If the string starts with '0x' or '-0x', parse as hex.\n    return /^\\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);\n  }\n\n  return NaN;\n};\n\n\n/**\n * Splits a string on a separator a limited number of times.\n *\n * This implementation is more similar to Python or Java, where the limit\n * parameter specifies the maximum number of splits rather than truncating\n * the number of results.\n *\n * See http://docs.python.org/2/library/stdtypes.html#str.split\n * See JavaDoc: http://goo.gl/F2AsY\n * See Mozilla reference: http://goo.gl/dZdZs\n *\n * @param {string} str String to split.\n * @param {string} separator The separator.\n * @param {number} limit The limit to the number of splits. The resulting array\n *     will have a maximum length of limit+1.  Negative numbers are the same\n *     as zero.\n * @return {!Array<string>} The string, split.\n */\ngoog.string.splitLimit = function(str, separator, limit) {\n  var parts = str.split(separator);\n  var returnVal = [];\n\n  // Only continue doing this while we haven't hit the limit and we have\n  // parts left.\n  while (limit > 0 && parts.length) {\n    returnVal.push(parts.shift());\n    limit--;\n  }\n\n  // If there are remaining parts, append them to the end.\n  if (parts.length) {\n    returnVal.push(parts.join(separator));\n  }\n\n  return returnVal;\n};\n\n\n/**\n * Finds the characters to the right of the last instance of any separator\n *\n * This function is similar to goog.string.path.baseName, except it can take a\n * list of characters to split the string on. It will return the rightmost\n * grouping of characters to the right of any separator as a left-to-right\n * oriented string.\n *\n * @see goog.string.path.baseName\n * @param {string} str The string\n * @param {string|!Array<string>} separators A list of separator characters\n * @return {string} The last part of the string with respect to the separators\n */\ngoog.string.lastComponent = function(str, separators) {\n  if (!separators) {\n    return str;\n  } else if (typeof separators == 'string') {\n    separators = [separators];\n  }\n\n  var lastSeparatorIndex = -1;\n  for (var i = 0; i < separators.length; i++) {\n    if (separators[i] == '') {\n      continue;\n    }\n    var currentSeparatorIndex = str.lastIndexOf(separators[i]);\n    if (currentSeparatorIndex > lastSeparatorIndex) {\n      lastSeparatorIndex = currentSeparatorIndex;\n    }\n  }\n  if (lastSeparatorIndex == -1) {\n    return str;\n  }\n  return str.slice(lastSeparatorIndex + 1);\n};\n\n\n/**\n * Computes the Levenshtein edit distance between two strings.\n * @param {string} a\n * @param {string} b\n * @return {number} The edit distance between the two strings.\n */\ngoog.string.editDistance = function(a, b) {\n  var v0 = [];\n  var v1 = [];\n\n  if (a == b) {\n    return 0;\n  }\n\n  if (!a.length || !b.length) {\n    return Math.max(a.length, b.length);\n  }\n\n  for (var i = 0; i < b.length + 1; i++) {\n    v0[i] = i;\n  }\n\n  for (var i = 0; i < a.length; i++) {\n    v1[0] = i + 1;\n\n    for (var j = 0; j < b.length; j++) {\n      var cost = Number(a[i] != b[j]);\n      // Cost for the substring is the minimum of adding one character, removing\n      // one character, or a swap.\n      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);\n    }\n\n    for (var j = 0; j < v0.length; j++) {\n      v0[j] = v1[j];\n    }\n  }\n\n  return v1[b.length];\n};\n"],
"names":["goog","provide","require","string","DETECT_DOUBLE_ESCAPING","define","FORCE_NON_DOM_HTML_UNESCAPING","Unicode","NBSP","startsWith","internal","endsWith","caseInsensitiveStartsWith","caseInsensitiveEndsWith","caseInsensitiveEquals","subs","goog.string.subs","str","var_args","splitParts","split","returnString","subsArguments","Array","prototype","slice","call","arguments","length","shift","join","collapseWhitespace","goog.string.collapseWhitespace","replace","isEmptyOrWhitespace","isEmptyString","goog.string.isEmptyString","isEmpty","isEmptyOrWhitespaceSafe","goog.string.isEmptyOrWhitespaceSafe","makeSafe","isEmptySafe","isBreakingWhitespace","goog.string.isBreakingWhitespace","test","isAlpha","goog.string.isAlpha","isNumeric","goog.string.isNumeric","isAlphaNumeric","goog.string.isAlphaNumeric","isSpace","goog.string.isSpace","ch","isUnicodeChar","goog.string.isUnicodeChar","stripNewlines","goog.string.stripNewlines","canonicalizeNewlines","goog.string.canonicalizeNewlines","normalizeWhitespace","goog.string.normalizeWhitespace","normalizeSpaces","goog.string.normalizeSpaces","collapseBreakingSpaces","goog.string.collapseBreakingSpaces","trim","trimLeft","goog.string.trimLeft","trimRight","goog.string.trimRight","caseInsensitiveCompare","numberAwareCompare_","goog.string.numberAwareCompare_","str1","str2","tokenizerRegExp","tokens1","toLowerCase","match","tokens2","count","Math","min","i","a","b","num1","parseInt","isNaN","num2","intAwareCompare","goog.string.intAwareCompare","floatAwareCompare","goog.string.floatAwareCompare","numerateCompare","urlEncode","goog.string.urlEncode","encodeURIComponent","String","urlDecode","goog.string.urlDecode","decodeURIComponent","newLineToBr","htmlEscape","goog.string.htmlEscape","opt_isLikelyToContainHtmlChars","E_RE_","unescapeEntities","goog.string.unescapeEntities","contains","global","unescapeEntitiesUsingDom_","unescapePureXmlEntities_","unescapeEntitiesWithDocument","goog.string.unescapeEntitiesWithDocument","document","goog.string.unescapeEntitiesUsingDom_","opt_document","seen","div","createElement","HTML_ENTITY_PATTERN_","s","entity","value","charAt","n","Number","substr","fromCharCode","dom","safe","setInnerHtml","html","uncheckedconversions","safeHtmlFromStringKnownToSatisfyTypeContract","Const","from","firstChild","nodeValue","goog.string.unescapePureXmlEntities_","whitespaceEscape","goog.string.whitespaceEscape","opt_xml","preserveSpaces","goog.string.preserveSpaces","stripQuotes","goog.string.stripQuotes","quoteChars","quoteChar","substring","truncate","goog.string.truncate","chars","opt_protectEscapedCharacters","truncateMiddle","goog.string.truncateMiddle","opt_trailingChars","endPoint","startPoint","half","floor","endPos","specialEscapeChars_","jsEscapeCache_","quote","goog.string.quote","sb","cc","charCodeAt","escapeChar","push","escapeString","goog.string.escapeString","goog.string.escapeChar","c","rv","toString","toUpperCase","caseInsensitiveContains","countOf","goog.string.countOf","ss","removeAt","goog.string.removeAt","index","stringLength","resultStr","remove","goog.string.remove","removeAll","goog.string.removeAll","re","RegExp","regExpEscape","replaceAll","goog.string.replaceAll","replacement","goog.string.regExpEscape","repeat","padNumber","goog.string.padNumber","num","opt_precision","undefined","toFixed","indexOf","max","goog.string.makeSafe","obj","buildString","goog.string.buildString","getRandomString","goog.string.getRandomString","x","random","abs","now","compareVersions","hashCode","goog.string.hashCode","result","uniqueStringCounter_","createUniqueString","goog.string.createUniqueString","toNumber","goog.string.toNumber","NaN","isLowerCamelCase","goog.string.isLowerCamelCase","isUpperCamelCase","goog.string.isUpperCamelCase","toCamelCase","goog.string.toCamelCase","all","toSelectorCase","goog.string.toSelectorCase","toTitleCase","goog.string.toTitleCase","opt_delimiters","delimiters","regexp","p1","p2","capitalize","goog.string.capitalize","goog.string.parseInt","isFinite","splitLimit","goog.string.splitLimit","separator","limit","parts","returnVal","lastComponent","goog.string.lastComponent","separators","lastSeparatorIndex","currentSeparatorIndex","lastIndexOf","editDistance","goog.string.editDistance","v0","v1","j","cost"]
}
