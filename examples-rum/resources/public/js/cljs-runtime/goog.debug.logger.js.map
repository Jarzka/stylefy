{
"version":3,
"file":"goog.debug.logger.js",
"lineCount":430,
"mappings":"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",
"sources":["goog/debug/logger.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the Logger class. Please minimize dependencies\n * this file has on other closure classes as any dependency it takes won't be\n * able to use the logging infrastructure.\n *\n * @see ../demos/debug.html\n */\n\ngoog.provide('goog.debug.LogManager');\ngoog.provide('goog.debug.Loggable');\ngoog.provide('goog.debug.Logger');\ngoog.provide('goog.debug.Logger.Level');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.debug');\ngoog.require('goog.debug.LogBuffer');\ngoog.require('goog.debug.LogRecord');\n\n\n/**\n * A message value that can be handled by a Logger.\n *\n * Functions are treated like callbacks, but are only called when the event's\n * log level is enabled. This is useful for logging messages that are expensive\n * to construct.\n *\n * @typedef {string|function(): string}\n */\ngoog.debug.Loggable;\n\n\n\n/**\n * The Logger is an object used for logging debug messages. Loggers are\n * normally named, using a hierarchical dot-separated namespace. Logger names\n * can be arbitrary strings, but they should normally be based on the package\n * name or class name of the logged component, such as goog.net.BrowserChannel.\n *\n * The Logger object is loosely based on the java class\n * java.util.logging.Logger. It supports different levels of filtering for\n * different loggers.\n *\n * The logger object should never be instantiated by application code. It\n * should always use the goog.debug.Logger.getLogger function.\n *\n * @constructor\n * @param {string} name The name of the Logger.\n * @final\n */\ngoog.debug.Logger = function(name) {\n  /**\n   * Name of the Logger. Generally a dot-separated namespace\n   * @private {string}\n   */\n  this.name_ = name;\n\n  /**\n   * Parent Logger.\n   * @private {?goog.debug.Logger}\n   */\n  this.parent_ = null;\n\n  /**\n   * Level that this logger only filters above. Null indicates it should\n   * inherit from the parent.\n   * @private {?goog.debug.Logger.Level}\n   */\n  this.level_ = null;\n\n  /**\n   * Map of children loggers. The keys are the leaf names of the children and\n   * the values are the child loggers.\n   * @private {?Object}\n   */\n  this.children_ = null;\n\n  /**\n   * Handlers that are listening to this logger.\n   * @private {?Array<?Function>}\n   */\n  this.handlers_ = null;\n};\n\n\n/** @const */\ngoog.debug.Logger.ROOT_LOGGER_NAME = '';\n\n\n/**\n * @define {boolean} Toggles whether loggers other than the root logger can have\n *     log handlers attached to them and whether they can have their log level\n *     set. Logging is a bit faster when this is set to false.\n */\ngoog.debug.Logger.ENABLE_HIERARCHY =\n    goog.define('goog.debug.Logger.ENABLE_HIERARCHY', true);\n\n\n/**\n * @define {boolean} Toggles whether active log statements are also recorded\n *     to the profiler.\n */\ngoog.debug.Logger.ENABLE_PROFILER_LOGGING =\n    goog.define('goog.debug.Logger.ENABLE_PROFILER_LOGGING', false);\n\n\nif (!goog.debug.Logger.ENABLE_HIERARCHY) {\n  /**\n   * @type {!Array<Function>}\n   * @private\n   */\n  goog.debug.Logger.rootHandlers_ = [];\n\n\n  /**\n   * @type {goog.debug.Logger.Level}\n   * @private\n   */\n  goog.debug.Logger.rootLevel_;\n}\n\n\n\n/**\n * The Level class defines a set of standard logging levels that\n * can be used to control logging output.  The logging Level objects\n * are ordered and are specified by ordered integers.  Enabling logging\n * at a given level also enables logging at all higher levels.\n * <p>\n * Clients should normally use the predefined Level constants such\n * as Level.SEVERE.\n * <p>\n * The levels in descending order are:\n * <ul>\n * <li>SEVERE (highest value)\n * <li>WARNING\n * <li>INFO\n * <li>CONFIG\n * <li>FINE\n * <li>FINER\n * <li>FINEST  (lowest value)\n * </ul>\n * In addition there is a level OFF that can be used to turn\n * off logging, and a level ALL that can be used to enable\n * logging of all messages.\n *\n * @param {string} name The name of the level.\n * @param {number} value The numeric value of the level.\n * @constructor\n * @final\n */\ngoog.debug.Logger.Level = function(name, value) {\n  /**\n   * The name of the level\n   * @type {string}\n   */\n  this.name = name;\n\n  /**\n   * The numeric value of the level\n   * @type {number}\n   */\n  this.value = value;\n};\n\n\n/**\n * @return {string} String representation of the logger level.\n * @override\n */\ngoog.debug.Logger.Level.prototype.toString = function() {\n  return this.name;\n};\n\n\n/**\n * OFF is a special level that can be used to turn off logging.\n * This level is initialized to <CODE>Infinity</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.OFF = new goog.debug.Logger.Level('OFF', Infinity);\n\n\n/**\n * SHOUT is a message level for extra debugging loudness.\n * This level is initialized to <CODE>1200</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level('SHOUT', 1200);\n\n\n/**\n * SEVERE is a message level indicating a serious failure.\n * This level is initialized to <CODE>1000</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level('SEVERE', 1000);\n\n\n/**\n * WARNING is a message level indicating a potential problem.\n * This level is initialized to <CODE>900</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level('WARNING', 900);\n\n\n/**\n * INFO is a message level for informational messages.\n * This level is initialized to <CODE>800</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.INFO = new goog.debug.Logger.Level('INFO', 800);\n\n\n/**\n * CONFIG is a message level for static configuration messages.\n * This level is initialized to <CODE>700</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level('CONFIG', 700);\n\n\n/**\n * FINE is a message level providing tracing information.\n * This level is initialized to <CODE>500</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.FINE = new goog.debug.Logger.Level('FINE', 500);\n\n\n/**\n * FINER indicates a fairly detailed tracing message.\n * This level is initialized to <CODE>400</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.FINER = new goog.debug.Logger.Level('FINER', 400);\n\n/**\n * FINEST indicates a highly detailed tracing message.\n * This level is initialized to <CODE>300</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\n\ngoog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level('FINEST', 300);\n\n\n/**\n * ALL indicates that all messages should be logged.\n * This level is initialized to <CODE>0</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.ALL = new goog.debug.Logger.Level('ALL', 0);\n\n\n/**\n * The predefined levels.\n * @type {!Array<!goog.debug.Logger.Level>}\n * @final\n */\ngoog.debug.Logger.Level.PREDEFINED_LEVELS = [\n  goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT,\n  goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING,\n  goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG,\n  goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER,\n  goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL\n];\n\n\n/**\n * A lookup map used to find the level object based on the name or value of\n * the level object.\n * @type {?Object}\n * @private\n */\ngoog.debug.Logger.Level.predefinedLevelsCache_ = null;\n\n\n/**\n * Creates the predefined levels cache and populates it.\n * @private\n */\ngoog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {\n  goog.debug.Logger.Level.predefinedLevelsCache_ = {};\n  for (var i = 0, level; level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\n       i++) {\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;\n  }\n};\n\n\n/**\n * Gets the predefined level with the given name.\n * @param {string} name The name of the level.\n * @return {goog.debug.Logger.Level} The level, or null if none found.\n */\ngoog.debug.Logger.Level.getPredefinedLevel = function(name) {\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\n  }\n\n  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;\n};\n\n\n/**\n * Gets the highest predefined level <= #value.\n * @param {number} value Level value.\n * @return {goog.debug.Logger.Level} The level, or null if none found.\n */\ngoog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\n  }\n\n  if (value in /** @type {!Object} */ (\n          goog.debug.Logger.Level.predefinedLevelsCache_)) {\n    return goog.debug.Logger.Level.predefinedLevelsCache_[value];\n  }\n\n  for (var i = 0; i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length; ++i) {\n    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\n    if (level.value <= value) {\n      return level;\n    }\n  }\n  return null;\n};\n\n\n/**\n * Finds or creates a logger for a named subsystem. If a logger has already been\n * created with the given name it is returned. Otherwise a new logger is\n * created. If a new logger is created its log level will be configured based\n * on the LogManager configuration and it will configured to also send logging\n * output to its parent's handlers. It will be registered in the LogManager\n * global namespace.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n * name and should normally be based on the package name or class name of the\n * subsystem, such as goog.net.BrowserChannel.\n * @return {!goog.debug.Logger} The named logger.\n * @deprecated use {@link goog.log} instead.\n */\ngoog.debug.Logger.getLogger = function(name) {\n  return goog.debug.LogManager.getLogger(name);\n};\n\n\n/**\n * Logs a message to profiling tools, if available.\n * {@see https://developers.google.com/web-toolkit/speedtracer/logging-api}\n * {@see http://msdn.microsoft.com/en-us/library/dd433074(VS.85).aspx}\n * @param {string} msg The message to log.\n */\ngoog.debug.Logger.logToProfilers = function(msg) {\n  // Some browsers also log timeStamp calls to the console, only log\n  // if actually asked.\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\n    var msWriteProfilerMark = goog.global['msWriteProfilerMark'];\n    if (msWriteProfilerMark) {\n      // Logs a message to the Microsoft profiler\n      // On IE, console['timeStamp'] may output to console\n      msWriteProfilerMark(msg);\n      return;\n    }\n\n    // Using goog.global, as loggers might be used in window-less contexts.\n    var console = goog.global['console'];\n    if (console && console['timeStamp']) {\n      // Logs a message to Firebug, Web Inspector, SpeedTracer, etc.\n      console['timeStamp'](msg);\n    }\n  }\n};\n\n\n/**\n * Gets the name of this logger.\n * @return {string} The name of this logger.\n */\ngoog.debug.Logger.prototype.getName = function() {\n  return this.name_;\n};\n\n\n/**\n * Adds a handler to the logger. This doesn't use the event system because\n * we want to be able to add logging to the event system.\n * @param {Function} handler Handler function to add.\n */\ngoog.debug.Logger.prototype.addHandler = function(handler) {\n  if (goog.debug.LOGGING_ENABLED) {\n    if (goog.debug.Logger.ENABLE_HIERARCHY) {\n      if (!this.handlers_) {\n        this.handlers_ = [];\n      }\n      this.handlers_.push(handler);\n    } else {\n      goog.asserts.assert(\n          !this.name_, 'Cannot call addHandler on a non-root logger when ' +\n              'goog.debug.Logger.ENABLE_HIERARCHY is false.');\n      goog.debug.Logger.rootHandlers_.push(handler);\n    }\n  }\n};\n\n\n/**\n * Removes a handler from the logger. This doesn't use the event system because\n * we want to be able to add logging to the event system.\n * @param {Function} handler Handler function to remove.\n * @return {boolean} Whether the handler was removed.\n */\ngoog.debug.Logger.prototype.removeHandler = function(handler) {\n  if (goog.debug.LOGGING_ENABLED) {\n    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ?\n        this.handlers_ :\n        goog.debug.Logger.rootHandlers_;\n    return !!handlers && goog.array.remove(handlers, handler);\n  } else {\n    return false;\n  }\n};\n\n\n/**\n * Returns the parent of this logger.\n * @return {goog.debug.Logger} The parent logger or null if this is the root.\n */\ngoog.debug.Logger.prototype.getParent = function() {\n  return this.parent_;\n};\n\n\n/**\n * Returns the children of this logger as a map of the child name to the logger.\n * @return {!Object} The map where the keys are the child leaf names and the\n *     values are the Logger objects.\n */\ngoog.debug.Logger.prototype.getChildren = function() {\n  if (!this.children_) {\n    this.children_ = {};\n  }\n  return this.children_;\n};\n\n\n/**\n * Set the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value Level.OFF can be used to turn off logging. If the new level\n * is null, it means that this node should inherit its level from its nearest\n * ancestor with a specific (non-null) level value.\n *\n * @param {goog.debug.Logger.Level} level The new level.\n */\ngoog.debug.Logger.prototype.setLevel = function(level) {\n  if (goog.debug.LOGGING_ENABLED) {\n    if (goog.debug.Logger.ENABLE_HIERARCHY) {\n      this.level_ = level;\n    } else {\n      goog.asserts.assert(\n          !this.name_, 'Cannot call setLevel() on a non-root logger when ' +\n              'goog.debug.Logger.ENABLE_HIERARCHY is false.');\n      goog.debug.Logger.rootLevel_ = level;\n    }\n  }\n};\n\n\n/**\n * Gets the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value Level.OFF can be used to turn off logging. If the level\n * is null, it means that this node should inherit its level from its nearest\n * ancestor with a specific (non-null) level value.\n *\n * @return {goog.debug.Logger.Level} The level.\n */\ngoog.debug.Logger.prototype.getLevel = function() {\n  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;\n};\n\n\n/**\n * Returns the effective level of the logger based on its ancestors' levels.\n * @return {goog.debug.Logger.Level} The level.\n */\ngoog.debug.Logger.prototype.getEffectiveLevel = function() {\n  if (!goog.debug.LOGGING_ENABLED) {\n    return goog.debug.Logger.Level.OFF;\n  }\n\n  if (!goog.debug.Logger.ENABLE_HIERARCHY) {\n    return goog.debug.Logger.rootLevel_;\n  }\n  if (this.level_) {\n    return this.level_;\n  }\n  if (this.parent_) {\n    return this.parent_.getEffectiveLevel();\n  }\n  goog.asserts.fail('Root logger has no level set.');\n  return null;\n};\n\n\n/**\n * Checks if a message of the given level would actually be logged by this\n * logger. This check is based on the Loggers effective level, which may be\n * inherited from its parent.\n * @param {goog.debug.Logger.Level} level The level to check.\n * @return {boolean} Whether the message would be logged.\n */\ngoog.debug.Logger.prototype.isLoggable = function(level) {\n  return goog.debug.LOGGING_ENABLED &&\n      level.value >= this.getEffectiveLevel().value;\n};\n\n\n/**\n * Logs a message. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error|Object=} opt_exception An exception associated with the\n *     message.\n */\ngoog.debug.Logger.prototype.log = function(level, msg, opt_exception) {\n  // java caches the effective level, not sure it's necessary here\n  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {\n    // Message callbacks can be useful when a log message is expensive to build.\n    if (goog.isFunction(msg)) {\n      msg = msg();\n    }\n\n    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));\n  }\n};\n\n\n/**\n * Creates a new log record and adds the exception (if present) to it.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {string} msg The string message.\n * @param {Error|Object=} opt_exception An exception associated with the\n *     message.\n * @return {!goog.debug.LogRecord} A log record.\n * @suppress {es5Strict}\n */\ngoog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {\n  if (goog.debug.LogBuffer.isBufferingEnabled()) {\n    var logRecord =\n        goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_);\n  } else {\n    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);\n  }\n  if (opt_exception) {\n    logRecord.setException(opt_exception);\n  }\n  return logRecord;\n};\n\n\n/**\n * Logs a message at the Logger.Level.SHOUT level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.shout = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.SEVERE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.severe = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.WARNING level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.warning = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.INFO level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.info = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.CONFIG level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.config = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.FINE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.fine = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.FINER level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.finer = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.FINEST level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.finest = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a LogRecord. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * @param {goog.debug.LogRecord} logRecord A log record to log.\n */\ngoog.debug.Logger.prototype.logRecord = function(logRecord) {\n  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {\n    this.doLogRecord_(logRecord);\n  }\n};\n\n\n/**\n * Logs a LogRecord.\n * @param {goog.debug.LogRecord} logRecord A log record to log.\n * @private\n */\ngoog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\n    goog.debug.Logger.logToProfilers('log:' + logRecord.getMessage());\n  }\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    var target = this;\n    while (target) {\n      target.callPublish_(logRecord);\n      target = target.getParent();\n    }\n  } else {\n    for (var i = 0, handler; handler = goog.debug.Logger.rootHandlers_[i++];) {\n      handler(logRecord);\n    }\n  }\n};\n\n\n/**\n * Calls the handlers for publish.\n * @param {goog.debug.LogRecord} logRecord The log record to publish.\n * @private\n */\ngoog.debug.Logger.prototype.callPublish_ = function(logRecord) {\n  if (this.handlers_) {\n    for (var i = 0, handler; handler = this.handlers_[i]; i++) {\n      handler(logRecord);\n    }\n  }\n};\n\n\n/**\n * Sets the parent of this logger. This is used for setting up the logger tree.\n * @param {goog.debug.Logger} parent The parent logger.\n * @private\n */\ngoog.debug.Logger.prototype.setParent_ = function(parent) {\n  this.parent_ = parent;\n};\n\n\n/**\n * Adds a child to this logger. This is used for setting up the logger tree.\n * @param {string} name The leaf name of the child.\n * @param {goog.debug.Logger} logger The child logger.\n * @private\n */\ngoog.debug.Logger.prototype.addChild_ = function(name, logger) {\n  this.getChildren()[name] = logger;\n};\n\n\n/**\n * There is a single global LogManager object that is used to maintain a set of\n * shared state about Loggers and log services. This is loosely based on the\n * java class java.util.logging.LogManager.\n * @const\n */\ngoog.debug.LogManager = {};\n\n\n/**\n * Map of logger names to logger objects.\n *\n * @type {!Object<string, !goog.debug.Logger>}\n * @private\n */\ngoog.debug.LogManager.loggers_ = {};\n\n\n/**\n * The root logger which is the root of the logger tree.\n * @type {?goog.debug.Logger}\n * @private\n */\ngoog.debug.LogManager.rootLogger_ = null;\n\n\n/**\n * Initializes the LogManager if not already initialized.\n */\ngoog.debug.LogManager.initialize = function() {\n  if (!goog.debug.LogManager.rootLogger_) {\n    goog.debug.LogManager.rootLogger_ =\n        new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);\n    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] =\n        goog.debug.LogManager.rootLogger_;\n    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);\n  }\n};\n\n\n/**\n * Returns all the loggers.\n * @return {!Object<string, !goog.debug.Logger>} Map of logger names to logger\n *     objects.\n */\ngoog.debug.LogManager.getLoggers = function() {\n  return goog.debug.LogManager.loggers_;\n};\n\n\n/**\n * Returns the root of the logger tree namespace, the logger with the empty\n * string as its name.\n *\n * @return {!goog.debug.Logger} The root logger.\n */\ngoog.debug.LogManager.getRoot = function() {\n  goog.debug.LogManager.initialize();\n  return /** @type {!goog.debug.Logger} */ (goog.debug.LogManager.rootLogger_);\n};\n\n\n/**\n * Finds a named logger.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n * name and should normally be based on the package name or class name of the\n * subsystem, such as goog.net.BrowserChannel.\n * @return {!goog.debug.Logger} The named logger.\n */\ngoog.debug.LogManager.getLogger = function(name) {\n  goog.debug.LogManager.initialize();\n  var ret = goog.debug.LogManager.loggers_[name];\n  return ret || goog.debug.LogManager.createLogger_(name);\n};\n\n\n/**\n * Creates a function that can be passed to goog.debug.catchErrors. The function\n * will log all reported errors using the given logger.\n * @param {goog.debug.Logger=} opt_logger The logger to log the errors to.\n *     Defaults to the root logger.\n * @return {function(Object)} The created function.\n */\ngoog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {\n  return function(info) {\n    var logger = opt_logger || goog.debug.LogManager.getRoot();\n    logger.severe(\n        'Error: ' + info.message + ' (' + info.fileName + ' @ Line: ' +\n        info.line + ')');\n  };\n};\n\n\n/**\n * Creates the named logger. Will also create the parents of the named logger\n * if they don't yet exist.\n * @param {string} name The name of the logger.\n * @return {!goog.debug.Logger} The named logger.\n * @private\n */\ngoog.debug.LogManager.createLogger_ = function(name) {\n  // find parent logger\n  var logger = new goog.debug.Logger(name);\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    var lastDotIndex = name.lastIndexOf('.');\n    var parentName = name.substr(0, lastDotIndex);\n    var leafName = name.substr(lastDotIndex + 1);\n    var parentLogger = goog.debug.LogManager.getLogger(parentName);\n\n    // tell the parent about the child and the child about the parent\n    parentLogger.addChild_(leafName, logger);\n    logger.setParent_(parentLogger);\n  }\n\n  goog.debug.LogManager.loggers_[name] = logger;\n  return logger;\n};\n"],
"names":["goog","provide","require","debug","Loggable","Logger","goog.debug.Logger","name","name_","parent_","level_","children_","handlers_","ROOT_LOGGER_NAME","ENABLE_HIERARCHY","define","ENABLE_PROFILER_LOGGING","rootHandlers_","rootLevel_","Level","goog.debug.Logger.Level","value","prototype","toString","goog.debug.Logger.Level.prototype.toString","OFF","Infinity","SHOUT","SEVERE","WARNING","INFO","CONFIG","FINE","FINER","FINEST","ALL","PREDEFINED_LEVELS","predefinedLevelsCache_","createPredefinedLevelsCache_","goog.debug.Logger.Level.createPredefinedLevelsCache_","i","level","getPredefinedLevel","goog.debug.Logger.Level.getPredefinedLevel","getPredefinedLevelByValue","goog.debug.Logger.Level.getPredefinedLevelByValue","length","getLogger","goog.debug.Logger.getLogger","LogManager","logToProfilers","goog.debug.Logger.logToProfilers","msg","msWriteProfilerMark","global","console","getName","goog.debug.Logger.prototype.getName","addHandler","goog.debug.Logger.prototype.addHandler","handler","LOGGING_ENABLED","push","asserts","assert","removeHandler","goog.debug.Logger.prototype.removeHandler","handlers","array","remove","getParent","goog.debug.Logger.prototype.getParent","getChildren","goog.debug.Logger.prototype.getChildren","setLevel","goog.debug.Logger.prototype.setLevel","getLevel","goog.debug.Logger.prototype.getLevel","getEffectiveLevel","goog.debug.Logger.prototype.getEffectiveLevel","fail","isLoggable","goog.debug.Logger.prototype.isLoggable","log","goog.debug.Logger.prototype.log","opt_exception","isFunction","doLogRecord_","getLogRecord","goog.debug.Logger.prototype.getLogRecord","LogBuffer","isBufferingEnabled","logRecord","getInstance","addRecord","LogRecord","String","setException","shout","goog.debug.Logger.prototype.shout","severe","goog.debug.Logger.prototype.severe","warning","goog.debug.Logger.prototype.warning","info","goog.debug.Logger.prototype.info","config","goog.debug.Logger.prototype.config","fine","goog.debug.Logger.prototype.fine","finer","goog.debug.Logger.prototype.finer","finest","goog.debug.Logger.prototype.finest","goog.debug.Logger.prototype.logRecord","goog.debug.Logger.prototype.doLogRecord_","getMessage","target","callPublish_","goog.debug.Logger.prototype.callPublish_","setParent_","goog.debug.Logger.prototype.setParent_","parent","addChild_","goog.debug.Logger.prototype.addChild_","logger","loggers_","rootLogger_","initialize","goog.debug.LogManager.initialize","getLoggers","goog.debug.LogManager.getLoggers","getRoot","goog.debug.LogManager.getRoot","goog.debug.LogManager.getLogger","ret","createLogger_","createFunctionForCatchErrors","goog.debug.LogManager.createFunctionForCatchErrors","opt_logger","message","fileName","line","goog.debug.LogManager.createLogger_","lastDotIndex","lastIndexOf","parentName","substr","leafName","parentLogger"]
}
