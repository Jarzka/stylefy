{"version":3,"sources":["cljs/core/async/impl/protocols.cljs"],"mappings":";;AAUA,AAAA,AAAaA;AAEb,AAAA;AAAA;;;AAAA,AAAaQ;;AAAb,AAAAP,AAAA,AACUQ,AAAKC;AADf,AAAA,AAAAR,AAAA,AAAA,AAAA,AAAA,AACUO,AAAAA;AADVN,AAAA,AAAAC,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACUM,AAAAA,AAAKC,AAAAA;;AADf,AAAAJ,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACUG,AAAAA,AAAKC,AAAAA;;AADf,AAAA,AAAAH,AAAA,AACUE;;;;AADV,AAAA;;;AAAA,AACGL,AAAOK,AAAKC;AADf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACUD,AAAAA;AADV,AACUA,AAAAA,AAAKC;;AADf,AAAAT,AACUQ,AAAKC;;;;AADf,AAGA,AAAA;AAAA;;;AAAA,AAAaG;;AAAb,AAAAF,AAAA,AACSF,AAAKK,AAAIJ;AADlB,AAAA,AAAAR,AAAA,AAAA,AAAA,AAAA,AACSO,AAAAA;AADTN,AAAA,AAAAS,AAAA,AAAAP,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACSM,AAAAA,AAAKK,AAAAA,AAAIJ,AAAAA;;AADlB,AAAAJ,AAAA,AAAAM,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACSG,AAAAA,AAAKK,AAAAA,AAAIJ,AAAAA;;AADlB,AAAA,AAAAH,AAAA,AACSE;;;;AADT,AAAA;;;;AAAA,AACGG,AAAMH,AAAKK,AAAIJ;AADlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACSD,AAAAA;AADT,AACSA,AAAAA,AAAKK,AAAIJ;;AADlB,AAAAC,AACSF,AAAKK,AAAIJ;;;;AADlB,AAIA,AAAA;AAAA;;;AAAA,AAAaS;;AAAb,AAAAJ,AAAA,AACWK;AADX,AAAA,AAAAlB,AAAA,AAAA,AAAA,AAAA,AACWkB,AAAAA;AADXjB,AAAA,AAAAa,AAAA,AAAAX,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACWiB,AAAAA;;AADX,AAAAd,AAAA,AAAAU,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACWc,AAAAA;;AADX,AAAA,AAAAb,AAAA,AACWa;;;;AADX,AAAA,AAAA,AACGJ,AAAQI;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACWA,AAAAA;AADX,AACWA,AAAAA;;AADX,AAAAL,AACWK;;;;AADX,AAAAH,AAAA,AAEYG;AAFZ,AAAA,AAAAlB,AAAA,AAAA,AAAA,AAAA,AAEYkB,AAAAA;AAFZjB,AAAA,AAAAe,AAAA,AAAAb,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEYiB,AAAAA;;AAFZ,AAAAd,AAAA,AAAAY,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEYc,AAAAA;;AAFZ,AAAA,AAAAb,AAAA,AAEYa;;;;AAFZ,AAAA,AAAA,AAEGF,AAASE;AAFZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEYA,AAAAA;AAFZ,AAEYA,AAAAA;;AAFZ,AAAAH,AAEYG;;;;AAFZ,AAIA,AAAA;AAAA;;;AAAA,AAAaO;;AAAb,AAAAN,AAAA,AACYO;AADZ,AAAA,AAAA1B,AAAA,AAAA,AAAA,AAAA,AACY0B,AAAAA;AADZzB,AAAA,AAAAmB,AAAA,AAAAjB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACYyB,AAAAA;;AADZ,AAAAtB,AAAA,AAAAgB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAhB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACYsB,AAAAA;;AADZ,AAAA,AAAArB,AAAA,AACYqB;;;;AADZ,AAAA;;;AAAA,AACGN,AAASM;AADZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACYA,AAAAA;AADZ,AACYA,AAAAA;;AADZ,AAAAP,AACYO;;;;AADZ,AAAAL,AAAA,AAEeK;AAFf,AAAA,AAAA1B,AAAA,AAAA,AAAA,AAAA,AAEe0B,AAAAA;AAFfzB,AAAA,AAAAqB,AAAA,AAAAnB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEeyB,AAAAA;;AAFf,AAAAtB,AAAA,AAAAkB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEesB,AAAAA;;AAFf,AAAA,AAAArB,AAAA,AAEeqB;;;;AAFf,AAAA;;;AAAA,AAEGJ,AAAYI;AAFf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEeA,AAAAA;AAFf,AAEeA,AAAAA;;AAFf,AAAAL,AAEeK;;;;AAFf,AAAAH,AAAA,AAIWG;AAJX,AAAA,AAAA1B,AAAA,AAAA,AAAA,AAAA,AAIW0B,AAAAA;AAJXzB,AAAA,AAAAuB,AAAA,AAAArB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIWyB,AAAAA;;AAJX,AAAAtB,AAAA,AAAAoB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAApB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIWsB,AAAAA;;AAJX,AAAA,AAAArB,AAAA,AAIWqB;;;;AAJX,AAAA;;;AAAA,AAIGF,AAAQE;AAJX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIWA,AAAAA;AAJX,AAIWA,AAAAA;;AAJX,AAAAH,AAIWG;;;;AAJX,AAMA,AAAA;AAAA;;;AAAA,AAAaS;;AAAb,AAAAR,AAAA,AACUS;AADV,AAAA,AAAApC,AAAA,AAAA,AAAA,AAAA,AACUoC,AAAAA;AADVnC,AAAA,AAAA2B,AAAA,AAAAzB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACUmC,AAAAA;;AADV,AAAAhC,AAAA,AAAAwB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAxB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACUgC,AAAAA;;AADV,AAAA,AAAA/B,AAAA,AACU+B;;;;AADV,AAAA;;;AAAA,AACGR,AAAOQ;AADV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACUA,AAAAA;AADV,AACUA,AAAAA;;AADV,AAAAT,AACUS;;;;AADV,AAAAP,AAAA,AAEYO;AAFZ,AAAA,AAAApC,AAAA,AAAA,AAAA,AAAA,AAEYoC,AAAAA;AAFZnC,AAAA,AAAA6B,AAAA,AAAA3B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEYmC,AAAAA;;AAFZ,AAAAhC,AAAA,AAAA0B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA1B,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEYgC,AAAAA;;AAFZ,AAAA,AAAA/B,AAAA,AAEY+B;;;;AAFZ,AAAA;;;AAAA,AAEGN,AAASM;AAFZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEYA,AAAAA;AAFZ,AAEYA,AAAAA;;AAFZ,AAAAP,AAEYO;;;;AAFZ,AAAAL,AAAA,AAGUK,AAAEC;AAHZ,AAAA,AAAArC,AAAA,AAAA,AAAA,AAAA,AAGUoC,AAAAA;AAHVnC,AAAA,AAAA+B,AAAA,AAAA7B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGUmC,AAAAA,AAAEC,AAAAA;;AAHZ,AAAAjC,AAAA,AAAA4B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA5B,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGUgC,AAAAA,AAAEC,AAAAA;;AAHZ,AAAA,AAAAhC,AAAA,AAGU+B;;;;AAHV,AAAA;;;AAAA,AAGGJ,AAAOI,AAAEC;AAHZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGUD,AAAAA;AAHV,AAGUA,AAAAA,AAAEC;;AAHZ,AAAAN,AAGUK,AAAEC;;;;AAHZ,AAAAJ,AAAA,AAIeG;AAJf,AAAA,AAAApC,AAAA,AAAA,AAAA,AAAA,AAIeoC,AAAAA;AAJfnC,AAAA,AAAAiC,AAAA,AAAA/B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIemC,AAAAA;;AAJf,AAAAhC,AAAA,AAAA8B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA9B,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIegC,AAAAA;;AAJf,AAAA,AAAA/B,AAAA,AAIe+B;;;;AAJf,AAAA;;;AAAA,AAIGF,AAAYE;AAJf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIeA,AAAAA;AAJf,AAIeA,AAAAA;;AAJf,AAAAH,AAIeG;;;;AAJf,AAMA,AAAA,AAAA,AAAAE,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFJ;AADJ,AACOA;;;AADP,AAAA,AAAA,AAAMI,AAEFJ,AAAEC;AAFN,AAGK,AAAQ,AAAK,AAAA,AAAMA;AAAnB;AAAA,AAAA,AAAA,AAAAI,AAAA;;;AACA,AAACT,AAAMI,AAAEC;;;AAJd,AAAA,AAAA,AAAMG;;AAAN,AAOA,AAAA;AAAA;;;AAAA,AAAaE;;AAAb","names":["cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","cljs$core$async$impl$protocols$ReadPort$take_BANG_$dyn","x__4422__auto__","m__4423__auto__","cljs.core.async.impl.protocols/take!","goog/typeOf","m__4420__auto__","cljs.core/missing-protocol","cljs.core.async.impl.protocols/ReadPort","port","fn1-handler","cljs$core$async$impl$protocols$WritePort$put_BANG_$dyn","cljs.core.async.impl.protocols/put!","cljs.core.async.impl.protocols/WritePort","val","cljs$core$async$impl$protocols$Channel$close_BANG_$dyn","cljs.core.async.impl.protocols/close!","cljs$core$async$impl$protocols$Channel$closed_QMARK_$dyn","cljs.core.async.impl.protocols/closed?","cljs.core.async.impl.protocols/Channel","chan","cljs$core$async$impl$protocols$Handler$active_QMARK_$dyn","cljs.core.async.impl.protocols/active?","cljs$core$async$impl$protocols$Handler$blockable_QMARK_$dyn","cljs.core.async.impl.protocols/blockable?","cljs$core$async$impl$protocols$Handler$commit$dyn","cljs.core.async.impl.protocols/commit","cljs.core.async.impl.protocols/Handler","h","cljs$core$async$impl$protocols$Buffer$full_QMARK_$dyn","cljs.core.async.impl.protocols/full?","cljs$core$async$impl$protocols$Buffer$remove_BANG_$dyn","cljs.core.async.impl.protocols/remove!","cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$dyn","cljs.core.async.impl.protocols/add!*","cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$dyn","cljs.core.async.impl.protocols/close-buf!","cljs.core.async.impl.protocols/Buffer","b","itm","var_args","G__26435","cljs.core.async.impl.protocols/add!","js/Error","cljs.core.async.impl.protocols/UnblockingBuffer"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.protocols)\n\n(def ^:const MAX-QUEUE-SIZE 1024)\n\n(defprotocol ReadPort\n  (take! [port fn1-handler] \"derefable val if taken, nil if take was enqueued\"))\n\n(defprotocol WritePort\n  (put! [port val fn1-handler] \"derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val.\"))\n\n(defprotocol Channel\n  (close! [chan])\n  (closed? [chan]))\n\n(defprotocol Handler\n  (active? [h] \"returns true if has callback. Must work w/o lock\")\n  (blockable? [h] \"returns true if this handler may be blocked, otherwise it must not block\")\n  #_(lock-id [h] \"a unique id for lock acquisition order, 0 if no lock\")\n  (commit [h] \"commit to fulfilling its end of the transfer, returns cb. Must be called within lock\"))\n\n(defprotocol Buffer\n  (full? [b] \"returns true if buffer cannot accept put\")\n  (remove! [b] \"remove and return next item from buffer, called under chan mutex\")\n  (add!* [b itm] \"if room, add item to the buffer, returns b, called under chan mutex\")\n  (close-buf! [b] \"called on chan closed under chan mutex, return ignored\"))\n\n(defn add!\n  ([b] b)\n  ([b itm]\n     (assert (not (nil? itm)))\n     (add!* b itm)))\n\n;; Defines a buffer that will never block (return true to full?)\n(defprotocol UnblockingBuffer)\n"]}