{"version":3,"sources":["cljs/core/async/impl/dispatch.cljs"],"mappings":";;;;AAYA,AAAKA,AAAM,AAAA,AAACC;AACZ,AAAA,AAAKC;AACL,AAAA,AAAKC;AAEL,AAAA,AAAKC;AAEL,AAAA,AAEA,AAAA,AAAMC;AAAN,AACE,AAAA,AAAMH;;AACN,AAAA,AAAMC;;AACN,AAAA,AAAOG;;AAAP,AACE,AAAMC,AAAE,AAAMP;AAAd,AACE,AAAU,AAAA,AAAMO;AAAhB;AAAA,AACE,AAACA,AAAAA,AAAAA;;AACD,AAAM,AAAGD,AAAMF;AAAf,AACE,AAAO,AAAA,AAAKE;;;;AADd;;;;;AAEN,AAAA,AAAMJ;;AACN,AAAM,AAAA,AAAG,AAAUF;AAAnB,AACE,AAACQ,AAAAA,AAAAA;;AADH;;;AAGF,AAAA,AAAMA;AAAN,AACE,AAAU,AAAKL,AAAQD;AAAvB;;AAAA,AACE,AAAA,AAAMC;;AACN,AAACM,AAAoBJ;;;AAEzB,AAAA,AAAMK,AAAKC;AAAX,AACE,AAAoBX,AAAMW;;AAC1B,AAACH;;AAEH,AAAA,AAAMI,AAAaD,AAAEE;AAArB,AACE,AAACC,AAAcH,AAAEE","names":["cljs.core.async.impl.dispatch/tasks","cljs.core.async.impl.buffers/ring-buffer","cljs.core.async.impl.dispatch/running?","cljs.core.async.impl.dispatch/queued?","cljs.core.async.impl.dispatch/TASK_BATCH_SIZE","cljs.core.async.impl.dispatch/process-messages","count","m","cljs.core.async.impl.dispatch/queue-dispatcher","js/goog.async.nextTick","cljs.core.async.impl.dispatch/run","f","cljs.core.async.impl.dispatch/queue-delay","delay","js/setTimeout"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.dispatch\n  (:require [cljs.core.async.impl.buffers :as buffers]\n            [goog.async.nextTick]))\n\n(def tasks (buffers/ring-buffer 32))\n(def running? false)\n(def queued? false)\n\n(def TASK_BATCH_SIZE 1024)\n\n(declare queue-dispatcher)\n\n(defn process-messages []\n  (set! running? true)\n  (set! queued? false)\n  (loop [count 0]\n    (let [m (.pop tasks)]\n      (when-not (nil? m)\n        (m)\n        (when (< count TASK_BATCH_SIZE)\n          (recur (inc count))))))\n  (set! running? false)\n  (when (> (.-length tasks) 0)\n    (queue-dispatcher)))\n\n(defn queue-dispatcher []\n  (when-not (and queued? running?)\n    (set! queued? true)\n    (goog.async.nextTick process-messages)))\n\n(defn run [f]\n  (.unbounded-unshift tasks f)\n  (queue-dispatcher))\n\n(defn queue-delay [f delay]\n  (js/setTimeout f delay))\n\n"]}