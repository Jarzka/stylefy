{"version":3,"sources":["stylefy/examples/table.cljs"],"mappings":";;;;AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAUL,AAAA,AAAMC,AAAOC,AAAQC,AAAOC;AAA5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAACC,AAAUL,AACR,AAAA,AAACM,AAAcN,AACd,AAAA,AAACM,AAAcN,AAErB,AAACO,AACC,AAACC,AACC,AAAKC,AAAaC;AAAlB,AAAA,AAAA,AAAA,AAAA,AAAA,AACSD,AACF,AAAA,AAACH,AAAcN,AACnB,AAAA,AAAQU;AAVrB,AAAA,AAWUP,AAEL,AAACI,AACC,AAACC,AACC,AAAKG,AAAWC;AAAhB,AAAA,AAAA,AAAA,AAEO,AAACN,AAAcN,AAAY,AAAA,AAAA,AAAI,AAAA,AAACa,AAAE,AAAA,AAACC,AAAIH,AAG3C,AAACJ,AAAM,AAACC,AACC,AAAKC,AAAaC;AAAlB,AAAA,AAAA,AAAA,AAEO,AAAA,AAACJ,AAAcN,AACnB,AAAAe,AAAC,AAAA,AAAOL;AAAR,AAAA,AAAAK,AAAAA,AAAAA,AAAWH,AAAAA;AAHd,AAAA,AACSH;AAPrB,AAAA,AACSE,AASGR;AACZC","names":["stylefy.examples.table/table-style","stylefy.examples.table/table","options","schema","data","stylefy.core.use_style","stylefy.core.use_sub_style","cljs.core.doall","cljs.core.map_indexed","column-index","s","data-index","data-item","cljs.core._EQ_","cljs.core/rem","fexpr__28154"],"sourcesContent":["(ns stylefy.examples.table\n  (:require [reagent.core :as r]\n            [stylefy.core :as stylefy :refer [use-style use-sub-style]]))\n\n(def table-style {:margin-bottom \"1rem\"\n                  ::stylefy/sub-styles\n                  {:thead {:background-color \"#66AA66\"}\n                   :table {:border-collapse \"collapse\"}\n                   :row-even {:background-color \"#DDDDDD\"\n                              ::stylefy/mode {:hover {:background-color \"#BBBBBB\"}}}\n                   :row-odd {:background-color \"#EEEEEE\"\n                             ::stylefy/mode {:hover {:background-color \"#BBBBBB\"}}}\n                   :cell {:padding \"5px\"}}})\n\n(defn table [options schema data]\n  [:div (use-style table-style)\n   [:table (use-sub-style table-style :table)\n    [:thead (use-sub-style table-style :thead)\n     [:tr\n      (doall\n        (map-indexed\n          (fn [column-index s]\n            ^{:key column-index}\n            [:th (use-sub-style table-style :cell)\n             (:title s)])\n          schema))]]\n    [:tbody\n     (doall\n       (map-indexed\n         (fn [data-index data-item]\n           ^{:key data-index}\n           [:tr (use-sub-style table-style (if (= (rem data-index 2) 0)\n                                            :row-even\n                                            :row-odd))\n            (doall (map-indexed\n                     (fn [column-index s]\n                       ^{:key column-index}\n                       [:td (use-sub-style table-style :cell)\n                        ((:name s) data-item)])\n                     schema))])\n         data))]]])"]}