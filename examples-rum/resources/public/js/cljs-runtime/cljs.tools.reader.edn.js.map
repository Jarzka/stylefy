{"version":3,"sources":["cljs/tools/reader/edn.cljs"],"mappings":"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","names":["cljs.tools.reader.edn/macro-terminating?","ch","cljs.tools.reader.edn/macros","cljs.tools.reader.edn/not-constituent?","var_args","G__31829","cljs.tools.reader.edn/read-token","js/Error","rdr","kind","initch","cljs.tools.reader.edn.read_token","validate-leading?","cljs.core/not","cljs.tools.reader.impl.errors/throw-eof-at-start","and__4109__auto__","cljs.tools.reader.impl.errors/throw-bad-char","sb","js/goog.string.StringBuffer","cljs.tools.reader.reader-types/unread","cljs.tools.reader.impl.utils/whitespace?","G__31860","cljs.tools.reader.reader-types/read-char","cljs.tools.reader.reader-types/peek-char","cljs.tools.reader.edn/read-dispatch","_","opts","temp__5733__auto__","dm","cljs.tools.reader.edn/dispatch-macros","obj","G__31872","G__31873","G__31874","cljs.tools.reader.edn/read-tagged","G__31875","cljs.tools.reader.impl.errors/throw-no-dispatch","cljs.tools.reader.impl.errors/throw-eof-at-dispatch","cljs.tools.reader.edn/read-unmatched-delimiter","cljs.tools.reader.impl.errors/throw-unmatch-delimiter","G__31904","cljs.tools.reader.edn/read-unicode-char","token","offset","length","base","l","cljs.core/count","cljs.tools.reader.impl.errors/throw-invalid-unicode-literal","i","uc","js/String.fromCharCode","d","cljs.tools.reader.impl.utils/char-code","cljs.core.nth","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit-in-token","exact?","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit","or__4120__auto__","cljs.tools.reader.impl.errors/throw-invalid-unicode-len","cljs.tools.reader.edn/upper-limit","cljs.tools.reader.edn/lower-limit","cljs.tools.reader.edn/read-char*","backslash","token-len","goog.string/startsWith","c","cljs.tools.reader.edn.read_unicode_char","ic","cljs.tools.reader.impl.errors/throw-invalid-character-literal","len","cljs.tools.reader.impl.errors/throw-invalid-octal-len","cljs.tools.reader.impl.errors/throw-bad-octal-number","cljs.tools.reader.impl.errors/throw-unsupported-character","cljs.tools.reader.impl.errors/throw-eof-in-character","cljs.tools.reader.edn/starting-line-col-info","cljs.tools.reader.reader-types/indexing-reader?","cljs.tools.reader.reader-types/get-line-number","cljs.tools.reader.reader-types/get-column-number","cljs.tools.reader.edn/read-delimited","delim","vec__32071","start-line","start-column","cljs.tools.reader.impl.utils/char","a","cljs.core/transient","cljs.tools.reader.impl.commons/read-past","cljs.tools.reader.impl.errors.throw_eof_delimited","cljs.core._EQ_","cljs.core/persistent!","macrofn","mret","cljs.core.conj_BANG_","o","G__32087","G__32088","G__32089","G__32090","cljs.tools.reader.edn/read","G__32091","cljs.tools.reader.edn/read-list","the-list","cljs.core/empty?","cljs.core.apply","cljs.core/list","cljs.tools.reader.edn/read-vector","cljs.tools.reader.edn/read-map","vec__32138","the-map","map-count","ks","cljs.core.take_nth","key-set","cljs.core/set","cljs.core/odd?","cljs.tools.reader.impl.errors/throw-odd-map","cljs.tools.reader.impl.errors/throw-dup-keys","cljs.core/PersistentArrayMap","cljs.core/to-array","cljs.core/PersistentHashMap","cljs.tools.reader.edn/read-number","G__32154","s","cljs.tools.reader.impl.commons/match-number","cljs.tools.reader.impl.errors/throw-invalid-number","G__32162","cljs.tools.reader.edn/escape-char","G__32168","js/parseInt","cljs.tools.reader.impl.errors/throw-invalid-unicode-escape","cljs.tools.reader.impl.utils/numeric?","cljs.tools.reader.impl.errors/throw-bad-escape-char","cljs.tools.reader.edn/read-string*","G__32227","cljs.tools.reader.impl.errors.throw_eof_reading","G__32229","G__32240","cljs.tools.reader.edn/read-symbol","temp__5735__auto__","G__32250","p","cljs.tools.reader.impl.commons/parse-symbol","cljs.core.symbol","cljs.tools.reader.impl.errors/throw-invalid","cljs.tools.reader.edn/read-keyword","reader","ns","name","cljs.core.keyword","cljs.tools.reader.impl.errors/throw-single-colon","cljs.tools.reader.edn/wrapping-reader","sym","cljs.core/List","cljs.tools.reader.edn/read-meta","m","cljs.tools.reader.impl.utils/desugar-meta","cljs.core/map?","cljs.tools.reader.impl.errors/throw-bad-metadata","cljs.core/PROTOCOL_SENTINEL","cljs.core/with-meta","cljs.core.merge","cljs.core/meta","cljs.tools.reader.impl.errors/throw-bad-metadata-target","cljs.tools.reader.edn/read-set","coll","the-set","cljs.tools.reader.edn/read-discard","G__32321","cljs.tools.reader.edn/read-namespaced-map","G__32329","cljs.tools.reader.impl.utils/second'","items","keys","cljs.tools.reader.impl.utils/namespace-keys","vals","cljs.core/rest","cljs.core/zipmap","cljs.tools.reader.impl.errors/throw-ns-map-no-map","cljs.tools.reader.impl.errors/throw-bad-ns","cljs.tools.reader.edn/read-symbolic-value","G__32342","js/Number.NaN","js/Number.NEGATIVE_INFINITY","js/Number.POSITIVE_INFINITY","cljs.tools.reader.impl.errors.reader_error","G__32393","cljs.tools.reader.impl.commons/read-comment","G__32405","cljs.tools.reader.impl.commons/throwing-reader","tag","object","cljs.core/Symbol","cljs.tools.reader.impl.errors/throw-bad-reader-tag","f","cljs.core.get","cljs.tools.reader/default-data-readers","cljs.tools.reader.impl.errors/throw-unknown-reader-tag","G__32447","p__32487","map__32490","cljs.core/hash-map","cljs.tools.reader.edn.read","eof","eof-error?","cljs.core/contains?","e32513","cljs.tools.reader.impl.errors/throw-eof-error","cljs.tools.reader.impl.commons/number-literal?","res","e","cljs.tools.reader.impl.utils/ex-info?","cljs.core/ex-data","cljs.core.ex_info","cljs.tools.reader.reader-types/get-file-name","G__32533","cljs.tools.reader.edn/read-string","cljs.tools.reader.edn.read_string","cljs.core.not_EQ_","cljs.tools.reader.reader_types.string_push_back_reader"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"An EDN reader in clojure\"\n      :author \"Bronsa\"}\n  cljs.tools.reader.edn\n  (:refer-clojure :exclude [read read-string char default-data-readers])\n  (:require [cljs.tools.reader.impl.errors :as err]\n            [cljs.tools.reader.reader-types :refer\n             [read-char unread peek-char indexing-reader?\n              get-line-number get-column-number get-file-name string-push-back-reader]]\n            [cljs.tools.reader.impl.utils :refer\n             [char ex-info? whitespace? numeric? desugar-meta namespace-keys second' char-code]]\n            [cljs.tools.reader.impl.commons :refer\n             [number-literal? read-past match-number parse-symbol read-comment throwing-reader]]\n            [cljs.tools.reader :refer [default-data-readers]]\n            [goog.string :as gstring])\n  (:import goog.string.StringBuffer))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; helpers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare read macros dispatch-macros)\n\n(defn- ^boolean macro-terminating? [ch]\n  (and (not (identical? \\# ch))\n       (not (identical? \\' ch))\n       (not (identical? \\: ch))\n       (macros ch)))\n\n(defn- ^boolean not-constituent? [ch]\n  (or (identical? \\@ ch)\n      (identical? \\` ch)\n      (identical? \\~ ch)))\n\n(defn- read-token\n  ([rdr kind initch]\n     (read-token rdr kind initch true))\n  ([rdr kind initch validate-leading?]\n     (cond\n      (not initch)\n      (err/throw-eof-at-start rdr kind)\n\n      (and validate-leading?\n           (not-constituent? initch))\n      (err/throw-bad-char rdr kind initch)\n\n      :else\n      (loop [sb (StringBuffer.)\n             ch (do (unread rdr initch) initch)]\n        (if (or (whitespace? ch)\n                (macro-terminating? ch)\n                (nil? ch))\n          (str sb)\n          (if (not-constituent? ch)\n            (err/throw-bad-char rdr kind ch)\n            (recur (doto sb (.append (read-char rdr))) (peek-char rdr))))))))\n\n(declare read-tagged)\n\n(defn- read-dispatch\n  [rdr _ opts]\n  (if-let [ch (read-char rdr)]\n    (if-let [dm (dispatch-macros ch)]\n      (dm rdr ch opts)\n      (if-let [obj (read-tagged (doto rdr (unread ch)) ch opts)]\n        obj\n        (err/throw-no-dispatch rdr ch)))\n    (err/throw-eof-at-dispatch rdr)))\n\n(defn- read-unmatched-delimiter\n  [rdr ch opts]\n  (err/throw-unmatch-delimiter rdr ch))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; readers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- read-unicode-char\n  ([token offset length base]\n     (let [l (+ offset length)]\n       (when-not (== (count token) l)\n         (err/throw-invalid-unicode-literal nil token))\n       (loop [i offset uc 0]\n         (if (== i l)\n           (js/String.fromCharCode uc)\n           (let [d (char-code (nth token i) base)]\n             (if (== d -1)\n               (err/throw-invalid-unicode-digit-in-token nil (nth token i) token)\n               (recur (inc i) (+ d (* uc base)))))))))\n\n  ([rdr initch base length exact?]\n     (loop [i 1 uc (char-code initch base)]\n       (if (== uc -1)\n         (err/throw-invalid-unicode-digit rdr initch)\n         (if-not (== i length)\n           (let [ch (peek-char rdr)]\n             (if (or (whitespace? ch)\n                     (macros ch)\n                     (nil? ch))\n               (if exact?\n                 (err/throw-invalid-unicode-len rdr i length)\n                 (js/String.fromCharCode uc))\n               (let [d (char-code ch base)]\n                 (read-char rdr)\n                 (if (== d -1)\n                   (err/throw-invalid-unicode-digit rdr ch)\n                   (recur (inc i) (+ d (* uc base)))))))\n           (js/String.fromCharCode uc))))))\n\n(def ^:private ^:const upper-limit (.charCodeAt \\uD7ff 0))\n(def ^:private ^:const lower-limit (.charCodeAt \\uE000 0))\n\n(defn- read-char*\n  [rdr backslash opts]\n  (let [ch (read-char rdr)]\n    (if-not (nil? ch)\n      (let [token (if (or (macro-terminating? ch)\n                          (not-constituent? ch)\n                          (whitespace? ch))\n                    (str ch)\n                    (read-token rdr :character ch false))\n            token-len (count token)]\n        (cond\n\n         (== 1 token-len)  (nth token 0)\n\n         (identical? token \"newline\") \\newline\n         (identical? token \"space\") \\space\n         (identical? token \"tab\") \\tab\n         (identical? token \"backspace\") \\backspace\n         (identical? token \"formfeed\") \\formfeed\n         (identical? token \"return\") \\return\n\n         (gstring/startsWith token \"u\")\n         (let [c (read-unicode-char token 1 4 16)\n               ic (.charCodeAt c)]\n           (if (and (> ic upper-limit)\n                    (< ic lower-limit))\n             (err/throw-invalid-character-literal rdr (.toString ic 16))\n             c))\n\n         (gstring/startsWith token \"o\")\n         (let [len (dec token-len)]\n           (if (> len 3)\n             (err/throw-invalid-octal-len rdr token)\n             (let [uc (read-unicode-char token 1 len 8)]\n               (if (> (int uc) 0377)\n                 (err/throw-bad-octal-number rdr)\n                 uc))))\n\n         :else (err/throw-unsupported-character rdr token)))\n      (err/throw-eof-in-character rdr))))\n\n(defn ^:private starting-line-col-info [rdr]\n  (when (indexing-reader? rdr)\n    [(get-line-number rdr) (int (dec (int (get-column-number rdr))))]))\n\n(defn- read-delimited\n  [kind delim rdr opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        delim (char delim)]\n    (loop [a (transient [])]\n      (let [ch (read-past whitespace? rdr)]\n        (when-not ch\n          (err/throw-eof-delimited rdr kind start-line start-column (count a)))\n        (if (= delim (char ch))\n          (persistent! a)\n          (if-let [macrofn (macros ch)]\n            (let [mret (macrofn rdr ch opts)]\n              (recur (if-not (identical? mret rdr) (conj! a mret) a)))\n            (let [o (read (doto rdr (unread ch)) true nil opts)]\n              (recur (if-not (identical? o rdr) (conj! a o) a)))))))))\n\n(defn- read-list\n  [rdr _ opts]\n  (let [the-list (read-delimited :list \\) rdr opts)]\n    (if (empty? the-list)\n      '()\n      (apply list the-list))))\n\n(defn- read-vector\n  [rdr _ opts]\n  (read-delimited :vector \\] rdr opts))\n\n\n(defn- read-map\n  [rdr _ opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        the-map (read-delimited :map \\} rdr opts)\n        map-count (count the-map)\n        ks (take-nth 2 the-map)\n        key-set (set ks)]\n    (when (odd? map-count)\n      (err/throw-odd-map rdr start-line start-column the-map))\n    (when-not (= (count key-set) (count ks))\n      (err/throw-dup-keys rdr :map ks))\n    (if (<= map-count (* 2 (.-HASHMAP-THRESHOLD cljs.core/PersistentArrayMap)))\n      (.fromArray cljs.core/PersistentArrayMap (to-array the-map) true true)\n      (.fromArray cljs.core/PersistentHashMap (to-array the-map) true))))\n\n(defn- read-number\n  [rdr initch opts]\n  (loop [sb (doto (StringBuffer.) (.append initch))\n         ch (read-char rdr)]\n    (if (or (whitespace? ch) (macros ch) (nil? ch))\n      (let [s (str sb)]\n        (unread rdr ch)\n        (or (match-number s)\n            (err/throw-invalid-number rdr s)))\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- escape-char [sb rdr]\n  (let [ch (read-char rdr)]\n    (case ch\n      \\t \"\\t\"\n      \\r \"\\r\"\n      \\n \"\\n\"\n      \\\\ \"\\\\\"\n      \\\" \"\\\"\"\n      \\b \"\\b\"\n      \\f \"\\f\"\n      \\u (let [ch (read-char rdr)]\n           (if (== -1 (js/parseInt (int ch) 16))\n             (err/throw-invalid-unicode-escape rdr ch)\n             (read-unicode-char rdr ch 16 4 true)))\n      (if (numeric? ch)\n        (let [ch (read-unicode-char rdr ch 8 3 false)]\n          (if (> (int ch) 0377)\n            (err/throw-bad-octal-number rdr)\n            ch))\n        (err/throw-bad-escape-char rdr ch)))))\n\n(defn- read-string*\n  [rdr _ opts]\n  (loop [sb (StringBuffer.)\n         ch (read-char rdr)]\n    (case ch\n      nil (err/throw-eof-reading rdr :string \\\" sb)\n      \\\\ (recur (doto sb (.append (escape-char sb rdr)))\n                (read-char rdr))\n      \\\" (str sb)\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- read-symbol\n  [rdr initch]\n  (when-let [token (read-token rdr :symbol initch)]\n    (case token\n\n      ;; special symbols\n      \"nil\" nil\n      \"true\" true\n      \"false\" false\n      \"/\" '/\n\n      (or (when-let [p (parse-symbol token)]\n            (symbol (p 0) (p 1)))\n          (err/throw-invalid rdr :symbol token)))))\n\n(defn- read-keyword\n  [reader initch opts]\n  (let [ch (read-char reader)]\n    (if-not (whitespace? ch)\n      (let [token (read-token reader :keyword ch)\n            s (parse-symbol token)]\n        (if (and s (== -1 (.indexOf token \"::\")))\n          (let [ns (s 0)\n                name (s 1)]\n            (if (identical? \\: (nth token 0))\n              (err/throw-invalid reader :keyword token) ;; no ::keyword in edn\n              (keyword ns name)))\n          (err/throw-invalid reader :keyword token)))\n      (err/throw-single-colon reader))))\n\n(defn- wrapping-reader\n  [sym]\n  (fn [rdr _ opts]\n    (list sym (read rdr true nil opts))))\n\n(defn- read-meta\n  [rdr _ opts]\n  (let [m (desugar-meta (read rdr true nil opts))]\n    (when-not (map? m)\n      (err/throw-bad-metadata rdr m))\n    (let [o (read rdr true nil opts)]\n      (if (implements? IMeta o)\n        (with-meta o (merge (meta o) m))\n        (err/throw-bad-metadata-target rdr o)))))\n\n(defn- read-set\n  [rdr _ opts]\n  (let [coll (read-delimited :set \\} rdr opts)\n        the-set (set coll)]\n      (when-not (= (count coll) (count the-set))\n        (err/throw-dup-keys rdr :set coll))\n      the-set))\n\n(defn- read-discard\n  [rdr _ opts]\n  (doto rdr\n    (read true nil true)))\n\n(defn- read-namespaced-map\n  [rdr _ opts]\n  (let [token (read-token rdr :namespaced-map (read-char rdr))]\n    (if-let [ns (some-> token parse-symbol second')]\n      (let [ch (read-past whitespace? rdr)]\n        (if (identical? ch \\{)\n          (let [items (read-delimited :namespaced-map \\} rdr opts)]\n            (when (odd? (count items))\n              (err/throw-odd-map rdr nil nil items))\n            (let [keys (namespace-keys (str ns) (take-nth 2 items))\n                  vals (take-nth 2 (rest items))]\n              (when-not (= (count (set keys)) (count keys))\n                (err/throw-dup-keys rdr :namespaced-map keys))\n              (zipmap keys vals)))\n          (err/throw-ns-map-no-map rdr token)))\n      (err/throw-bad-ns rdr token))))\n\n(defn- read-symbolic-value\n  [rdr _ opts]\n  (let [sym (read rdr true nil opts)]\n    (case sym\n\n      NaN js/Number.NaN\n      -Inf js/Number.NEGATIVE_INFINITY\n      Inf js/Number.POSITIVE_INFINITY\n\n      (err/reader-error rdr (str \"Invalid token: ##\" sym)))))\n\n(defn- macros [ch]\n  (case ch\n    \\\" read-string*\n    \\: read-keyword\n    \\; read-comment\n    \\^ read-meta\n    \\( read-list\n    \\) read-unmatched-delimiter\n    \\[ read-vector\n    \\] read-unmatched-delimiter\n    \\{ read-map\n    \\} read-unmatched-delimiter\n    \\\\ read-char*\n    \\# read-dispatch\n    nil))\n\n(defn- dispatch-macros [ch]\n  (case ch\n    \\^ read-meta                ;deprecated\n    \\{ read-set\n    \\< (throwing-reader \"Unreadable form\")\n    \\! read-comment\n    \\_ read-discard\n    \\: read-namespaced-map\n    \\# read-symbolic-value\n    nil))\n\n(defn- read-tagged [rdr initch opts]\n  (let [tag (read rdr true nil opts)\n        object (read rdr true nil opts)]\n    (if-not (symbol? tag)\n      (err/throw-bad-reader-tag rdr \"Reader tag must be a symbol\"))\n    (if-let [f (or (get (:readers opts) tag)\n                   (default-data-readers tag))]\n      (f object)\n      (if-let [d (:default opts)]\n        (d tag object)\n        (err/throw-unknown-reader-tag rdr tag)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Public API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn read\n  \"Reads the first object from an IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   clojure.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.\"\n  ([reader] (read {} reader))\n  ([{:keys [eof] :as opts} reader]\n     (let [eof-error? (not (contains? opts :eof))]\n       (read reader eof-error? eof opts)))\n  ([reader eof-error? eof opts]\n     (try\n       (loop []\n         (let [ch (read-char reader)]\n           (cond\n            (whitespace? ch) (recur)\n            (nil? ch) (if eof-error? (err/throw-eof-error reader nil) eof)\n            (number-literal? reader ch) (read-number reader ch opts)\n            :else (let [f (macros ch)]\n                    (if f\n                      (let [res (f reader ch opts)]\n                        (if (identical? res reader)\n                          (recur)\n                          res))\n                      (read-symbol reader ch))))))\n       (catch js/Error e\n         (if (ex-info? e)\n           (let [d (ex-data e)]\n             (if (= :reader-exception (:type d))\n               (throw e)\n               (throw (ex-info (.-message e)\n                               (merge {:type :reader-exception}\n                                      d\n                                      (if (indexing-reader? reader)\n                                        {:line   (get-line-number reader)\n                                         :column (get-column-number reader)\n                                         :file   (get-file-name reader)}))\n                               e))))\n           (throw (ex-info (.-message e)\n                           (merge {:type :reader-exception}\n                                  (if (indexing-reader? reader)\n                                    {:line   (get-line-number reader)\n                                     :column (get-column-number reader)\n                                     :file   (get-file-name reader)}))\n                           e)))))))\n\n(defn read-string\n  \"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per clojure.tools.reader.edn/read\"\n  ([s] (read-string {:eof nil} s))\n  ([opts s]\n     (when (and s (not= s \"\"))\n       (read opts (string-push-back-reader s)))))\n"]}