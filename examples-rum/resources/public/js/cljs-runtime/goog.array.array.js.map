{
"version":3,
"file":"goog.array.array.js",
"lineCount":969,
"mappings":"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",
"sources":["goog/array/array.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for manipulating arrays.\n *\n * @author arv@google.com (Erik Arvidsson)\n */\n\n\ngoog.provide('goog.array');\n\ngoog.require('goog.asserts');\n\n\n/**\n * @define {boolean} NATIVE_ARRAY_PROTOTYPES indicates whether the code should\n * rely on Array.prototype functions, if available.\n *\n * The Array.prototype functions can be defined by external libraries like\n * Prototype and setting this flag to false forces closure to use its own\n * goog.array implementation.\n *\n * If your javascript can be loaded by a third party site and you are wary about\n * relying on the prototype functions, specify\n * \"--define goog.NATIVE_ARRAY_PROTOTYPES=false\" to the JSCompiler.\n *\n * Setting goog.TRUSTED_SITE to false will automatically set\n * NATIVE_ARRAY_PROTOTYPES to false.\n */\ngoog.NATIVE_ARRAY_PROTOTYPES =\n    goog.define('goog.NATIVE_ARRAY_PROTOTYPES', goog.TRUSTED_SITE);\n\n\n/**\n * @define {boolean} If true, JSCompiler will use the native implementation of\n * array functions where appropriate (e.g., `Array#filter`) and remove the\n * unused pure JS implementation.\n */\ngoog.array.ASSUME_NATIVE_FUNCTIONS = goog.define(\n    'goog.array.ASSUME_NATIVE_FUNCTIONS', goog.FEATURESET_YEAR > 2012);\n\n\n/**\n * Returns the last element in an array without removing it.\n * Same as goog.array.last.\n * @param {IArrayLike<T>|string} array The array.\n * @return {T} Last item in array.\n * @template T\n */\ngoog.array.peek = function(array) {\n  return array[array.length - 1];\n};\n\n\n/**\n * Returns the last element in an array without removing it.\n * Same as goog.array.peek.\n * @param {IArrayLike<T>|string} array The array.\n * @return {T} Last item in array.\n * @template T\n */\ngoog.array.last = goog.array.peek;\n\n// NOTE(arv): Since most of the array functions are generic it allows you to\n// pass an array-like object. Strings have a length and are considered array-\n// like. However, the 'in' operator does not work on strings so we cannot just\n// use the array path even if the browser supports indexing into strings. We\n// therefore end up splitting the string.\n\n\n/**\n * Returns the index of the first element of an array with a specified value, or\n * -1 if the element is not present in the array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-indexof}\n *\n * @param {IArrayLike<T>|string} arr The array to be searched.\n * @param {T} obj The object for which we are searching.\n * @param {number=} opt_fromIndex The index at which to start the search. If\n *     omitted the search starts at index 0.\n * @return {number} The index of the first matching array element.\n * @template T\n */\ngoog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ?\n    function(arr, obj, opt_fromIndex) {\n      goog.asserts.assert(arr.length != null);\n\n      return Array.prototype.indexOf.call(arr, obj, opt_fromIndex);\n    } :\n    function(arr, obj, opt_fromIndex) {\n      var fromIndex = opt_fromIndex == null ?\n          0 :\n          (opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) :\n                               opt_fromIndex);\n\n      if (typeof arr === 'string') {\n        // Array.prototype.indexOf uses === so only strings should be found.\n        if (typeof obj !== 'string' || obj.length != 1) {\n          return -1;\n        }\n        return arr.indexOf(obj, fromIndex);\n      }\n\n      for (var i = fromIndex; i < arr.length; i++) {\n        if (i in arr && arr[i] === obj) return i;\n      }\n      return -1;\n    };\n\n\n/**\n * Returns the index of the last element of an array with a specified value, or\n * -1 if the element is not present in the array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-lastindexof}\n *\n * @param {!IArrayLike<T>|string} arr The array to be searched.\n * @param {T} obj The object for which we are searching.\n * @param {?number=} opt_fromIndex The index at which to start the search. If\n *     omitted the search starts at the end of the array.\n * @return {number} The index of the last matching array element.\n * @template T\n */\ngoog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ?\n    function(arr, obj, opt_fromIndex) {\n      goog.asserts.assert(arr.length != null);\n\n      // Firefox treats undefined and null as 0 in the fromIndex argument which\n      // leads it to always return -1\n      var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;\n      return Array.prototype.lastIndexOf.call(arr, obj, fromIndex);\n    } :\n    function(arr, obj, opt_fromIndex) {\n      var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;\n\n      if (fromIndex < 0) {\n        fromIndex = Math.max(0, arr.length + fromIndex);\n      }\n\n      if (typeof arr === 'string') {\n        // Array.prototype.lastIndexOf uses === so only strings should be found.\n        if (typeof obj !== 'string' || obj.length != 1) {\n          return -1;\n        }\n        return arr.lastIndexOf(obj, fromIndex);\n      }\n\n      for (var i = fromIndex; i >= 0; i--) {\n        if (i in arr && arr[i] === obj) return i;\n      }\n      return -1;\n    };\n\n\n/**\n * Calls a function for each element in an array. Skips holes in the array.\n * See {@link http://tinyurl.com/developer-mozilla-org-array-foreach}\n *\n * @param {IArrayLike<T>|string} arr Array or array like object over\n *     which to iterate.\n * @param {?function(this: S, T, number, ?): ?} f The function to call for every\n *     element. This function takes 3 arguments (the element, the index and the\n *     array). The return value is ignored.\n * @param {S=} opt_obj The object to be used as the value of 'this' within f.\n * @template T,S\n */\ngoog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length != null);\n\n      Array.prototype.forEach.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l = arr.length;  // must be fixed during loop... see docs\n      var arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (var i = 0; i < l; i++) {\n        if (i in arr2) {\n          f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);\n        }\n      }\n    };\n\n\n/**\n * Calls a function for each element in an array, starting from the last\n * element rather than the first.\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this: S, T, number, ?): ?} f The function to call for every\n *     element. This function\n *     takes 3 arguments (the element, the index and the array). The return\n *     value is ignored.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @template T,S\n */\ngoog.array.forEachRight = function(arr, f, opt_obj) {\n  var l = arr.length;  // must be fixed during loop... see docs\n  var arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n  for (var i = l - 1; i >= 0; --i) {\n    if (i in arr2) {\n      f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);\n    }\n  }\n};\n\n\n/**\n * Calls a function for each element in an array, and if the function returns\n * true adds the element to a new array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-filter}\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?):boolean} f The function to call for\n *     every element. This function\n *     takes 3 arguments (the element, the index and the array) and must\n *     return a Boolean. If the return value is true the element is added to the\n *     result array. If it is false the element is not included.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {!Array<T>} a new array in which only elements that passed the test\n *     are present.\n * @template T,S\n */\ngoog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length != null);\n\n      return Array.prototype.filter.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l = arr.length;  // must be fixed during loop... see docs\n      var res = [];\n      var resLength = 0;\n      var arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (var i = 0; i < l; i++) {\n        if (i in arr2) {\n          var val = arr2[i];  // in case f mutates arr2\n          if (f.call(/** @type {?} */ (opt_obj), val, i, arr)) {\n            res[resLength++] = val;\n          }\n        }\n      }\n      return res;\n    };\n\n\n/**\n * Calls a function for each element in an array and inserts the result into a\n * new array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-map}\n *\n * @param {IArrayLike<VALUE>|string} arr Array or array like object\n *     over which to iterate.\n * @param {function(this:THIS, VALUE, number, ?): RESULT} f The function to call\n *     for every element. This function takes 3 arguments (the element,\n *     the index and the array) and should return something. The result will be\n *     inserted into a new array.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within f.\n * @return {!Array<RESULT>} a new array with the results from f.\n * @template THIS, VALUE, RESULT\n */\ngoog.array.map = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length != null);\n\n      return Array.prototype.map.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l = arr.length;  // must be fixed during loop... see docs\n      var res = new Array(l);\n      var arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (var i = 0; i < l; i++) {\n        if (i in arr2) {\n          res[i] = f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);\n        }\n      }\n      return res;\n    };\n\n\n/**\n * Passes every element of an array into a function and accumulates the result.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-reduce}\n *\n * For example:\n * var a = [1, 2, 3, 4];\n * goog.array.reduce(a, function(r, v, i, arr) {return r + v;}, 0);\n * returns 10\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {function(this:S, R, T, number, ?) : R} f The function to call for\n *     every element. This function\n *     takes 4 arguments (the function's previous result or the initial value,\n *     the value of the current array element, the current array index, and the\n *     array itself)\n *     function(previousValue, currentValue, index, array).\n * @param {?} val The initial value to pass into the function on the first call.\n * @param {S=} opt_obj  The object to be used as the value of 'this'\n *     within f.\n * @return {R} Result of evaluating f repeatedly across the values of the array.\n * @template T,S,R\n */\ngoog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ?\n    function(arr, f, val, opt_obj) {\n      goog.asserts.assert(arr.length != null);\n      if (opt_obj) {\n        f = goog.bind(f, opt_obj);\n      }\n      return Array.prototype.reduce.call(arr, f, val);\n    } :\n    function(arr, f, val, opt_obj) {\n      var rval = val;\n      goog.array.forEach(arr, function(val, index) {\n        rval = f.call(/** @type {?} */ (opt_obj), rval, val, index, arr);\n      });\n      return rval;\n    };\n\n\n/**\n * Passes every element of an array into a function and accumulates the result,\n * starting from the last element and working towards the first.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-reduceright}\n *\n * For example:\n * var a = ['a', 'b', 'c'];\n * goog.array.reduceRight(a, function(r, v, i, arr) {return r + v;}, '');\n * returns 'cba'\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, R, T, number, ?) : R} f The function to call for\n *     every element. This function\n *     takes 4 arguments (the function's previous result or the initial value,\n *     the value of the current array element, the current array index, and the\n *     array itself)\n *     function(previousValue, currentValue, index, array).\n * @param {?} val The initial value to pass into the function on the first call.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {R} Object returned as a result of evaluating f repeatedly across the\n *     values of the array.\n * @template T,S,R\n */\ngoog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ?\n    function(arr, f, val, opt_obj) {\n      goog.asserts.assert(arr.length != null);\n      goog.asserts.assert(f != null);\n      if (opt_obj) {\n        f = goog.bind(f, opt_obj);\n      }\n      return Array.prototype.reduceRight.call(arr, f, val);\n    } :\n    function(arr, f, val, opt_obj) {\n      var rval = val;\n      goog.array.forEachRight(arr, function(val, index) {\n        rval = f.call(/** @type {?} */ (opt_obj), rval, val, index, arr);\n      });\n      return rval;\n    };\n\n\n/**\n * Calls f for each element of an array. If any call returns true, some()\n * returns true (without checking the remaining elements). If all calls\n * return false, some() returns false.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-some}\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S=} opt_obj  The object to be used as the value of 'this'\n *     within f.\n * @return {boolean} true if any element passes the test.\n * @template T,S\n */\ngoog.array.some = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length != null);\n\n      return Array.prototype.some.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l = arr.length;  // must be fixed during loop... see docs\n      var arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (var i = 0; i < l; i++) {\n        if (i in arr2 && f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n\n/**\n * Call f for each element of an array. If all calls return true, every()\n * returns true. If any call returns false, every() returns false and\n * does not continue to check the remaining elements.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-every}\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {boolean} false if any element fails the test.\n * @template T,S\n */\ngoog.array.every = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length != null);\n\n      return Array.prototype.every.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l = arr.length;  // must be fixed during loop... see docs\n      var arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (var i = 0; i < l; i++) {\n        if (i in arr2 && !f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n\n/**\n * Counts the array elements that fulfill the predicate, i.e. for which the\n * callback function returns true. Skips holes in the array.\n *\n * @param {!IArrayLike<T>|string} arr Array or array like object\n *     over which to iterate.\n * @param {function(this: S, T, number, ?): boolean} f The function to call for\n *     every element. Takes 3 arguments (the element, the index and the array).\n * @param {S=} opt_obj The object to be used as the value of 'this' within f.\n * @return {number} The number of the matching elements.\n * @template T,S\n */\ngoog.array.count = function(arr, f, opt_obj) {\n  var count = 0;\n  goog.array.forEach(arr, function(element, index, arr) {\n    if (f.call(/** @type {?} */ (opt_obj), element, index, arr)) {\n      ++count;\n    }\n  }, opt_obj);\n  return count;\n};\n\n\n/**\n * Search an array for the first element that satisfies a given condition and\n * return that element.\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {T|null} The first array element that passes the test, or null if no\n *     element is found.\n * @template T,S\n */\ngoog.array.find = function(arr, f, opt_obj) {\n  var i = goog.array.findIndex(arr, f, opt_obj);\n  return i < 0 ? null : typeof arr === 'string' ? arr.charAt(i) : arr[i];\n};\n\n\n/**\n * Search an array for the first element that satisfies a given condition and\n * return its index.\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {number} The index of the first array element that passes the test,\n *     or -1 if no element is found.\n * @template T,S\n */\ngoog.array.findIndex = function(arr, f, opt_obj) {\n  var l = arr.length;  // must be fixed during loop... see docs\n  var arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n  for (var i = 0; i < l; i++) {\n    if (i in arr2 && f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n/**\n * Search an array (in reverse order) for the last element that satisfies a\n * given condition and return that element.\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {T|null} The last array element that passes the test, or null if no\n *     element is found.\n * @template T,S\n */\ngoog.array.findRight = function(arr, f, opt_obj) {\n  var i = goog.array.findIndexRight(arr, f, opt_obj);\n  return i < 0 ? null : typeof arr === 'string' ? arr.charAt(i) : arr[i];\n};\n\n\n/**\n * Search an array (in reverse order) for the last element that satisfies a\n * given condition and return its index.\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {number} The index of the last array element that passes the test,\n *     or -1 if no element is found.\n * @template T,S\n */\ngoog.array.findIndexRight = function(arr, f, opt_obj) {\n  var l = arr.length;  // must be fixed during loop... see docs\n  var arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n  for (var i = l - 1; i >= 0; i--) {\n    if (i in arr2 && f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n/**\n * Whether the array contains the given object.\n * @param {IArrayLike<?>|string} arr The array to test for the presence of the\n *     element.\n * @param {*} obj The object for which to test.\n * @return {boolean} true if obj is present.\n */\ngoog.array.contains = function(arr, obj) {\n  return goog.array.indexOf(arr, obj) >= 0;\n};\n\n\n/**\n * Whether the array is empty.\n * @param {IArrayLike<?>|string} arr The array to test.\n * @return {boolean} true if empty.\n */\ngoog.array.isEmpty = function(arr) {\n  return arr.length == 0;\n};\n\n\n/**\n * Clears the array.\n * @param {IArrayLike<?>} arr Array or array like object to clear.\n */\ngoog.array.clear = function(arr) {\n  // For non real arrays we don't have the magic length so we delete the\n  // indices.\n  if (!goog.isArray(arr)) {\n    for (var i = arr.length - 1; i >= 0; i--) {\n      delete arr[i];\n    }\n  }\n  arr.length = 0;\n};\n\n\n/**\n * Pushes an item into an array, if it's not already in the array.\n * @param {Array<T>} arr Array into which to insert the item.\n * @param {T} obj Value to add.\n * @template T\n */\ngoog.array.insert = function(arr, obj) {\n  if (!goog.array.contains(arr, obj)) {\n    arr.push(obj);\n  }\n};\n\n\n/**\n * Inserts an object at the given index of the array.\n * @param {IArrayLike<?>} arr The array to modify.\n * @param {*} obj The object to insert.\n * @param {number=} opt_i The index at which to insert the object. If omitted,\n *      treated as 0. A negative index is counted from the end of the array.\n */\ngoog.array.insertAt = function(arr, obj, opt_i) {\n  goog.array.splice(arr, opt_i, 0, obj);\n};\n\n\n/**\n * Inserts at the given index of the array, all elements of another array.\n * @param {IArrayLike<?>} arr The array to modify.\n * @param {IArrayLike<?>} elementsToAdd The array of elements to add.\n * @param {number=} opt_i The index at which to insert the object. If omitted,\n *      treated as 0. A negative index is counted from the end of the array.\n */\ngoog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {\n  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);\n};\n\n\n/**\n * Inserts an object into an array before a specified object.\n * @param {Array<T>} arr The array to modify.\n * @param {T} obj The object to insert.\n * @param {T=} opt_obj2 The object before which obj should be inserted. If obj2\n *     is omitted or not found, obj is inserted at the end of the array.\n * @template T\n */\ngoog.array.insertBefore = function(arr, obj, opt_obj2) {\n  var i;\n  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {\n    arr.push(obj);\n  } else {\n    goog.array.insertAt(arr, obj, i);\n  }\n};\n\n\n/**\n * Removes the first occurrence of a particular value from an array.\n * @param {IArrayLike<T>} arr Array from which to remove\n *     value.\n * @param {T} obj Object to remove.\n * @return {boolean} True if an element was removed.\n * @template T\n */\ngoog.array.remove = function(arr, obj) {\n  var i = goog.array.indexOf(arr, obj);\n  var rv;\n  if ((rv = i >= 0)) {\n    goog.array.removeAt(arr, i);\n  }\n  return rv;\n};\n\n\n/**\n * Removes the last occurrence of a particular value from an array.\n * @param {!IArrayLike<T>} arr Array from which to remove value.\n * @param {T} obj Object to remove.\n * @return {boolean} True if an element was removed.\n * @template T\n */\ngoog.array.removeLast = function(arr, obj) {\n  var i = goog.array.lastIndexOf(arr, obj);\n  if (i >= 0) {\n    goog.array.removeAt(arr, i);\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Removes from an array the element at index i\n * @param {IArrayLike<?>} arr Array or array like object from which to\n *     remove value.\n * @param {number} i The index to remove.\n * @return {boolean} True if an element was removed.\n */\ngoog.array.removeAt = function(arr, i) {\n  goog.asserts.assert(arr.length != null);\n\n  // use generic form of splice\n  // splice returns the removed items and if successful the length of that\n  // will be 1\n  return Array.prototype.splice.call(arr, i, 1).length == 1;\n};\n\n\n/**\n * Removes the first value that satisfies the given condition.\n * @param {IArrayLike<T>} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {boolean} True if an element was removed.\n * @template T,S\n */\ngoog.array.removeIf = function(arr, f, opt_obj) {\n  var i = goog.array.findIndex(arr, f, opt_obj);\n  if (i >= 0) {\n    goog.array.removeAt(arr, i);\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Removes all values that satisfy the given condition.\n * @param {IArrayLike<T>} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {number} The number of items removed\n * @template T,S\n */\ngoog.array.removeAllIf = function(arr, f, opt_obj) {\n  var removedCount = 0;\n  goog.array.forEachRight(arr, function(val, index) {\n    if (f.call(/** @type {?} */ (opt_obj), val, index, arr)) {\n      if (goog.array.removeAt(arr, index)) {\n        removedCount++;\n      }\n    }\n  });\n  return removedCount;\n};\n\n\n/**\n * Returns a new array that is the result of joining the arguments.  If arrays\n * are passed then their items are added, however, if non-arrays are passed they\n * will be added to the return array as is.\n *\n * Note that ArrayLike objects will be added as is, rather than having their\n * items added.\n *\n * goog.array.concat([1, 2], [3, 4]) -> [1, 2, 3, 4]\n * goog.array.concat(0, [1, 2]) -> [0, 1, 2]\n * goog.array.concat([1, 2], null) -> [1, 2, null]\n *\n * There is bug in all current versions of IE (6, 7 and 8) where arrays created\n * in an iframe become corrupted soon (not immediately) after the iframe is\n * destroyed. This is common if loading data via goog.net.IframeIo, for example.\n * This corruption only affects the concat method which will start throwing\n * Catastrophic Errors (#-2147418113).\n *\n * See http://endoflow.com/scratch/corrupted-arrays.html for a test case.\n *\n * Internally goog.array should use this, so that all methods will continue to\n * work on these broken array objects.\n *\n * @param {...*} var_args Items to concatenate.  Arrays will have each item\n *     added, while primitives and objects will be added as is.\n * @return {!Array<?>} The new resultant array.\n */\ngoog.array.concat = function(var_args) {\n  return Array.prototype.concat.apply([], arguments);\n};\n\n\n/**\n * Returns a new array that contains the contents of all the arrays passed.\n * @param {...!Array<T>} var_args\n * @return {!Array<T>}\n * @template T\n */\ngoog.array.join = function(var_args) {\n  return Array.prototype.concat.apply([], arguments);\n};\n\n\n/**\n * Converts an object to an array.\n * @param {IArrayLike<T>|string} object  The object to convert to an\n *     array.\n * @return {!Array<T>} The object converted into an array. If object has a\n *     length property, every property indexed with a non-negative number\n *     less than length will be included in the result. If object does not\n *     have a length property, an empty array will be returned.\n * @template T\n */\ngoog.array.toArray = function(object) {\n  var length = object.length;\n\n  // If length is not a number the following is false. This case is kept for\n  // backwards compatibility since there are callers that pass objects that are\n  // not array like.\n  if (length > 0) {\n    var rv = new Array(length);\n    for (var i = 0; i < length; i++) {\n      rv[i] = object[i];\n    }\n    return rv;\n  }\n  return [];\n};\n\n\n/**\n * Does a shallow copy of an array.\n * @param {IArrayLike<T>|string} arr  Array or array-like object to\n *     clone.\n * @return {!Array<T>} Clone of the input array.\n * @template T\n */\ngoog.array.clone = goog.array.toArray;\n\n\n/**\n * Extends an array with another array, element, or \"array like\" object.\n * This function operates 'in-place', it does not create a new Array.\n *\n * Example:\n * var a = [];\n * goog.array.extend(a, [0, 1]);\n * a; // [0, 1]\n * goog.array.extend(a, 2);\n * a; // [0, 1, 2]\n *\n * @param {Array<VALUE>} arr1  The array to modify.\n * @param {...(IArrayLike<VALUE>|VALUE)} var_args The elements or arrays of\n *     elements to add to arr1.\n * @template VALUE\n */\ngoog.array.extend = function(arr1, var_args) {\n  for (var i = 1; i < arguments.length; i++) {\n    var arr2 = arguments[i];\n    if (goog.isArrayLike(arr2)) {\n      var len1 = arr1.length || 0;\n      var len2 = arr2.length || 0;\n      arr1.length = len1 + len2;\n      for (var j = 0; j < len2; j++) {\n        arr1[len1 + j] = arr2[j];\n      }\n    } else {\n      arr1.push(arr2);\n    }\n  }\n};\n\n\n/**\n * Adds or removes elements from an array. This is a generic version of Array\n * splice. This means that it might work on other objects similar to arrays,\n * such as the arguments object.\n *\n * @param {IArrayLike<T>} arr The array to modify.\n * @param {number|undefined} index The index at which to start changing the\n *     array. If not defined, treated as 0.\n * @param {number} howMany How many elements to remove (0 means no removal. A\n *     value below 0 is treated as zero and so is any other non number. Numbers\n *     are floored).\n * @param {...T} var_args Optional, additional elements to insert into the\n *     array.\n * @return {!Array<T>} the removed elements.\n * @template T\n */\ngoog.array.splice = function(arr, index, howMany, var_args) {\n  goog.asserts.assert(arr.length != null);\n\n  return Array.prototype.splice.apply(arr, goog.array.slice(arguments, 1));\n};\n\n\n/**\n * Returns a new array from a segment of an array. This is a generic version of\n * Array slice. This means that it might work on other objects similar to\n * arrays, such as the arguments object.\n *\n * @param {IArrayLike<T>|string} arr The array from\n * which to copy a segment.\n * @param {number} start The index of the first element to copy.\n * @param {number=} opt_end The index after the last element to copy.\n * @return {!Array<T>} A new array containing the specified segment of the\n *     original array.\n * @template T\n */\ngoog.array.slice = function(arr, start, opt_end) {\n  goog.asserts.assert(arr.length != null);\n\n  // passing 1 arg to slice is not the same as passing 2 where the second is\n  // null or undefined (in that case the second argument is treated as 0).\n  // we could use slice on the arguments object and then use apply instead of\n  // testing the length\n  if (arguments.length <= 2) {\n    return Array.prototype.slice.call(arr, start);\n  } else {\n    return Array.prototype.slice.call(arr, start, opt_end);\n  }\n};\n\n\n/**\n * Removes all duplicates from an array (retaining only the first\n * occurrence of each array element).  This function modifies the\n * array in place and doesn't change the order of the non-duplicate items.\n *\n * For objects, duplicates are identified as having the same unique ID as\n * defined by {@link goog.getUid}.\n *\n * Alternatively you can specify a custom hash function that returns a unique\n * value for each item in the array it should consider unique.\n *\n * Runtime: N,\n * Worstcase space: 2N (no dupes)\n *\n * @param {IArrayLike<T>} arr The array from which to remove\n *     duplicates.\n * @param {Array=} opt_rv An optional array in which to return the results,\n *     instead of performing the removal inplace.  If specified, the original\n *     array will remain unchanged.\n * @param {function(T):string=} opt_hashFn An optional function to use to\n *     apply to every item in the array. This function should return a unique\n *     value for each item in the array it should consider unique.\n * @template T\n */\ngoog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {\n  var returnArray = opt_rv || arr;\n  var defaultHashFn = function(item) {\n    // Prefix each type with a single character representing the type to\n    // prevent conflicting keys (e.g. true and 'true').\n    return goog.isObject(item) ? 'o' + goog.getUid(item) :\n                                 (typeof item).charAt(0) + item;\n  };\n  var hashFn = opt_hashFn || defaultHashFn;\n\n  var seen = {}, cursorInsert = 0, cursorRead = 0;\n  while (cursorRead < arr.length) {\n    var current = arr[cursorRead++];\n    var key = hashFn(current);\n    if (!Object.prototype.hasOwnProperty.call(seen, key)) {\n      seen[key] = true;\n      returnArray[cursorInsert++] = current;\n    }\n  }\n  returnArray.length = cursorInsert;\n};\n\n\n/**\n * Searches the specified array for the specified target using the binary\n * search algorithm.  If no opt_compareFn is specified, elements are compared\n * using <code>goog.array.defaultCompare</code>, which compares the elements\n * using the built in < and > operators.  This will produce the expected\n * behavior for homogeneous arrays of String(s) and Number(s). The array\n * specified <b>must</b> be sorted in ascending order (as defined by the\n * comparison function).  If the array is not sorted, results are undefined.\n * If the array contains multiple instances of the specified target value, the\n * left-most instance will be found.\n *\n * Runtime: O(log n)\n *\n * @param {IArrayLike<VALUE>} arr The array to be searched.\n * @param {TARGET} target The sought value.\n * @param {function(TARGET, VALUE): number=} opt_compareFn Optional comparison\n *     function by which the array is ordered. Should take 2 arguments to\n *     compare, the target value and an element from your array, and return a\n *     negative number, zero, or a positive number depending on whether the\n *     first argument is less than, equal to, or greater than the second.\n * @return {number} Lowest index of the target value if found, otherwise\n *     (-(insertion point) - 1). The insertion point is where the value should\n *     be inserted into arr to preserve the sorted property.  Return value >= 0\n *     iff target is found.\n * @template TARGET, VALUE\n */\ngoog.array.binarySearch = function(arr, target, opt_compareFn) {\n  return goog.array.binarySearch_(\n      arr, opt_compareFn || goog.array.defaultCompare, false /* isEvaluator */,\n      target);\n};\n\n\n/**\n * Selects an index in the specified array using the binary search algorithm.\n * The evaluator receives an element and determines whether the desired index\n * is before, at, or after it.  The evaluator must be consistent (formally,\n * goog.array.map(goog.array.map(arr, evaluator, opt_obj), goog.math.sign)\n * must be monotonically non-increasing).\n *\n * Runtime: O(log n)\n *\n * @param {IArrayLike<VALUE>} arr The array to be searched.\n * @param {function(this:THIS, VALUE, number, ?): number} evaluator\n *     Evaluator function that receives 3 arguments (the element, the index and\n *     the array). Should return a negative number, zero, or a positive number\n *     depending on whether the desired index is before, at, or after the\n *     element passed to it.\n * @param {THIS=} opt_obj The object to be used as the value of 'this'\n *     within evaluator.\n * @return {number} Index of the leftmost element matched by the evaluator, if\n *     such exists; otherwise (-(insertion point) - 1). The insertion point is\n *     the index of the first element for which the evaluator returns negative,\n *     or arr.length if no such element exists. The return value is non-negative\n *     iff a match is found.\n * @template THIS, VALUE\n */\ngoog.array.binarySelect = function(arr, evaluator, opt_obj) {\n  return goog.array.binarySearch_(\n      arr, evaluator, true /* isEvaluator */, undefined /* opt_target */,\n      opt_obj);\n};\n\n\n/**\n * Implementation of a binary search algorithm which knows how to use both\n * comparison functions and evaluators. If an evaluator is provided, will call\n * the evaluator with the given optional data object, conforming to the\n * interface defined in binarySelect. Otherwise, if a comparison function is\n * provided, will call the comparison function against the given data object.\n *\n * This implementation purposefully does not use goog.bind or goog.partial for\n * performance reasons.\n *\n * Runtime: O(log n)\n *\n * @param {IArrayLike<?>} arr The array to be searched.\n * @param {function(?, ?, ?): number | function(?, ?): number} compareFn\n *     Either an evaluator or a comparison function, as defined by binarySearch\n *     and binarySelect above.\n * @param {boolean} isEvaluator Whether the function is an evaluator or a\n *     comparison function.\n * @param {?=} opt_target If the function is a comparison function, then\n *     this is the target to binary search for.\n * @param {Object=} opt_selfObj If the function is an evaluator, this is an\n *     optional this object for the evaluator.\n * @return {number} Lowest index of the target value if found, otherwise\n *     (-(insertion point) - 1). The insertion point is where the value should\n *     be inserted into arr to preserve the sorted property.  Return value >= 0\n *     iff target is found.\n * @private\n */\ngoog.array.binarySearch_ = function(\n    arr, compareFn, isEvaluator, opt_target, opt_selfObj) {\n  var left = 0;            // inclusive\n  var right = arr.length;  // exclusive\n  var found;\n  while (left < right) {\n    var middle = left + ((right - left) >>> 1);\n    var compareResult;\n    if (isEvaluator) {\n      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);\n    } else {\n      // NOTE(dimvar): To avoid this cast, we'd have to use function overloading\n      // for the type of binarySearch_, which the type system can't express yet.\n      compareResult = /** @type {function(?, ?): number} */ (compareFn)(\n          opt_target, arr[middle]);\n    }\n    if (compareResult > 0) {\n      left = middle + 1;\n    } else {\n      right = middle;\n      // We are looking for the lowest index so we can't return immediately.\n      found = !compareResult;\n    }\n  }\n  // left is the index if found, or the insertion point otherwise.\n  // Avoiding bitwise not operator, as that causes a loss in precision for array\n  // indexes outside the bounds of a 32-bit signed integer.  Array indexes have\n  // a maximum value of 2^32-2 https://tc39.es/ecma262/#array-index\n  return found ? left : -left - 1;\n};\n\n\n/**\n * Sorts the specified array into ascending order.  If no opt_compareFn is\n * specified, elements are compared using\n * <code>goog.array.defaultCompare</code>, which compares the elements using\n * the built in < and > operators.  This will produce the expected behavior\n * for homogeneous arrays of String(s) and Number(s), unlike the native sort,\n * but will give unpredictable results for heterogeneous lists of strings and\n * numbers with different numbers of digits.\n *\n * This sort is not guaranteed to be stable.\n *\n * Runtime: Same as <code>Array.prototype.sort</code>\n *\n * @param {Array<T>} arr The array to be sorted.\n * @param {?function(T,T):number=} opt_compareFn Optional comparison\n *     function by which the\n *     array is to be ordered. Should take 2 arguments to compare, and return a\n *     negative number, zero, or a positive number depending on whether the\n *     first argument is less than, equal to, or greater than the second.\n * @template T\n */\ngoog.array.sort = function(arr, opt_compareFn) {\n  // TODO(arv): Update type annotation since null is not accepted.\n  arr.sort(opt_compareFn || goog.array.defaultCompare);\n};\n\n\n/**\n * Sorts the specified array into ascending order in a stable way.  If no\n * opt_compareFn is specified, elements are compared using\n * <code>goog.array.defaultCompare</code>, which compares the elements using\n * the built in < and > operators.  This will produce the expected behavior\n * for homogeneous arrays of String(s) and Number(s).\n *\n * Runtime: Same as <code>Array.prototype.sort</code>, plus an additional\n * O(n) overhead of copying the array twice.\n *\n * @param {Array<T>} arr The array to be sorted.\n * @param {?function(T, T): number=} opt_compareFn Optional comparison function\n *     by which the array is to be ordered. Should take 2 arguments to compare,\n *     and return a negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template T\n */\ngoog.array.stableSort = function(arr, opt_compareFn) {\n  var compArr = new Array(arr.length);\n  for (var i = 0; i < arr.length; i++) {\n    compArr[i] = {index: i, value: arr[i]};\n  }\n  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;\n  function stableCompareFn(obj1, obj2) {\n    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;\n  }\n  goog.array.sort(compArr, stableCompareFn);\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = compArr[i].value;\n  }\n};\n\n\n/**\n * Sort the specified array into ascending order based on item keys\n * returned by the specified key function.\n * If no opt_compareFn is specified, the keys are compared in ascending order\n * using <code>goog.array.defaultCompare</code>.\n *\n * Runtime: O(S(f(n)), where S is runtime of <code>goog.array.sort</code>\n * and f(n) is runtime of the key function.\n *\n * @param {Array<T>} arr The array to be sorted.\n * @param {function(T): K} keyFn Function taking array element and returning\n *     a key used for sorting this element.\n * @param {?function(K, K): number=} opt_compareFn Optional comparison function\n *     by which the keys are to be ordered. Should take 2 arguments to compare,\n *     and return a negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template T,K\n */\ngoog.array.sortByKey = function(arr, keyFn, opt_compareFn) {\n  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;\n  goog.array.sort(\n      arr, function(a, b) { return keyCompareFn(keyFn(a), keyFn(b)); });\n};\n\n\n/**\n * Sorts an array of objects by the specified object key and compare\n * function. If no compare function is provided, the key values are\n * compared in ascending order using <code>goog.array.defaultCompare</code>.\n * This won't work for keys that get renamed by the compiler. So use\n * {'foo': 1, 'bar': 2} rather than {foo: 1, bar: 2}.\n * @param {Array<Object>} arr An array of objects to sort.\n * @param {string} key The object key to sort by.\n * @param {Function=} opt_compareFn The function to use to compare key\n *     values.\n */\ngoog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {\n  goog.array.sortByKey(arr, function(obj) { return obj[key]; }, opt_compareFn);\n};\n\n\n/**\n * Tells if the array is sorted.\n * @param {!IArrayLike<T>} arr The array.\n * @param {?function(T,T):number=} opt_compareFn Function to compare the\n *     array elements.\n *     Should take 2 arguments to compare, and return a negative number, zero,\n *     or a positive number depending on whether the first argument is less\n *     than, equal to, or greater than the second.\n * @param {boolean=} opt_strict If true no equal elements are allowed.\n * @return {boolean} Whether the array is sorted.\n * @template T\n */\ngoog.array.isSorted = function(arr, opt_compareFn, opt_strict) {\n  var compare = opt_compareFn || goog.array.defaultCompare;\n  for (var i = 1; i < arr.length; i++) {\n    var compareResult = compare(arr[i - 1], arr[i]);\n    if (compareResult > 0 || compareResult == 0 && opt_strict) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Compares two arrays for equality. Two arrays are considered equal if they\n * have the same length and their corresponding elements are equal according to\n * the comparison function.\n *\n * @param {IArrayLike<?>} arr1 The first array to compare.\n * @param {IArrayLike<?>} arr2 The second array to compare.\n * @param {Function=} opt_equalsFn Optional comparison function.\n *     Should take 2 arguments to compare, and return true if the arguments\n *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which\n *     compares the elements using the built-in '===' operator.\n * @return {boolean} Whether the two arrays are equal.\n */\ngoog.array.equals = function(arr1, arr2, opt_equalsFn) {\n  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) ||\n      arr1.length != arr2.length) {\n    return false;\n  }\n  var l = arr1.length;\n  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;\n  for (var i = 0; i < l; i++) {\n    if (!equalsFn(arr1[i], arr2[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * 3-way array compare function.\n * @param {!IArrayLike<VALUE>} arr1 The first array to\n *     compare.\n * @param {!IArrayLike<VALUE>} arr2 The second array to\n *     compare.\n * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison\n *     function by which the array is to be ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {number} Negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template VALUE\n */\ngoog.array.compare3 = function(arr1, arr2, opt_compareFn) {\n  var compare = opt_compareFn || goog.array.defaultCompare;\n  var l = Math.min(arr1.length, arr2.length);\n  for (var i = 0; i < l; i++) {\n    var result = compare(arr1[i], arr2[i]);\n    if (result != 0) {\n      return result;\n    }\n  }\n  return goog.array.defaultCompare(arr1.length, arr2.length);\n};\n\n\n/**\n * Compares its two arguments for order, using the built in < and >\n * operators.\n * @param {VALUE} a The first object to be compared.\n * @param {VALUE} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second,\n *     respectively.\n * @template VALUE\n */\ngoog.array.defaultCompare = function(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n};\n\n\n/**\n * Compares its two arguments for inverse order, using the built in < and >\n * operators.\n * @param {VALUE} a The first object to be compared.\n * @param {VALUE} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is greater than, equal to, or less than the second,\n *     respectively.\n * @template VALUE\n */\ngoog.array.inverseDefaultCompare = function(a, b) {\n  return -goog.array.defaultCompare(a, b);\n};\n\n\n/**\n * Compares its two arguments for equality, using the built in === operator.\n * @param {*} a The first object to compare.\n * @param {*} b The second object to compare.\n * @return {boolean} True if the two arguments are equal, false otherwise.\n */\ngoog.array.defaultCompareEquality = function(a, b) {\n  return a === b;\n};\n\n\n/**\n * Inserts a value into a sorted array. The array is not modified if the\n * value is already present.\n * @param {IArrayLike<VALUE>} array The array to modify.\n * @param {VALUE} value The object to insert.\n * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison\n *     function by which the array is ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {boolean} True if an element was inserted.\n * @template VALUE\n */\ngoog.array.binaryInsert = function(array, value, opt_compareFn) {\n  var index = goog.array.binarySearch(array, value, opt_compareFn);\n  if (index < 0) {\n    goog.array.insertAt(array, value, -(index + 1));\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Removes a value from a sorted array.\n * @param {!IArrayLike<VALUE>} array The array to modify.\n * @param {VALUE} value The object to remove.\n * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison\n *     function by which the array is ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {boolean} True if an element was removed.\n * @template VALUE\n */\ngoog.array.binaryRemove = function(array, value, opt_compareFn) {\n  var index = goog.array.binarySearch(array, value, opt_compareFn);\n  return (index >= 0) ? goog.array.removeAt(array, index) : false;\n};\n\n\n/**\n * Splits an array into disjoint buckets according to a splitting function.\n * @param {IArrayLike<T>} array The array.\n * @param {function(this:S, T, number, !IArrayLike<T>):?} sorter Function to\n *     call for every element.  This takes 3 arguments (the element, the index\n *     and the array) and must return a valid object key (a string, number,\n *     etc), or undefined, if that object should not be placed in a bucket.\n * @param {S=} opt_obj The object to be used as the value of 'this' within\n *     sorter.\n * @return {!Object<!Array<T>>} An object, with keys being all of the unique\n *     return values of sorter, and values being arrays containing the items for\n *     which the splitter returned that key.\n * @template T,S\n */\ngoog.array.bucket = function(array, sorter, opt_obj) {\n  var buckets = {};\n\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i];\n    var key = sorter.call(/** @type {?} */ (opt_obj), value, i, array);\n    if (key !== undefined) {\n      // Push the value to the right bucket, creating it if necessary.\n      var bucket = buckets[key] || (buckets[key] = []);\n      bucket.push(value);\n    }\n  }\n\n  return buckets;\n};\n\n\n/**\n * Creates a new object built from the provided array and the key-generation\n * function.\n * @param {IArrayLike<T>} arr Array or array like object over\n *     which to iterate whose elements will be the values in the new object.\n * @param {?function(this:S, T, number, ?) : string} keyFunc The function to\n *     call for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a string that will be used as the\n *     key for the element in the new object. If the function returns the same\n *     key for more than one element, the value for that key is\n *     implementation-defined.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within keyFunc.\n * @return {!Object<T>} The new object.\n * @template T,S\n */\ngoog.array.toObject = function(arr, keyFunc, opt_obj) {\n  var ret = {};\n  goog.array.forEach(arr, function(element, index) {\n    ret[keyFunc.call(/** @type {?} */ (opt_obj), element, index, arr)] =\n        element;\n  });\n  return ret;\n};\n\n\n/**\n * Creates a range of numbers in an arithmetic progression.\n *\n * Range takes 1, 2, or 3 arguments:\n * <pre>\n * range(5) is the same as range(0, 5, 1) and produces [0, 1, 2, 3, 4]\n * range(2, 5) is the same as range(2, 5, 1) and produces [2, 3, 4]\n * range(-2, -5, -1) produces [-2, -3, -4]\n * range(-2, -5, 1) produces [], since stepping by 1 wouldn't ever reach -5.\n * </pre>\n *\n * @param {number} startOrEnd The starting value of the range if an end argument\n *     is provided. Otherwise, the start value is 0, and this is the end value.\n * @param {number=} opt_end The optional end value of the range.\n * @param {number=} opt_step The step size between range values. Defaults to 1\n *     if opt_step is undefined or 0.\n * @return {!Array<number>} An array of numbers for the requested range. May be\n *     an empty array if adding the step would not converge toward the end\n *     value.\n */\ngoog.array.range = function(startOrEnd, opt_end, opt_step) {\n  var array = [];\n  var start = 0;\n  var end = startOrEnd;\n  var step = opt_step || 1;\n  if (opt_end !== undefined) {\n    start = startOrEnd;\n    end = opt_end;\n  }\n\n  if (step * (end - start) < 0) {\n    // Sign mismatch: start + step will never reach the end value.\n    return [];\n  }\n\n  if (step > 0) {\n    for (var i = start; i < end; i += step) {\n      array.push(i);\n    }\n  } else {\n    for (var i = start; i > end; i += step) {\n      array.push(i);\n    }\n  }\n  return array;\n};\n\n\n/**\n * Returns an array consisting of the given value repeated N times.\n *\n * @param {VALUE} value The value to repeat.\n * @param {number} n The repeat count.\n * @return {!Array<VALUE>} An array with the repeated value.\n * @template VALUE\n */\ngoog.array.repeat = function(value, n) {\n  var array = [];\n  for (var i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n};\n\n\n/**\n * Returns an array consisting of every argument with all arrays\n * expanded in-place recursively.\n *\n * @param {...*} var_args The values to flatten.\n * @return {!Array<?>} An array containing the flattened values.\n */\ngoog.array.flatten = function(var_args) {\n  var CHUNK_SIZE = 8192;\n\n  var result = [];\n  for (var i = 0; i < arguments.length; i++) {\n    var element = arguments[i];\n    if (goog.isArray(element)) {\n      for (var c = 0; c < element.length; c += CHUNK_SIZE) {\n        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);\n        var recurseResult = goog.array.flatten.apply(null, chunk);\n        for (var r = 0; r < recurseResult.length; r++) {\n          result.push(recurseResult[r]);\n        }\n      }\n    } else {\n      result.push(element);\n    }\n  }\n  return result;\n};\n\n\n/**\n * Rotates an array in-place. After calling this method, the element at\n * index i will be the element previously at index (i - n) %\n * array.length, for all values of i between 0 and array.length - 1,\n * inclusive.\n *\n * For example, suppose list comprises [t, a, n, k, s]. After invoking\n * rotate(array, 1) (or rotate(array, -4)), array will comprise [s, t, a, n, k].\n *\n * @param {!Array<T>} array The array to rotate.\n * @param {number} n The amount to rotate.\n * @return {!Array<T>} The array.\n * @template T\n */\ngoog.array.rotate = function(array, n) {\n  goog.asserts.assert(array.length != null);\n\n  if (array.length) {\n    n %= array.length;\n    if (n > 0) {\n      Array.prototype.unshift.apply(array, array.splice(-n, n));\n    } else if (n < 0) {\n      Array.prototype.push.apply(array, array.splice(0, -n));\n    }\n  }\n  return array;\n};\n\n\n/**\n * Moves one item of an array to a new position keeping the order of the rest\n * of the items. Example use case: keeping a list of JavaScript objects\n * synchronized with the corresponding list of DOM elements after one of the\n * elements has been dragged to a new position.\n * @param {!IArrayLike<?>} arr The array to modify.\n * @param {number} fromIndex Index of the item to move between 0 and\n *     {@code arr.length - 1}.\n * @param {number} toIndex Target index between 0 and {@code arr.length - 1}.\n */\ngoog.array.moveItem = function(arr, fromIndex, toIndex) {\n  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);\n  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);\n  // Remove 1 item at fromIndex.\n  var removedItems = Array.prototype.splice.call(arr, fromIndex, 1);\n  // Insert the removed item at toIndex.\n  Array.prototype.splice.call(arr, toIndex, 0, removedItems[0]);\n  // We don't use goog.array.insertAt and goog.array.removeAt, because they're\n  // significantly slower than splice.\n};\n\n\n/**\n * Creates a new array for which the element at position i is an array of the\n * ith element of the provided arrays.  The returned array will only be as long\n * as the shortest array provided; additional values are ignored.  For example,\n * the result of zipping [1, 2] and [3, 4, 5] is [[1,3], [2, 4]].\n *\n * This is similar to the zip() function in Python.  See {@link\n * http://docs.python.org/library/functions.html#zip}\n *\n * @param {...!IArrayLike<?>} var_args Arrays to be combined.\n * @return {!Array<!Array<?>>} A new array of arrays created from\n *     provided arrays.\n */\ngoog.array.zip = function(var_args) {\n  if (!arguments.length) {\n    return [];\n  }\n  var result = [];\n  var minLen = arguments[0].length;\n  for (var i = 1; i < arguments.length; i++) {\n    if (arguments[i].length < minLen) {\n      minLen = arguments[i].length;\n    }\n  }\n  for (var i = 0; i < minLen; i++) {\n    var value = [];\n    for (var j = 0; j < arguments.length; j++) {\n      value.push(arguments[j][i]);\n    }\n    result.push(value);\n  }\n  return result;\n};\n\n\n/**\n * Shuffles the values in the specified array using the Fisher-Yates in-place\n * shuffle (also known as the Knuth Shuffle). By default, calls Math.random()\n * and so resets the state of that random number generator. Similarly, may reset\n * the state of any other specified random number generator.\n *\n * Runtime: O(n)\n *\n * @param {!Array<?>} arr The array to be shuffled.\n * @param {function():number=} opt_randFn Optional random function to use for\n *     shuffling.\n *     Takes no arguments, and returns a random number on the interval [0, 1).\n *     Defaults to Math.random() using JavaScript's built-in Math library.\n */\ngoog.array.shuffle = function(arr, opt_randFn) {\n  var randFn = opt_randFn || Math.random;\n\n  for (var i = arr.length - 1; i > 0; i--) {\n    // Choose a random array index in [0, i] (inclusive with i).\n    var j = Math.floor(randFn() * (i + 1));\n\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n  }\n};\n\n\n/**\n * Returns a new array of elements from arr, based on the indexes of elements\n * provided by index_arr. For example, the result of index copying\n * ['a', 'b', 'c'] with index_arr [1,0,0,2] is ['b', 'a', 'a', 'c'].\n *\n * @param {!IArrayLike<T>} arr The array to get a indexed copy from.\n * @param {!IArrayLike<number>} index_arr An array of indexes to get from arr.\n * @return {!Array<T>} A new array of elements from arr in index_arr order.\n * @template T\n */\ngoog.array.copyByIndex = function(arr, index_arr) {\n  var result = [];\n  goog.array.forEach(index_arr, function(index) { result.push(arr[index]); });\n  return result;\n};\n\n\n/**\n * Maps each element of the input array into zero or more elements of the output\n * array.\n *\n * @param {!IArrayLike<VALUE>|string} arr Array or array like object\n *     over which to iterate.\n * @param {function(this:THIS, VALUE, number, ?): !Array<RESULT>} f The function\n *     to call for every element. This function takes 3 arguments (the element,\n *     the index and the array) and should return an array. The result will be\n *     used to extend a new array.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within f.\n * @return {!Array<RESULT>} a new array with the concatenation of all arrays\n *     returned from f.\n * @template THIS, VALUE, RESULT\n */\ngoog.array.concatMap = function(arr, f, opt_obj) {\n  return goog.array.concat.apply([], goog.array.map(arr, f, opt_obj));\n};\n"],
"names":["goog","provide","require","NATIVE_ARRAY_PROTOTYPES","define","TRUSTED_SITE","array","ASSUME_NATIVE_FUNCTIONS","FEATURESET_YEAR","peek","goog.array.peek","length","last","indexOf","Array","prototype","arr","obj","opt_fromIndex","asserts","assert","call","fromIndex","Math","max","i","lastIndexOf","forEach","f","opt_obj","l","arr2","split","forEachRight","goog.array.forEachRight","filter","res","resLength","val","map","reduce","bind","rval","index","reduceRight","some","every","count","goog.array.count","element","find","goog.array.find","findIndex","charAt","goog.array.findIndex","findRight","goog.array.findRight","findIndexRight","goog.array.findIndexRight","contains","goog.array.contains","isEmpty","goog.array.isEmpty","clear","goog.array.clear","isArray","insert","goog.array.insert","push","insertAt","goog.array.insertAt","opt_i","splice","insertArrayAt","goog.array.insertArrayAt","elementsToAdd","partial","apply","insertBefore","goog.array.insertBefore","opt_obj2","arguments","remove","goog.array.remove","rv","removeAt","removeLast","goog.array.removeLast","goog.array.removeAt","removeIf","goog.array.removeIf","removeAllIf","goog.array.removeAllIf","removedCount","concat","goog.array.concat","var_args","join","goog.array.join","toArray","goog.array.toArray","object","clone","extend","goog.array.extend","arr1","isArrayLike","len1","len2","j","goog.array.splice","howMany","slice","goog.array.slice","start","opt_end","removeDuplicates","goog.array.removeDuplicates","opt_rv","opt_hashFn","returnArray","defaultHashFn","item","isObject","getUid","hashFn","seen","cursorInsert","cursorRead","current","key","Object","hasOwnProperty","binarySearch","goog.array.binarySearch","target","opt_compareFn","binarySearch_","defaultCompare","binarySelect","goog.array.binarySelect","evaluator","undefined","goog.array.binarySearch_","compareFn","isEvaluator","opt_target","opt_selfObj","left","right","found","middle","compareResult","sort","goog.array.sort","stableSort","goog.array.stableSort","compArr","value","valueCompareFn","stableCompareFn","obj1","obj2","sortByKey","goog.array.sortByKey","keyFn","keyCompareFn","a","b","sortObjectsByKey","goog.array.sortObjectsByKey","isSorted","goog.array.isSorted","opt_strict","compare","equals","goog.array.equals","opt_equalsFn","equalsFn","defaultCompareEquality","compare3","goog.array.compare3","min","result","goog.array.defaultCompare","inverseDefaultCompare","goog.array.inverseDefaultCompare","goog.array.defaultCompareEquality","binaryInsert","goog.array.binaryInsert","binaryRemove","goog.array.binaryRemove","bucket","goog.array.bucket","sorter","buckets","toObject","goog.array.toObject","keyFunc","ret","range","goog.array.range","startOrEnd","opt_step","end","step","repeat","goog.array.repeat","n","flatten","goog.array.flatten","CHUNK_SIZE","c","chunk","recurseResult","r","rotate","goog.array.rotate","unshift","moveItem","goog.array.moveItem","toIndex","removedItems","zip","goog.array.zip","minLen","shuffle","goog.array.shuffle","opt_randFn","randFn","random","floor","tmp","copyByIndex","goog.array.copyByIndex","index_arr","concatMap","goog.array.concatMap"]
}
