{"version":3,"sources":["stylefy/impl/conversion.cljc"],"mappings":"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","names":["stylefy.impl.conversion/garden-units->css","props","cljs.core.reduce","result","next-key","value","stylefy.impl.utils/is-garden-value?","cljs.core.assoc","garden.compiler/render-css","cljs.core/keys","stylefy.impl.conversion/convert-stylefy-vendors-to-garden","temp__5735__auto__","vendors","stylefy.impl.conversion/convert-stylefy-modes-to-garden","modes","handle-mode","mode-name","mode-props","js/Error","cljs.core/Keyword","clojure.string/starts-with?","cljs.core.pr_str","cljs.core/count","clojure.string.split","stylefy.impl.log/warn","cljs.core.keyword","cljs.core/map?","p1__37891#","cljs.core.mapv","cljs.core.get","cljs.core/vector?","p1__37892#","cljs.core/first","cljs.core/second","stylefy.impl.conversion/class-selector","hash","p__37908","map__37909","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","stylefy.impl.conversion/convert-base-style-into-class","custom-selector","_style","options","css-props","stylefy.impl.utils/remove-special-keywords","css-selector","or__4120__auto__","garden-class-definition","garden-pseudo-classes","garden-vendors","garden-options","cljs.core.merge","css-class","garden.core.css","cljs.core.into","p__37914","map__37915","stylefy.impl.conversion/convert-media-queries","stylefy-media-queries","css-media-queries","cljs.core.map","media-query","media-query-props","media-query-css-props","garden.stylesheet.at_media","cljs.core/str","p__37918","map__37919","stylefy.impl.conversion/convert-supports-rules","stylefy-supports","css-supports","supports-selector","supports-props","supports-css-props","css-media-queries-inside-supports","p__37927","map__37928","stylefy.impl.conversion/convert-manual-styles","stylefy-manual-styles","css-parent-selector","css-manual-styles","manual-style","manual-selector-and-css-props","p1__37922#","clojure.walk/walk","cljs.core/identity","garden-style-definition","var_args","G__37972","stylefy.impl.conversion/style->css","style","stylefy.impl.conversion.style__GT_css"],"sourcesContent":["(ns stylefy.impl.conversion\n  (:require\n    [clojure.walk :refer [walk]]\n    [garden.core :refer [css]]\n    [stylefy.impl.utils :as utils]\n    [garden.stylesheet :refer [at-media]]\n    [stylefy.impl.log :as log]\n    [clojure.string :as str]\n    [garden.compiler :as compiler]))\n\n(defn garden-units->css\n  \"Checks all values in the map and converts all Garden units to CSS.\"\n  [props]\n  (reduce\n    (fn [result next-key]\n      (let [value (next-key props)]\n        (if (utils/is-garden-value? value)\n          (assoc result next-key (compiler/render-css value))\n          result)))\n    props\n    (keys props)))\n\n(defn- convert-stylefy-vendors-to-garden [props]\n  (when-let [vendors (:stylefy.core/vendors props)]\n    {:vendors vendors\n     :auto-prefix (:stylefy.core/auto-prefix props)}))\n\n(defn- convert-stylefy-modes-to-garden [props]\n  (let [modes (:stylefy.core/mode props)\n        handle-mode (fn [mode-name mode-props]\n                      (assert (or (keyword? mode-name)\n                                  (and (string? mode-name)\n                                       (str/starts-with? mode-name \":\")))\n                              (str \"Mode must be specified as a keyword or string beginning with colon, got: \" (pr-str mode-name)))\n                      (when (and (string? mode-name)\n                                 (> (count (str/split mode-name \" \")) 1))\n                        (log/warn (str \"Incorrect mode detected, should not contain spaces. Mode was: \" (pr-str mode-name))))\n                      [(keyword (str \"&\" mode-name)) mode-props])]\n    (cond\n      (map? modes) (mapv #(handle-mode % (get modes %)) (keys modes))\n      (vector? modes) (mapv #(handle-mode (first %) (second %)) modes))))\n\n(defn class-selector [hash]\n  (keyword (str \".\" hash)))\n\n(defn- convert-base-style-into-class\n  \"Converts Clojure style map into CSS class.\"\n  [{:keys [props hash custom-selector] :as _style} options]\n  (let [css-props (utils/remove-special-keywords props)\n        css-selector (or custom-selector (class-selector hash))\n        garden-class-definition [css-selector css-props]\n        garden-pseudo-classes (convert-stylefy-modes-to-garden props)\n        garden-vendors (convert-stylefy-vendors-to-garden props)\n        garden-options (or (merge options garden-vendors) {})\n        css-class (css garden-options (into garden-class-definition\n                                            garden-pseudo-classes))]\n    css-class))\n\n(defn- convert-media-queries\n  \"Converts stylefy/media definition into CSS media query.\"\n  [{:keys [props hash custom-selector] :as _style} options]\n  (when-let [stylefy-media-queries (:stylefy.core/media props)]\n    (let [css-selector (or custom-selector (class-selector hash))\n          css-media-queries\n          (map\n            (fn [media-query]\n              (let [media-query-props (get stylefy-media-queries media-query)\n                    media-query-css-props (utils/remove-special-keywords media-query-props)\n                    garden-class-definition [css-selector media-query-css-props]\n                    garden-pseudo-classes (convert-stylefy-modes-to-garden media-query-props)\n                    garden-vendors (convert-stylefy-vendors-to-garden media-query-props)\n                    garden-options (or (merge options garden-vendors) {})]\n                (css garden-options (at-media media-query (into garden-class-definition\n                                                                garden-pseudo-classes)))))\n            (keys stylefy-media-queries))]\n      (apply str css-media-queries))))\n\n(defn- convert-supports-rules\n  \"Converts stylefy/supports definition into CSS feature query.\"\n  [{:keys [props hash custom-selector] :as _style} options]\n  (when-let [stylefy-supports (:stylefy.core/supports props)]\n    (let [css-selector (or custom-selector (class-selector hash))\n          css-supports (map\n                         (fn [supports-selector]\n                           (let [supports-props (get stylefy-supports supports-selector)\n                                 supports-css-props (utils/remove-special-keywords supports-props)\n                                 garden-class-definition [css-selector supports-css-props]\n                                 garden-pseudo-classes (convert-stylefy-modes-to-garden supports-props)\n                                 garden-vendors (convert-stylefy-vendors-to-garden supports-props)\n                                 garden-options (or (merge options garden-vendors) {})\n                                 css-media-queries-inside-supports\n                                 (convert-media-queries\n                                   {:props supports-props\n                                    :hash hash\n                                    :custom-selector custom-selector}\n                                   options)]\n                             (str \"@supports (\" supports-selector \") {\"\n                                  (css garden-options (into garden-class-definition\n                                                            garden-pseudo-classes))\n                                  css-media-queries-inside-supports\n                                  \"}\")))\n                         (keys stylefy-supports))]\n      (apply str css-supports))))\n\n(defn- convert-manual-styles\n  \"Converts stylefy/manual definition into CSS.\"\n  [{:keys [props hash custom-selector] :as _style} options]\n  (when-let [stylefy-manual-styles (:stylefy.core/manual props)]\n    (let [css-parent-selector (or custom-selector (class-selector hash))\n          css-manual-styles (map\n                             (fn [manual-style]\n                               (let [manual-selector-and-css-props (walk #(if (map? %)\n                                                                            (utils/remove-special-keywords %)\n                                                                            %)\n                                                                         identity\n                                                                         manual-style)\n                                     garden-style-definition (into [css-parent-selector] [manual-selector-and-css-props])\n                                     css-class (css options garden-style-definition)]\n                                 css-class))\n                             stylefy-manual-styles)]\n      (apply str css-manual-styles))))\n\n(defn style->css\n  \"Converts the given style to CSS. Options are sent directly to Garden\"\n  ([style] (style->css style {}))\n  ([style options]\n   (let [css-class (convert-base-style-into-class style options)\n         css-media-queries (convert-media-queries style options)\n         css-supports (convert-supports-rules style options)\n         css-manual-styles (convert-manual-styles style options)]\n     (str css-class\n          css-media-queries\n          css-supports\n          css-manual-styles))))\n"]}