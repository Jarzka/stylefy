{"version":3,"sources":["stylefy/rum/dom.cljs"],"mappings":"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","names":["stylefy.rum.dom/styles-in-dom","cljs.core.atom","stylefy.rum.dom/dom-update-requested?","stylefy.rum.dom/styles-as-css","stylefy.rum.dom/keyframes-in-use","stylefy.rum.dom/font-faces-in-use","stylefy.rum.dom/custom-tags-in-use","stylefy.rum.dom/custom-classes-in-use","stylefy.rum.dom/style-by-hash","style-hash","cljs.core/deref","cljs.core.get","stylefy.rum.dom/update-style-tags!","node-stylefy","node-stylefy-constant","styles-in-css","cljs.core.map","cljs.core.comp","cljs.core/keys","keyframes-in-css","cljs.core/vals","font-faces-in-use","custom-tags-in-use","custom-classes-in-use","new-style-constant-css","cljs.core.apply","cljs.core/str","cljs.core.concat","new-style-css","cljs.core._EQ_","dommy.core/text","dommy.core/set-text!","stylefy.rum.dom/mark-all-styles-added-in-dom!","seq__28873","cljs.core/seq","chunk__28874","count__28875","i__28876","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/reset!","stylefy.rum.dom/get-stylefy-node","id","base-node","instance-id","final-id","js/document","dommy.core/selector","stylefy.rum.dom/update-dom","stylefy.impl.dom/stylefy-node-id","stylefy.impl.dom/stylefy-base-node","stylefy.impl.dom/stylefy-instance-id","stylefy.impl.dom/stylefy-constant-node-id","and__4109__auto__","e28877","stylefy.impl.cache.cache_styles","e","stylefy.impl.log/warn","stylefy.impl.cache.clear_styles","stylefy.impl.log/error","stylefy.rum.dom/update-dom-if-requested","stylefy.rum.dom/request-asynchronous-dom-update","stylefy.impl.state/stylefy-initialised?","c__26406__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__26407__auto__","switch__26274__auto__","state_28880","state_val_28881","inst_28878","cljs.core.async.impl.ioc-helpers/return-chan","statearr-28882","state-machine__26275__auto__","ret-value__26276__auto__","result__26277__auto__","cljs.core/keyword-identical?","ex__26278__auto__","e28883","statearr-28884","statearr-28885","state__26408__auto__","statearr-28886","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","p__28887","map__28888","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","stylefy.rum.dom/init-multi-instance","multi-instance","_options","js/Error","cljs.core.pr_str","stylefy.rum.dom/init-cache","options","cljs.core.not_EQ_","stylefy.impl.cache.use_caching_BANG_","cached-styles","stylefy.impl.cache/read-cache-value","stylefy.impl.cache/cache-key-styles","or__4120__auto__","cljs.core/merge","p1__28890#","p__28891","map__28892","stylefy.rum.dom/save-style","css","hash","_style","style-to-be-saved","cljs.core.swap_BANG_","cljs.core/assoc","stylefy.rum.dom/style-in-dom?","cljs.core/boolean","rum.core/react","stylefy.rum.dom/add-keyframes","identifier","keyframes-as-css","stylefy.rum.dom/add-font-face","font-faces-as-css","cljs.core/conj","stylefy.rum.dom/add-tag","tag-css","stylefy.rum.dom/add-class","class-as-css","this__4374__auto__","k__4375__auto__","this__4376__auto__","k28895","else__4377__auto__","G__28899","__extmap","this__4393__auto__","f__4394__auto__","init__4395__auto__","cljs.core.reduce","ret__4396__auto__","p__28900","vec__28901","k__4397__auto__","cljs.core.nth","v__4398__auto__","this__4388__auto__","writer__4389__auto__","opts__4390__auto__","pr-pair__4391__auto__","keyval__4392__auto__","cljs.core/pr-sequential-writer","G__28894","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4372__auto__","__meta","this__4369__auto__","__hash","this__4378__auto__","this__4370__auto__","h__4232__auto__","coll__4371__auto__","cljs.core/hash-unordered-coll","this28896","other28897","this__4383__auto__","k__4384__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4381__auto__","k__4382__auto__","pred__28904","expr__28905","cljs.core.assoc","this__4386__auto__","this__4373__auto__","this__4379__auto__","entry__4380__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","stylefy.rum.dom/RumDom","this__4417__auto__","cljs.core/List","writer__4418__auto__","cljs.core/-write","G__28898","extmap__4413__auto__","G__28907","cljs.core/record?","stylefy.rum.dom/->RumDom","stylefy.rum.dom/map->RumDom","this","style","tag-as-css","font-face-as-css"],"sourcesContent":["(ns stylefy.rum.dom\n  (:require [dommy.core :as dommy]\n            [garden.core :refer [css]]\n            [cljs.core.async :as async] ; Mandatory for running tests\n            [rum.core :as rum]\n            [stylefy.impl.cache :as cache]\n            [stylefy.impl.log :as log]\n            [stylefy.impl.dom :as dom]\n            [stylefy.impl.state :as state])\n  (:require-macros\n    [cljs.core.async.macros :refer [go]]))\n\n(def styles-in-dom (atom {})) ; style hash -> r/atom with boolean value\n(def ^:private dom-update-requested? (atom false))\n(def styles-as-css (atom {})) ; style hash -> map containing keys: ::css\n(def keyframes-in-use (atom {})) ; keyframe identifier -> css\n(def font-faces-in-use (atom [])) ; Vector of maps containing keys: ::css\n(def custom-tags-in-use (atom [])) ; Vector of maps containing keys: ::css\n(def custom-classes-in-use (atom [])) ; Vector of maps containing keys: ::css\n\n(defn style-by-hash [style-hash]\n  (when style-hash\n    (get @styles-as-css style-hash)))\n\n(defn- update-style-tags!\n  [node-stylefy node-stylefy-constant]\n  (let [styles-in-css          (map (comp ::css style-by-hash) (keys @styles-as-css))\n        keyframes-in-css       (vals @keyframes-in-use)\n        font-faces-in-use      (map ::css @font-faces-in-use)\n        custom-tags-in-use     (map ::css @custom-tags-in-use)\n        custom-classes-in-use  (map ::css @custom-classes-in-use)\n        new-style-constant-css (apply str (concat font-faces-in-use\n                                                  keyframes-in-css\n                                                  custom-tags-in-use\n                                                  custom-classes-in-use))\n        new-style-css          (apply str styles-in-css)]\n    ; Do not update this node contents if there are no new styles to be added.\n    ; This is important, because even if setting the same contents should have no effect,\n    ; it can cause font flickering in some browsers.\n    (when-not (= (dommy/text node-stylefy-constant) new-style-constant-css)\n      (dommy/set-text! node-stylefy-constant new-style-constant-css))\n\n    (dommy/set-text! node-stylefy new-style-css)))\n\n(defn- mark-all-styles-added-in-dom! []\n  (doseq [style-hash (keys @styles-in-dom)]\n    (reset! (get @styles-in-dom style-hash) true)))\n\n(defn- get-stylefy-node [id base-node instance-id]\n  (let [final-id (str id (when instance-id (str instance-id)))]\n    (if (nil? base-node)\n      (dommy/sel1 final-id)\n      (dommy/sel1 base-node final-id))))\n\n(defn update-dom\n  []\n  (let [node-stylefy (get-stylefy-node dom/stylefy-node-id @dom/stylefy-base-node @dom/stylefy-instance-id)\n        node-stylefy-constant (get-stylefy-node dom/stylefy-constant-node-id @dom/stylefy-base-node @dom/stylefy-instance-id)]\n    (if (and node-stylefy node-stylefy-constant)\n      (do (update-style-tags! node-stylefy node-stylefy-constant)\n          (reset! dom-update-requested? false)\n\n          (try\n            (cache/cache-styles @styles-as-css @dom/stylefy-instance-id)\n            (catch :default e\n              (log/warn (str \"Unable to cache styles, error: \" e))\n              (cache/clear-styles @dom/stylefy-instance-id)\n              e))\n\n          (mark-all-styles-added-in-dom!))\n      (log/error \"stylefy is unable to find the required <style> tags!\"))))\n\n(defn update-dom-if-requested []\n  (when @dom-update-requested?\n    (update-dom)))\n\n(defn- request-asynchronous-dom-update []\n  (when @state/stylefy-initialised?\n    (when-not @dom-update-requested?\n      (reset! dom-update-requested? true)\n      (go\n        (update-dom))\n      nil)))\n\n(defn init-multi-instance [{:keys [multi-instance] :as _options}]\n  (let [base-node (:base-node multi-instance)\n        instance-id (:instance-id multi-instance)]\n    (assert (or (nil? instance-id)\n                (string? instance-id))\n            (str \"instance-id must be string. Got: \" (pr-str base-node instance-id)))\n    (reset! dom/stylefy-base-node base-node)\n    (reset! dom/stylefy-instance-id instance-id)))\n\n(defn init-cache [options]\n  (when (not= (:use-caching? options) false)\n    (cache/use-caching! (:cache-options options) @dom/stylefy-instance-id)\n\n    (when-let [cached-styles (cache/read-cache-value\n                               (cache/cache-key-styles @dom/stylefy-instance-id))]\n      (reset! styles-as-css (or cached-styles {}))\n      (reset! styles-in-dom (apply merge (map\n                                           #(-> {% (atom false)})\n                                           (keys cached-styles)))))))\n\n(defn save-style\n  \"Stores the style in an atom. The style is going to be added into the DOM soon.\"\n  [{:keys [css hash] :as _style}]\n  (assert css \"Unable to save empty style!\")\n  (assert hash \"Unable to save style without hash!\")\n  (let [style-to-be-saved {::css css}]\n    (swap! styles-as-css assoc hash style-to-be-saved)\n    (swap! styles-in-dom assoc hash (atom false))\n    (request-asynchronous-dom-update)))\n\n(defn style-in-dom? [style-hash]\n  ; Note: This function does Reagent atom dereference.\n  ; If called inside a component render method (via use-style), it causes the component to re-render\n  ; itself if the \"CSS in DOM\" state of this specific style hash is changed.\n  (boolean (rum/react (get (rum/react styles-in-dom) style-hash))))\n\n(defn add-keyframes [identifier keyframes-as-css]\n  (swap! keyframes-in-use assoc identifier keyframes-as-css)\n  (request-asynchronous-dom-update)\n  nil)\n\n(defn add-font-face [font-faces-as-css]\n  (swap! font-faces-in-use conj {::css font-faces-as-css})\n  (request-asynchronous-dom-update)\n  nil)\n\n(defn add-tag [tag-css]\n  (swap! custom-tags-in-use conj {::css tag-css})\n  (request-asynchronous-dom-update)\n  nil)\n\n(defn add-class [class-as-css]\n  (swap! custom-classes-in-use conj {::css class-as-css})\n  (request-asynchronous-dom-update)\n  nil)\n\n(defrecord RumDom []\n  dom/Dom\n  (init-cache [this options] (init-cache options))\n  (init-multi-instance [this options] (init-multi-instance options))\n  (save-style [this style] (save-style style))\n  (add-class [this class-as-css] (add-class class-as-css))\n  (add-tag [this tag-as-css] (add-tag tag-as-css))\n  (add-font-face [this font-face-as-css] (add-font-face font-face-as-css))\n  (add-keyframes [this identifier keyframes-as-css] (add-keyframes identifier keyframes-as-css))\n  (update-dom [this] (update-dom))\n  (update-dom-if-needed [this] (update-dom-if-requested))\n  (style-in-dom? [this style-hash] (style-in-dom? style-hash))\n  (style-by-hash [this style-hash] (style-by-hash style-hash)))"]}