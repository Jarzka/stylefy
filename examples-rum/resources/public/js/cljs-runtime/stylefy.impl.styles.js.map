{"version":3,"sources":["stylefy/impl/styles.cljc"],"mappings":"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","names":["stylefy.impl.styles/global-vendor-prefixes","cljs.core.atom","stylefy.impl.styles/add-global-vendors","style","cljs.core.merge","clojure.set.union","cljs.core/deref","p__29046","map__29047","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","stylefy.impl.styles/create-style!","props","hash","style-created-handler","style-css","stylefy.impl.conversion.style__GT_css","G__29049","seq__29050","cljs.core/seq","chunk__29051","count__29052","i__29053","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","sub-style","cljs.core/vals","G__29058","G__29059","G__29060","G__29061","stylefy.impl.hashing/hash-style","stylefy.impl.styles/class-into-string","class","cljs.core/Keyword","cljs.core/name","cljs.core/vector?","clojure.string.join","cljs.core.remove","cljs.core/nil?","cljs.core.mapv","stylefy.impl.styles/validate-class-definition","origin","js/Error","p1__29062#","cljs.core/every?","cljs.core.pr_str","stylefy.impl.styles/prepare-style-return-value","style-hash","options","stylefy.impl.log/warn","style-with-classes","html-attributes","stylefy.impl.utils/remove-special-keywords","html-attributes-class","html-attributes-inline-style","class-as-string","style-with-classes-as-string","final-class","clojure.string/trim","final-html-attributes","stylefy.impl.styles/style-return-value","return-map","or__4120__auto__","cljs.core/empty?","stylefy.impl.dom/style-in-dom?","stylefy.impl.dom/dom","contains-media-queries?","contains-feature-queries?","contains-manual-mode?","excluded-modes","modes","mode-names","cljs.core/map?","cljs.core/set","cljs.core/keys","cljs.core.map","contains-modes-not-excluded?","cljs.core.filter","cljs.core.comp","cljs.core/not","inline-style","stylefy.impl.conversion/garden-units->css","stylefy.impl.styles/use-style!","stylefy.impl.state/check-stylefy-initialisation","style-with-global-vendors","already-created","stylefy.impl.dom/style-by-hash","stylefy.impl.styles/use-sub-style!","resolved-sub-style","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","stylefy.impl.styles/sub-style","seq29065","G__29066","self__4717__auto__","sub-styles","p1__29063#","p2__29064#","cljs.core.reduce","cljs.core.get_in","G__29068","stylefy.impl.styles/prepare-styles","p__29069","map__29070","styles","stylefy.impl.styles.prepare_styles","request-dom-update-after-done?","_options","seq__29072","chunk__29073","count__29074","i__29075","stylefy.impl.dom/save-style","stylefy.impl.dom/update-dom-if-needed","stylefy.impl.styles/init-global-vendor-prefixes","global-vendor-prefixes-options","cljs.core/reset!"],"sourcesContent":["(ns stylefy.impl.styles\n  (:require [clojure.string :as str]\n            [stylefy.impl.dom :as dom]\n            [stylefy.impl.hashing :as hashing]\n            [stylefy.impl.utils :as utils]\n            [stylefy.impl.state :as state]\n            [stylefy.impl.conversion :as conversion]\n            [stylefy.impl.log :as log]\n            [clojure.set :as set]))\n\n(def global-vendor-prefixes (atom {:stylefy.core/vendors #{}\n                                   :stylefy.core/auto-prefix #{}}))\n\n(defn- add-global-vendors [style]\n  (merge style\n         {:stylefy.core/vendors (set/union (:stylefy.core/vendors @global-vendor-prefixes)\n                                           (:stylefy.core/vendors style))\n          :stylefy.core/auto-prefix (set/union (:stylefy.core/auto-prefix @global-vendor-prefixes)\n                                               (:stylefy.core/auto-prefix style))}))\n\n(defn- create-style! [{:keys [props hash] :as style} style-created-handler]\n  (let [style-css (conversion/style->css style)]\n    (style-created-handler {:css style-css :hash hash})\n\n    ; Create sub-styles (if any)\n    (doseq [sub-style (vals (:stylefy.core/sub-styles props))]\n      (create-style!\n        {:props sub-style :hash (hashing/hash-style sub-style)}\n        style-created-handler))))\n\n(defn- class-into-string\n  \"Return class definition as string, or nil if the argument is nil.\"\n  [class]\n  (when class\n    (cond\n     (string? class) class\n     (keyword? class) (name class)\n     (vector? class) (str/join \" \"\n                               (remove nil? (mapv class-into-string class))))))\n\n(defn validate-class-definition [class origin]\n  (assert (or (nil? class)\n              (string? class)\n              (keyword? class)\n              (and (vector? class)\n                   (every? #(or (string? %) (keyword? %) (nil? %)) class)))\n          (str \"Unsupported \" origin \" type. It should be nil, keyword, string or vector of strings/keywords). Got: \" (pr-str class))))\n\n(defn- prepare-style-return-value\n  \"Given a style, hash and options, returns HTML attributes for a Hiccup component,\n   or nil if there are not any attributes.\"\n  [style style-hash options]\n\n  (when (:stylefy.core/with-classes options)\n    (log/warn \":stylefy.core/with-classes is deprecated in options map (since 1.3.0, removed in 2.0.0), use :class instead.\"))\n\n  (let [style-with-classes (:stylefy.core/with-classes style)\n        html-attributes (utils/remove-special-keywords options)\n        html-attributes-class (:class html-attributes)\n        html-attributes-inline-style (:style html-attributes)]\n\n    (validate-class-definition html-attributes-class \":class\")\n    (validate-class-definition style-with-classes \":stylefy.core/with-classes\")\n    (assert (nil? html-attributes-inline-style) \"HTML attribute :style is not supported in options map. Instead, you should provide your style definitions as the first argument when calling use-style.\")\n\n    (let [class-as-string (class-into-string html-attributes-class)\n          style-with-classes-as-string (class-into-string style-with-classes)\n          final-class (str/trim\n                        (str\n                          style-hash \" \"\n                          (str/join \" \" (remove nil? [class-as-string style-with-classes-as-string]))))\n          final-html-attributes (merge\n                                  html-attributes\n                                  (when (seq final-class) {:class final-class}))]\n\n      (when (seq final-html-attributes)\n        final-html-attributes))))\n\n(defn style-return-value [style style-hash options]\n  (let [return-map (prepare-style-return-value style style-hash options)]\n    #?(:cljs (if (or (empty? style)\n                     (dom/style-in-dom? @dom/dom style-hash))\n               return-map\n               ; The style definition has not been added into the DOM yet, so return the style props\n               ; as inline style. Inline style gets replaced soon as the style definition\n               ; is added into the DOM and the component re-renders itself.\n               ; However, if there are media queries, specific mode definitions etc., inline styling is probably\n               ; going to look wrong. In that case, hide the component completely until the DOM is ready.\n               (let [contains-media-queries? (some? (:stylefy.core/media style))\n                     contains-feature-queries? (some? (:stylefy.core/supports style))\n                     contains-manual-mode? (some? (:stylefy.core/manual style))\n                     excluded-modes #{:hover}\n                     modes (:stylefy.core/mode style)\n                     mode-names (cond\n                                  (map? modes) (set (keys modes))\n                                  (vector? modes) (set (map first modes))\n                                  :else #{})\n                     contains-modes-not-excluded? (seq (filter (comp not excluded-modes) mode-names))\n                     inline-style (-> style\n                                      (utils/remove-special-keywords)\n                                      (conversion/garden-units->css))]\n                 (if (or contains-media-queries?\n                         contains-feature-queries?\n                         contains-manual-mode?\n                         contains-modes-not-excluded?)\n                   (merge return-map {:style (merge inline-style {:visibility \"hidden\"})})\n                   (merge return-map {:style inline-style}))))\n       :clj  return-map)))\n\n(defn use-style! [style options style-created-handler]\n  (state/check-stylefy-initialisation)\n  (let [style-with-global-vendors (when-not (empty? style) (add-global-vendors style))\n        style-hash (hashing/hash-style style-with-global-vendors)\n        already-created #?(:cljs (dom/style-by-hash @dom/dom style-hash)\n                           :clj false)] ; TODO Read from css-in-context?\n\n    (when (and (seq style-with-global-vendors)\n               (some? style-hash)\n               (not already-created))\n      (create-style!\n        {:props style-with-global-vendors :hash style-hash}\n        style-created-handler))\n\n    (style-return-value style-with-global-vendors style-hash options)))\n\n(defn use-sub-style! [style sub-style options style-created-handler]\n  (let [resolved-sub-style (get (:stylefy.core/sub-styles style) sub-style)]\n    (if resolved-sub-style\n      (use-style! resolved-sub-style options style-created-handler)\n      (log/warn (str \"Sub-style \" (pr-str sub-style) \" not found in style: \" (pr-str style))))))\n\n(defn sub-style\n  [style & sub-styles]\n  (let [resolved-sub-style (reduce #(get-in %1 [:stylefy.core/sub-styles %2])\n                                   style\n                                   sub-styles)]\n\n    (if resolved-sub-style\n      resolved-sub-style\n      (log/warn (str \"Sub-style \" (pr-str sub-styles) \" not found in style: \" (pr-str style))))))\n\n#?(:cljs\n   (defn prepare-styles\n     ([styles]\n      (prepare-styles styles {:request-dom-update-after-done? true}))\n     ([styles {:keys [request-dom-update-after-done?] :as _options}]\n      (let [styles (remove nil? styles)]\n\n        (doseq [style styles]\n          (use-style! style {} (fn [style] (dom/save-style @dom/dom style)))\n          (when-let [sub-styles (vals (:stylefy.core/sub-styles style))]\n            (prepare-styles sub-styles {:request-dom-update-after-done? false}))))\n\n      (when request-dom-update-after-done?\n        (dom/update-dom-if-needed @dom/dom)))))\n\n(defn init-global-vendor-prefixes [options]\n  (let [global-vendor-prefixes-options (:global-vendor-prefixes options)]\n    (reset! global-vendor-prefixes\n            {:stylefy.core/vendors (:stylefy.core/vendors global-vendor-prefixes-options)\n             :stylefy.core/auto-prefix (:stylefy.core/auto-prefix global-vendor-prefixes-options)})))\n"]}