{
"version":3,
"file":"goog.structs.structs.js",
"lineCount":249,
"mappings":"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",
"sources":["goog/structs/structs.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Generics method for collection-like classes and objects.\n *\n * @author arv@google.com (Erik Arvidsson)\n *\n * This file contains functions to work with collections. It supports using\n * Map, Set, Array and Object and other classes that implement collection-like\n * methods.\n * @suppress {strictMissingProperties}\n */\n\n\ngoog.provide('goog.structs');\n\ngoog.require('goog.array');\ngoog.require('goog.object');\n\n\n// We treat an object as a dictionary if it has getKeys or it is an object that\n// isn't arrayLike.\n\n\n/**\n * Returns the number of values in the collection-like object.\n * @param {Object} col The collection-like object.\n * @return {number} The number of values in the collection-like object.\n */\ngoog.structs.getCount = function(col) {\n  if (col.getCount && typeof col.getCount == 'function') {\n    return col.getCount();\n  }\n  if (goog.isArrayLike(col) || typeof col === 'string') {\n    return col.length;\n  }\n  return goog.object.getCount(col);\n};\n\n\n/**\n * Returns the values of the collection-like object.\n * @param {Object} col The collection-like object.\n * @return {!Array<?>} The values in the collection-like object.\n */\ngoog.structs.getValues = function(col) {\n  if (col.getValues && typeof col.getValues == 'function') {\n    return col.getValues();\n  }\n  if (typeof col === 'string') {\n    return col.split('');\n  }\n  if (goog.isArrayLike(col)) {\n    var rv = [];\n    var l = col.length;\n    for (var i = 0; i < l; i++) {\n      rv.push(col[i]);\n    }\n    return rv;\n  }\n  return goog.object.getValues(col);\n};\n\n\n/**\n * Returns the keys of the collection. Some collections have no notion of\n * keys/indexes and this function will return undefined in those cases.\n * @param {Object} col The collection-like object.\n * @return {!Array|undefined} The keys in the collection.\n */\ngoog.structs.getKeys = function(col) {\n  if (col.getKeys && typeof col.getKeys == 'function') {\n    return col.getKeys();\n  }\n  // if we have getValues but no getKeys we know this is a key-less collection\n  if (col.getValues && typeof col.getValues == 'function') {\n    return undefined;\n  }\n  if (goog.isArrayLike(col) || typeof col === 'string') {\n    var rv = [];\n    var l = col.length;\n    for (var i = 0; i < l; i++) {\n      rv.push(i);\n    }\n    return rv;\n  }\n\n  return goog.object.getKeys(col);\n};\n\n\n/**\n * Whether the collection contains the given value. This is O(n) and uses\n * equals (==) to test the existence.\n * @param {Object} col The collection-like object.\n * @param {*} val The value to check for.\n * @return {boolean} True if the map contains the value.\n */\ngoog.structs.contains = function(col, val) {\n  if (col.contains && typeof col.contains == 'function') {\n    return col.contains(val);\n  }\n  if (col.containsValue && typeof col.containsValue == 'function') {\n    return col.containsValue(val);\n  }\n  if (goog.isArrayLike(col) || typeof col === 'string') {\n    return goog.array.contains(/** @type {!Array<?>} */ (col), val);\n  }\n  return goog.object.containsValue(col, val);\n};\n\n\n/**\n * Whether the collection is empty.\n * @param {Object} col The collection-like object.\n * @return {boolean} True if empty.\n */\ngoog.structs.isEmpty = function(col) {\n  if (col.isEmpty && typeof col.isEmpty == 'function') {\n    return col.isEmpty();\n  }\n\n  // We do not use goog.string.isEmptyOrWhitespace because here we treat the\n  // string as\n  // collection and as such even whitespace matters\n\n  if (goog.isArrayLike(col) || typeof col === 'string') {\n    return goog.array.isEmpty(/** @type {!Array<?>} */ (col));\n  }\n  return goog.object.isEmpty(col);\n};\n\n\n/**\n * Removes all the elements from the collection.\n * @param {Object} col The collection-like object.\n */\ngoog.structs.clear = function(col) {\n  // NOTE(arv): This should not contain strings because strings are immutable\n  if (col.clear && typeof col.clear == 'function') {\n    col.clear();\n  } else if (goog.isArrayLike(col)) {\n    goog.array.clear(/** @type {IArrayLike<?>} */ (col));\n  } else {\n    goog.object.clear(col);\n  }\n};\n\n\n/**\n * Calls a function for each value in a collection. The function takes\n * three arguments; the value, the key and the collection.\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):?} f The function to call for every value.\n *     This function takes\n *     3 arguments (the value, the key or undefined if the collection has no\n *     notion of keys, and the collection) and the return value is irrelevant.\n * @param {T=} opt_obj The object to be used as the value of 'this'\n *     within `f`.\n * @template T,S\n * @deprecated Use a more specific method, e.g. goog.array.forEach,\n *     goog.object.forEach, or for-of.\n */\ngoog.structs.forEach = function(col, f, opt_obj) {\n  if (col.forEach && typeof col.forEach == 'function') {\n    col.forEach(f, opt_obj);\n  } else if (goog.isArrayLike(col) || typeof col === 'string') {\n    goog.array.forEach(/** @type {!Array<?>} */ (col), f, opt_obj);\n  } else {\n    var keys = goog.structs.getKeys(col);\n    var values = goog.structs.getValues(col);\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n      f.call(/** @type {?} */ (opt_obj), values[i], keys && keys[i], col);\n    }\n  }\n};\n\n\n/**\n * Calls a function for every value in the collection. When a call returns true,\n * adds the value to a new collection (Array is returned by default).\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):boolean} f The function to call for every\n *     value. This function takes\n *     3 arguments (the value, the key or undefined if the collection has no\n *     notion of keys, and the collection) and should return a Boolean. If the\n *     return value is true the value is added to the result collection. If it\n *     is false the value is not included.\n * @param {T=} opt_obj The object to be used as the value of 'this'\n *     within `f`.\n * @return {!Object|!Array<?>} A new collection where the passed values are\n *     present. If col is a key-less collection an array is returned.  If col\n *     has keys and values a plain old JS object is returned.\n * @template T,S\n */\ngoog.structs.filter = function(col, f, opt_obj) {\n  if (typeof col.filter == 'function') {\n    return col.filter(f, opt_obj);\n  }\n  if (goog.isArrayLike(col) || typeof col === 'string') {\n    return goog.array.filter(/** @type {!Array<?>} */ (col), f, opt_obj);\n  }\n\n  var rv;\n  var keys = goog.structs.getKeys(col);\n  var values = goog.structs.getValues(col);\n  var l = values.length;\n  if (keys) {\n    rv = {};\n    for (var i = 0; i < l; i++) {\n      if (f.call(/** @type {?} */ (opt_obj), values[i], keys[i], col)) {\n        rv[keys[i]] = values[i];\n      }\n    }\n  } else {\n    // We should not use goog.array.filter here since we want to make sure that\n    // the index is undefined as well as make sure that col is passed to the\n    // function.\n    rv = [];\n    for (var i = 0; i < l; i++) {\n      if (f.call(opt_obj, values[i], undefined, col)) {\n        rv.push(values[i]);\n      }\n    }\n  }\n  return rv;\n};\n\n\n/**\n * Calls a function for every value in the collection and adds the result into a\n * new collection (defaults to creating a new Array).\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):V} f The function to call for every value.\n *     This function takes 3 arguments (the value, the key or undefined if the\n *     collection has no notion of keys, and the collection) and should return\n *     something. The result will be used as the value in the new collection.\n * @param {T=} opt_obj  The object to be used as the value of 'this'\n *     within `f`.\n * @return {!Object<V>|!Array<V>} A new collection with the new values.  If\n *     col is a key-less collection an array is returned.  If col has keys and\n *     values a plain old JS object is returned.\n * @template T,S,V\n */\ngoog.structs.map = function(col, f, opt_obj) {\n  if (typeof col.map == 'function') {\n    return col.map(f, opt_obj);\n  }\n  if (goog.isArrayLike(col) || typeof col === 'string') {\n    return goog.array.map(/** @type {!Array<?>} */ (col), f, opt_obj);\n  }\n\n  var rv;\n  var keys = goog.structs.getKeys(col);\n  var values = goog.structs.getValues(col);\n  var l = values.length;\n  if (keys) {\n    rv = {};\n    for (var i = 0; i < l; i++) {\n      rv[keys[i]] = f.call(/** @type {?} */ (opt_obj), values[i], keys[i], col);\n    }\n  } else {\n    // We should not use goog.array.map here since we want to make sure that\n    // the index is undefined as well as make sure that col is passed to the\n    // function.\n    rv = [];\n    for (var i = 0; i < l; i++) {\n      rv[i] = f.call(/** @type {?} */ (opt_obj), values[i], undefined, col);\n    }\n  }\n  return rv;\n};\n\n\n/**\n * Calls f for each value in a collection. If any call returns true this returns\n * true (without checking the rest). If all returns false this returns false.\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):boolean} f The function to call for every\n *     value. This function takes 3 arguments (the value, the key or undefined\n *     if the collection has no notion of keys, and the collection) and should\n *     return a boolean.\n * @param {T=} opt_obj  The object to be used as the value of 'this'\n *     within `f`.\n * @return {boolean} True if any value passes the test.\n * @template T,S\n */\ngoog.structs.some = function(col, f, opt_obj) {\n  if (typeof col.some == 'function') {\n    return col.some(f, opt_obj);\n  }\n  if (goog.isArrayLike(col) || typeof col === 'string') {\n    return goog.array.some(/** @type {!Array<?>} */ (col), f, opt_obj);\n  }\n  var keys = goog.structs.getKeys(col);\n  var values = goog.structs.getValues(col);\n  var l = values.length;\n  for (var i = 0; i < l; i++) {\n    if (f.call(/** @type {?} */ (opt_obj), values[i], keys && keys[i], col)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Calls f for each value in a collection. If all calls return true this return\n * true this returns true. If any returns false this returns false at this point\n *  and does not continue to check the remaining values.\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):boolean} f The function to call for every\n *     value. This function takes 3 arguments (the value, the key or\n *     undefined if the collection has no notion of keys, and the collection)\n *     and should return a boolean.\n * @param {T=} opt_obj  The object to be used as the value of 'this'\n *     within `f`.\n * @return {boolean} True if all key-value pairs pass the test.\n * @template T,S\n */\ngoog.structs.every = function(col, f, opt_obj) {\n  if (typeof col.every == 'function') {\n    return col.every(f, opt_obj);\n  }\n  if (goog.isArrayLike(col) || typeof col === 'string') {\n    return goog.array.every(/** @type {!Array<?>} */ (col), f, opt_obj);\n  }\n  var keys = goog.structs.getKeys(col);\n  var values = goog.structs.getValues(col);\n  var l = values.length;\n  for (var i = 0; i < l; i++) {\n    if (!f.call(/** @type {?} */ (opt_obj), values[i], keys && keys[i], col)) {\n      return false;\n    }\n  }\n  return true;\n};\n"],
"names":["goog","provide","require","structs","getCount","goog.structs.getCount","col","isArrayLike","length","object","getValues","goog.structs.getValues","split","rv","l","i","push","getKeys","goog.structs.getKeys","undefined","contains","goog.structs.contains","val","containsValue","array","isEmpty","goog.structs.isEmpty","clear","goog.structs.clear","forEach","goog.structs.forEach","f","opt_obj","keys","values","call","filter","goog.structs.filter","map","goog.structs.map","some","goog.structs.some","every","goog.structs.every"]
}
