{
"version":3,
"file":"goog.math.rect.js",
"lineCount":302,
"mappings":"AAmBAA,IAAAC,QAAA,CAAa,gBAAb,CAAA;AAEAD,IAAAE,QAAA,CAAa,cAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,eAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,sBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,iBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,gBAAb,CAAA;AAcA;;;;;;;;;AAAAF,IAAAG,KAAAC,KAAA,GAAiBC,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,CAAa;AAEpC,wBAAA,IAAAC,KAAA,GAAYJ,CAAZ;AAGA,wBAAA,IAAAK,IAAA,GAAWJ,CAAX;AAGA,wBAAA,IAAAK,MAAA,GAAaJ,CAAb;AAGA,wBAAA,IAAAK,OAAA,GAAcJ,CAAd;AAXoC,CAAtC;AAkBA;;;AAAAT,IAAAG,KAAAC,KAAAU,UAAAC,MAAA,GAAiCC,QAAQ,EAAG;AAC1C,SAAO,IAAIhB,IAAAG,KAAAC,KAAJ,CAAmB,IAAAM,KAAnB,EAA8B,IAAAC,IAA9B,EAAwC,IAAAC,MAAxC,EAAoD,IAAAC,OAApD,CAAP;AAD0C,CAA5C;AAUA;;;AAAAb,IAAAG,KAAAC,KAAAU,UAAAG,MAAA,GAAiCC,QAAQ,EAAG;AAC1C,MAAIC,QAAQ,IAAAT,KAARS,GAAoB,IAAAP,MAAxB;AACA,MAAIQ,SAAS,IAAAT,IAATS,GAAoB,IAAAP,OAAxB;AACA,SAAO,IAAIb,IAAAG,KAAAkB,IAAJ,CAAkB,IAAAV,IAAlB,EAA4BQ,KAA5B,EAAmCC,MAAnC,EAA2C,IAAAV,KAA3C,CAAP;AAH0C,CAA5C;AAcA;;;;;AAAAV,IAAAG,KAAAC,KAAAkB,0BAAA,GAA2CC,QAAQ,CAACC,QAAD,EAAWC,IAAX,CAAiB;AAClE,SAAO,IAAIzB,IAAAG,KAAAC,KAAJ,CAAmBoB,QAAAlB,EAAnB,EAA+BkB,QAAAjB,EAA/B,EAA2CkB,IAAAb,MAA3C,EAAuDa,IAAAZ,OAAvD,CAAP;AADkE,CAApE;AAYA;;;;AAAAb,IAAAG,KAAAC,KAAAsB,cAAA,GAA+BC,QAAQ,CAACC,GAAD,CAAM;AAC3C,SAAO,IAAI5B,IAAAG,KAAAC,KAAJ,CACHwB,GAAAlB,KADG,EACOkB,GAAAjB,IADP,EACgBiB,GAAAT,MADhB,GAC4BS,GAAAlB,KAD5B,EACsCkB,GAAAR,OADtC,GACmDQ,GAAAjB,IADnD,CAAP;AAD2C,CAA7C;AAMA,IAAIX,IAAA6B,MAAJ;AAME;;;;AAAA7B,MAAAG,KAAAC,KAAAU,UAAAgB,SAAA,GAAoCC,QAAQ,EAAG;AAC7C,WAAO,GAAP,GAAa,IAAArB,KAAb,GAAyB,IAAzB,GAAgC,IAAAC,IAAhC,GAA2C,KAA3C,GAAmD,IAAAC,MAAnD,GAAgE,MAAhE,GACI,IAAAC,OADJ,GACkB,IADlB;AAD6C,GAA/C;AANF;AAoBA;;;;;AAAAb,IAAAG,KAAAC,KAAA4B,OAAA,GAAwBC,QAAQ,CAACC,CAAD,EAAIC,CAAJ,CAAO;AACrC,MAAID,CAAJ,IAASC,CAAT;AACE,WAAO,IAAP;AADF;AAGA,MAAI,CAACD,CAAL,IAAU,CAACC,CAAX;AACE,WAAO,KAAP;AADF;AAGA,SAAOD,CAAAxB,KAAP,IAAiByB,CAAAzB,KAAjB,IAA2BwB,CAAAtB,MAA3B,IAAsCuB,CAAAvB,MAAtC,IAAiDsB,CAAAvB,IAAjD,IAA0DwB,CAAAxB,IAA1D,IACIuB,CAAArB,OADJ,IACgBsB,CAAAtB,OADhB;AAPqC,CAAvC;AAkBA;;;;AAAAb,IAAAG,KAAAC,KAAAU,UAAAsB,aAAA,GAAwCC,QAAQ,CAACC,IAAD,CAAO;AACrD,MAAIC,KAAKC,IAAAC,IAAA,CAAS,IAAA/B,KAAT,EAAoB4B,IAAA5B,KAApB,CAAT;AACA,MAAIgC,KAAKF,IAAAG,IAAA,CAAS,IAAAjC,KAAT,GAAqB,IAAAE,MAArB,EAAiC0B,IAAA5B,KAAjC,GAA6C4B,IAAA1B,MAA7C,CAAT;AAEA,MAAI2B,EAAJ,IAAUG,EAAV,CAAc;AACZ,QAAIE,KAAKJ,IAAAC,IAAA,CAAS,IAAA9B,IAAT,EAAmB2B,IAAA3B,IAAnB,CAAT;AACA,QAAIkC,KAAKL,IAAAG,IAAA,CAAS,IAAAhC,IAAT,GAAoB,IAAAE,OAApB,EAAiCyB,IAAA3B,IAAjC,GAA4C2B,IAAAzB,OAA5C,CAAT;AAEA,QAAI+B,EAAJ,IAAUC,EAAV,CAAc;AACZ,UAAAnC,KAAA,GAAY6B,EAAZ;AACA,UAAA5B,IAAA,GAAWiC,EAAX;AACA,UAAAhC,MAAA,GAAa8B,EAAb,GAAkBH,EAAlB;AACA,UAAA1B,OAAA,GAAcgC,EAAd,GAAmBD,EAAnB;AAEA,aAAO,IAAP;AANY;AAJF;AAad,SAAO,KAAP;AAjBqD,CAAvD;AA8BA;;;;;AAAA5C,IAAAG,KAAAC,KAAAgC,aAAA,GAA8BU,QAAQ,CAACZ,CAAD,EAAIC,CAAJ,CAAO;AAK3C,MAAII,KAAKC,IAAAC,IAAA,CAASP,CAAAxB,KAAT,EAAiByB,CAAAzB,KAAjB,CAAT;AACA,MAAIgC,KAAKF,IAAAG,IAAA,CAAST,CAAAxB,KAAT,GAAkBwB,CAAAtB,MAAlB,EAA2BuB,CAAAzB,KAA3B,GAAoCyB,CAAAvB,MAApC,CAAT;AAEA,MAAI2B,EAAJ,IAAUG,EAAV,CAAc;AACZ,QAAIE,KAAKJ,IAAAC,IAAA,CAASP,CAAAvB,IAAT,EAAgBwB,CAAAxB,IAAhB,CAAT;AACA,QAAIkC,KAAKL,IAAAG,IAAA,CAAST,CAAAvB,IAAT,GAAiBuB,CAAArB,OAAjB,EAA2BsB,CAAAxB,IAA3B,GAAmCwB,CAAAtB,OAAnC,CAAT;AAEA,QAAI+B,EAAJ,IAAUC,EAAV;AACE,aAAO,IAAI7C,IAAAG,KAAAC,KAAJ,CAAmBmC,EAAnB,EAAuBK,EAAvB,EAA2BF,EAA3B,GAAgCH,EAAhC,EAAoCM,EAApC,GAAyCD,EAAzC,CAAP;AADF;AAJY;AAQd,SAAO,IAAP;AAhB2C,CAA7C;AA4BA;;;;;AAAA5C,IAAAG,KAAAC,KAAA2C,WAAA,GAA4BC,QAAQ,CAACd,CAAD,EAAIC,CAAJ,CAAO;AACzC,SACID,CAAAxB,KADJ,IACcyB,CAAAzB,KADd,GACuByB,CAAAvB,MADvB,IACkCuB,CAAAzB,KADlC,IAC4CwB,CAAAxB,KAD5C,GACqDwB,CAAAtB,MADrD,IAEIsB,CAAAvB,IAFJ,IAEawB,CAAAxB,IAFb,GAEqBwB,CAAAtB,OAFrB,IAEiCsB,CAAAxB,IAFjC,IAE0CuB,CAAAvB,IAF1C,GAEkDuB,CAAArB,OAFlD;AADyC,CAA3C;AAYA;;;;AAAAb,IAAAG,KAAAC,KAAAU,UAAAiC,WAAA,GAAsCE,QAAQ,CAACX,IAAD,CAAO;AACnD,SAAOtC,IAAAG,KAAAC,KAAA2C,WAAA,CAA0B,IAA1B,EAAgCT,IAAhC,CAAP;AADmD,CAArD;AAcA;;;;;AAAAtC,IAAAG,KAAAC,KAAA8C,WAAA,GAA4BC,QAAQ,CAACjB,CAAD,EAAIC,CAAJ,CAAO;AACzC,MAAIC,eAAepC,IAAAG,KAAAC,KAAAgC,aAAA,CAA4BF,CAA5B,EAA+BC,CAA/B,CAAnB;AACA,MAAI,CAACC,YAAL,IAAqB,CAACA,YAAAvB,OAAtB,IAA6C,CAACuB,YAAAxB,MAA9C;AACE,WAAO,CAACsB,CAAAnB,MAAA,EAAD,CAAP;AADF;AAIA,MAAIqC,SAAS,EAAb;AAEA,MAAIzC,MAAMuB,CAAAvB,IAAV;AACA,MAAIE,SAASqB,CAAArB,OAAb;AAEA,MAAIwC,KAAKnB,CAAAxB,KAAL2C,GAAcnB,CAAAtB,MAAlB;AACA,MAAI0C,KAAKpB,CAAAvB,IAAL2C,GAAapB,CAAArB,OAAjB;AAEA,MAAI0C,KAAKpB,CAAAzB,KAAL6C,GAAcpB,CAAAvB,MAAlB;AACA,MAAI4C,KAAKrB,CAAAxB,IAAL6C,GAAarB,CAAAtB,OAAjB;AAGA,MAAIsB,CAAAxB,IAAJ,GAAYuB,CAAAvB,IAAZ,CAAmB;AACjByC,UAAAK,KAAA,CAAY,IAAIzD,IAAAG,KAAAC,KAAJ,CAAmB8B,CAAAxB,KAAnB,EAA2BwB,CAAAvB,IAA3B,EAAkCuB,CAAAtB,MAAlC,EAA2CuB,CAAAxB,IAA3C,GAAmDuB,CAAAvB,IAAnD,CAAZ,CAAA;AACAA,OAAA,GAAMwB,CAAAxB,IAAN;AAEAE,UAAA,IAAUsB,CAAAxB,IAAV,GAAkBuB,CAAAvB,IAAlB;AAJiB;AAOnB,MAAI6C,EAAJ,GAASF,EAAT,CAAa;AACXF,UAAAK,KAAA,CAAY,IAAIzD,IAAAG,KAAAC,KAAJ,CAAmB8B,CAAAxB,KAAnB,EAA2B8C,EAA3B,EAA+BtB,CAAAtB,MAA/B,EAAwC0C,EAAxC,GAA6CE,EAA7C,CAAZ,CAAA;AACA3C,UAAA,GAAS2C,EAAT,GAAc7C,GAAd;AAFW;AAKb,MAAIwB,CAAAzB,KAAJ,GAAawB,CAAAxB,KAAb;AACE0C,UAAAK,KAAA,CAAY,IAAIzD,IAAAG,KAAAC,KAAJ,CAAmB8B,CAAAxB,KAAnB,EAA2BC,GAA3B,EAAgCwB,CAAAzB,KAAhC,GAAyCwB,CAAAxB,KAAzC,EAAiDG,MAAjD,CAAZ,CAAA;AADF;AAIA,MAAI0C,EAAJ,GAASF,EAAT;AACED,UAAAK,KAAA,CAAY,IAAIzD,IAAAG,KAAAC,KAAJ,CAAmBmD,EAAnB,EAAuB5C,GAAvB,EAA4B0C,EAA5B,GAAiCE,EAAjC,EAAqC1C,MAArC,CAAZ,CAAA;AADF;AAIA,SAAOuC,MAAP;AAtCyC,CAA3C;AAkDA;;;;AAAApD,IAAAG,KAAAC,KAAAU,UAAAoC,WAAA,GAAsCQ,QAAQ,CAACpB,IAAD,CAAO;AACnD,SAAOtC,IAAAG,KAAAC,KAAA8C,WAAA,CAA0B,IAA1B,EAAgCZ,IAAhC,CAAP;AADmD,CAArD;AASA;;;AAAAtC,IAAAG,KAAAC,KAAAU,UAAA6C,aAAA,GAAwCC,QAAQ,CAACtB,IAAD,CAAO;AAErD,MAAInB,QAAQqB,IAAAC,IAAA,CAAS,IAAA/B,KAAT,GAAqB,IAAAE,MAArB,EAAiC0B,IAAA5B,KAAjC,GAA6C4B,IAAA1B,MAA7C,CAAZ;AACA,MAAIQ,SAASoB,IAAAC,IAAA,CAAS,IAAA9B,IAAT,GAAoB,IAAAE,OAApB,EAAiCyB,IAAA3B,IAAjC,GAA4C2B,IAAAzB,OAA5C,CAAb;AAEA,MAAAH,KAAA,GAAY8B,IAAAG,IAAA,CAAS,IAAAjC,KAAT,EAAoB4B,IAAA5B,KAApB,CAAZ;AACA,MAAAC,IAAA,GAAW6B,IAAAG,IAAA,CAAS,IAAAhC,IAAT,EAAmB2B,IAAA3B,IAAnB,CAAX;AAEA,MAAAC,MAAA,GAAaO,KAAb,GAAqB,IAAAT,KAArB;AACA,MAAAG,OAAA,GAAcO,MAAd,GAAuB,IAAAT,IAAvB;AATqD,CAAvD;AAoBA;;;;;AAAAX,IAAAG,KAAAC,KAAAuD,aAAA,GAA8BE,QAAQ,CAAC3B,CAAD,EAAIC,CAAJ,CAAO;AAC3C,MAAI,CAACD,CAAL,IAAU,CAACC,CAAX;AACE,WAAO,IAAP;AADF;AAIA,MAAI2B,UAAU,IAAI9D,IAAAG,KAAAC,KAAJ,CAAmB8B,CAAAxB,KAAnB,EAA2BwB,CAAAvB,IAA3B,EAAkCuB,CAAAtB,MAAlC,EAA2CsB,CAAArB,OAA3C,CAAd;AACAiD,SAAAH,aAAA,CAAqBxB,CAArB,CAAA;AAEA,SAAO2B,OAAP;AAR2C,CAA7C;AAqBA;;;;AAAA9D,IAAAG,KAAAC,KAAAU,UAAAiD,SAAA,GAAoCC,QAAQ,CAACC,OAAD,CAAU;AACpD,MAAIA,OAAJ,YAAuBjE,IAAAG,KAAA+D,WAAvB;AACE,WAAOD,OAAA3D,EAAP,IAAoB,IAAAI,KAApB,IAAiCuD,OAAA3D,EAAjC,IAA8C,IAAAI,KAA9C,GAA0D,IAAAE,MAA1D,IACIqD,OAAA1D,EADJ,IACiB,IAAAI,IADjB,IAC6BsD,OAAA1D,EAD7B,IAC0C,IAAAI,IAD1C,GACqD,IAAAE,OADrD;AADF;AAIE,WAAO,IAAAH,KAAP,IAAoBuD,OAAAvD,KAApB,IACI,IAAAA,KADJ,GACgB,IAAAE,MADhB,IAC8BqD,OAAAvD,KAD9B,GAC6CuD,OAAArD,MAD7C,IAEI,IAAAD,IAFJ,IAEgBsD,OAAAtD,IAFhB,IAGI,IAAAA,IAHJ,GAGe,IAAAE,OAHf,IAG8BoD,OAAAtD,IAH9B,GAG4CsD,OAAApD,OAH5C;AAJF;AADoD,CAAtD;AAmBA;;;;AAAAb,IAAAG,KAAAC,KAAAU,UAAAqD,gBAAA,GAA2CC,QAAQ,CAACC,KAAD,CAAQ;AACzD,MAAIC,KAAKD,KAAA/D,EAAA,GAAU,IAAAI,KAAV,GACL,IAAAA,KADK,GACO2D,KAAA/D,EADP,GAELkC,IAAAC,IAAA,CAAS4B,KAAA/D,EAAT,IAAoB,IAAAI,KAApB,GAAgC,IAAAE,MAAhC,GAA6C,CAA7C,CAFJ;AAGA,MAAI2D,KAAKF,KAAA9D,EAAA,GAAU,IAAAI,IAAV,GAAqB,IAAAA,IAArB,GAAgC0D,KAAA9D,EAAhC,GACqBiC,IAAAC,IAAA,CAAS4B,KAAA9D,EAAT,IAAoB,IAAAI,IAApB,GAA+B,IAAAE,OAA/B,GAA6C,CAA7C,CAD9B;AAEA,SAAOyD,EAAP,GAAYA,EAAZ,GAAiBC,EAAjB,GAAsBA,EAAtB;AANyD,CAA3D;AAeA;;;;AAAAvE,IAAAG,KAAAC,KAAAU,UAAA0D,SAAA,GAAoCC,QAAQ,CAACJ,KAAD,CAAQ;AAClD,SAAO7B,IAAAkC,KAAA,CAAU,IAAAP,gBAAA,CAAqBE,KAArB,CAAV,CAAP;AADkD,CAApD;AAQA;;;AAAArE,IAAAG,KAAAC,KAAAU,UAAA6D,QAAA,GAAmCC,QAAQ,EAAG;AAC5C,SAAO,IAAI5E,IAAAG,KAAA0E,KAAJ,CAAmB,IAAAjE,MAAnB,EAA+B,IAAAC,OAA/B,CAAP;AAD4C,CAA9C;AASA;;;AAAAb,IAAAG,KAAAC,KAAAU,UAAAgE,WAAA,GAAsCC,QAAQ,EAAG;AAC/C,SAAO,IAAI/E,IAAAG,KAAA+D,WAAJ,CAAyB,IAAAxD,KAAzB,EAAoC,IAAAC,IAApC,CAAP;AAD+C,CAAjD;AASA;;;AAAAX,IAAAG,KAAAC,KAAAU,UAAAkE,UAAA,GAAqCC,QAAQ,EAAG;AAC9C,SAAO,IAAIjF,IAAAG,KAAA+D,WAAJ,CACH,IAAAxD,KADG,GACS,IAAAE,MADT,GACsB,CADtB,EACyB,IAAAD,IADzB,GACoC,IAAAE,OADpC,GACkD,CADlD,CAAP;AAD8C,CAAhD;AAUA;;;AAAAb,IAAAG,KAAAC,KAAAU,UAAAoE,eAAA,GAA0CC,QAAQ,EAAG;AACnD,SAAO,IAAInF,IAAAG,KAAA+D,WAAJ,CACH,IAAAxD,KADG,GACS,IAAAE,MADT,EACqB,IAAAD,IADrB,GACgC,IAAAE,OADhC,CAAP;AADmD,CAArD;AAUA;;;AAAAb,IAAAG,KAAAC,KAAAU,UAAAsE,KAAA,GAAgCC,QAAQ,EAAG;AACzC,MAAA3E,KAAA,GAAY8B,IAAA4C,KAAA,CAAU,IAAA1E,KAAV,CAAZ;AACA,MAAAC,IAAA,GAAW6B,IAAA4C,KAAA,CAAU,IAAAzE,IAAV,CAAX;AACA,MAAAC,MAAA,GAAa4B,IAAA4C,KAAA,CAAU,IAAAxE,MAAV,CAAb;AACA,MAAAC,OAAA,GAAc2B,IAAA4C,KAAA,CAAU,IAAAvE,OAAV,CAAd;AACA,SAAO,IAAP;AALyC,CAA3C;AAaA;;;AAAAb,IAAAG,KAAAC,KAAAU,UAAAwE,MAAA,GAAiCC,QAAQ,EAAG;AAC1C,MAAA7E,KAAA,GAAY8B,IAAA8C,MAAA,CAAW,IAAA5E,KAAX,CAAZ;AACA,MAAAC,IAAA,GAAW6B,IAAA8C,MAAA,CAAW,IAAA3E,IAAX,CAAX;AACA,MAAAC,MAAA,GAAa4B,IAAA8C,MAAA,CAAW,IAAA1E,MAAX,CAAb;AACA,MAAAC,OAAA,GAAc2B,IAAA8C,MAAA,CAAW,IAAAzE,OAAX,CAAd;AACA,SAAO,IAAP;AAL0C,CAA5C;AAaA;;;AAAAb,IAAAG,KAAAC,KAAAU,UAAA0E,MAAA,GAAiCC,QAAQ,EAAG;AAC1C,MAAA/E,KAAA,GAAY8B,IAAAgD,MAAA,CAAW,IAAA9E,KAAX,CAAZ;AACA,MAAAC,IAAA,GAAW6B,IAAAgD,MAAA,CAAW,IAAA7E,IAAX,CAAX;AACA,MAAAC,MAAA,GAAa4B,IAAAgD,MAAA,CAAW,IAAA5E,MAAX,CAAb;AACA,MAAAC,OAAA,GAAc2B,IAAAgD,MAAA,CAAW,IAAA3E,OAAX,CAAd;AACA,SAAO,IAAP;AAL0C,CAA5C;AAmBA;;;;;AAAAb,IAAAG,KAAAC,KAAAU,UAAA4E,UAAA,GAAqCC,QAAQ,CAACC,EAAD,EAAKC,MAAL,CAAa;AACxD,MAAID,EAAJ,YAAkB5F,IAAAG,KAAA+D,WAAlB,CAAwC;AACtC,QAAAxD,KAAA,IAAakF,EAAAtF,EAAb;AACA,QAAAK,IAAA,IAAYiF,EAAArF,EAAZ;AAFsC,GAAxC,KAGO;AACL,QAAAG,KAAA,IAAaV,IAAA8F,QAAAC,aAAA,CAA0BH,EAA1B,CAAb;AACA,QAAI,MAAOC,OAAX,KAAsB,QAAtB;AACE,UAAAlF,IAAA,IAAYkF,MAAZ;AADF;AAFK;AAMP,SAAO,IAAP;AAVwD,CAA1D;AAuBA;;;;;AAAA7F,IAAAG,KAAAC,KAAAU,UAAAkF,MAAA,GAAiCC,QAAQ,CAACC,EAAD,EAAKC,MAAL,CAAa;AACpD,MAAIC,KAAM,MAAOD,OAAR,KAAmB,QAAnB,GAA+BA,MAA/B,GAAwCD,EAAjD;AACA,MAAAxF,KAAA,IAAawF,EAAb;AACA,MAAAtF,MAAA,IAAcsF,EAAd;AACA,MAAAvF,IAAA,IAAYyF,EAAZ;AACA,MAAAvF,OAAA,IAAeuF,EAAf;AACA,SAAO,IAAP;AANoD,CAAtD;;",
"sources":["goog/math/rect.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A utility class for representing rectangles. Some of these\n * functions should be migrated over to non-nullable params.\n */\n\ngoog.provide('goog.math.Rect');\n\ngoog.require('goog.asserts');\ngoog.require('goog.math.Box');\ngoog.require('goog.math.Coordinate');\ngoog.require('goog.math.IRect');\ngoog.require('goog.math.Size');\n\n\n\n/**\n * Class for representing rectangular regions.\n * @param {number} x Left.\n * @param {number} y Top.\n * @param {number} w Width.\n * @param {number} h Height.\n * @struct\n * @constructor\n * @implements {goog.math.IRect}\n */\ngoog.math.Rect = function(x, y, w, h) {\n  /** @type {number} */\n  this.left = x;\n\n  /** @type {number} */\n  this.top = y;\n\n  /** @type {number} */\n  this.width = w;\n\n  /** @type {number} */\n  this.height = h;\n};\n\n\n/**\n * @return {!goog.math.Rect} A new copy of this Rectangle.\n */\ngoog.math.Rect.prototype.clone = function() {\n  return new goog.math.Rect(this.left, this.top, this.width, this.height);\n};\n\n\n/**\n * Returns a new Box object with the same position and dimensions as this\n * rectangle.\n * @return {!goog.math.Box} A new Box representation of this Rectangle.\n */\ngoog.math.Rect.prototype.toBox = function() {\n  var right = this.left + this.width;\n  var bottom = this.top + this.height;\n  return new goog.math.Box(this.top, right, bottom, this.left);\n};\n\n\n/**\n * Creates a new Rect object with the position and size given.\n * @param {!goog.math.Coordinate} position The top-left coordinate of the Rect\n * @param {!goog.math.Size} size The size of the Rect\n * @return {!goog.math.Rect} A new Rect initialized with the given position and\n *     size.\n */\ngoog.math.Rect.createFromPositionAndSize = function(position, size) {\n  return new goog.math.Rect(position.x, position.y, size.width, size.height);\n};\n\n\n/**\n * Creates a new Rect object with the same position and dimensions as a given\n * Box.  Note that this is only the inverse of toBox if left/top are defined.\n * @param {goog.math.Box} box A box.\n * @return {!goog.math.Rect} A new Rect initialized with the box's position\n *     and size.\n */\ngoog.math.Rect.createFromBox = function(box) {\n  return new goog.math.Rect(\n      box.left, box.top, box.right - box.left, box.bottom - box.top);\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a nice string representing size and dimensions of rectangle.\n   * @return {string} In the form (50, 73 - 75w x 25h).\n   * @override\n   */\n  goog.math.Rect.prototype.toString = function() {\n    return '(' + this.left + ', ' + this.top + ' - ' + this.width + 'w x ' +\n        this.height + 'h)';\n  };\n}\n\n\n/**\n * Compares rectangles for equality.\n * @param {goog.math.IRect} a A Rectangle.\n * @param {goog.math.IRect} b A Rectangle.\n * @return {boolean} True iff the rectangles have the same left, top, width,\n *     and height, or if both are null.\n */\ngoog.math.Rect.equals = function(a, b) {\n  if (a == b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  return a.left == b.left && a.width == b.width && a.top == b.top &&\n      a.height == b.height;\n};\n\n\n/**\n * Computes the intersection of this rectangle and the rectangle parameter.  If\n * there is no intersection, returns false and leaves this rectangle as is.\n * @param {goog.math.IRect} rect A Rectangle.\n * @return {boolean} True iff this rectangle intersects with the parameter.\n */\ngoog.math.Rect.prototype.intersection = function(rect) {\n  var x0 = Math.max(this.left, rect.left);\n  var x1 = Math.min(this.left + this.width, rect.left + rect.width);\n\n  if (x0 <= x1) {\n    var y0 = Math.max(this.top, rect.top);\n    var y1 = Math.min(this.top + this.height, rect.top + rect.height);\n\n    if (y0 <= y1) {\n      this.left = x0;\n      this.top = y0;\n      this.width = x1 - x0;\n      this.height = y1 - y0;\n\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Returns the intersection of two rectangles. Two rectangles intersect if they\n * touch at all, for example, two zero width and height rectangles would\n * intersect if they had the same top and left.\n * @param {goog.math.IRect} a A Rectangle.\n * @param {goog.math.IRect} b A Rectangle.\n * @return {goog.math.Rect} A new intersection rect (even if width and height\n *     are 0), or null if there is no intersection.\n */\ngoog.math.Rect.intersection = function(a, b) {\n  // There is no nice way to do intersection via a clone, because any such\n  // clone might be unnecessary if this function returns null.  So, we duplicate\n  // code from above.\n\n  var x0 = Math.max(a.left, b.left);\n  var x1 = Math.min(a.left + a.width, b.left + b.width);\n\n  if (x0 <= x1) {\n    var y0 = Math.max(a.top, b.top);\n    var y1 = Math.min(a.top + a.height, b.top + b.height);\n\n    if (y0 <= y1) {\n      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);\n    }\n  }\n  return null;\n};\n\n\n/**\n * Returns whether two rectangles intersect. Two rectangles intersect if they\n * touch at all, for example, two zero width and height rectangles would\n * intersect if they had the same top and left.\n * @param {goog.math.IRect} a A Rectangle.\n * @param {goog.math.IRect} b A Rectangle.\n * @return {boolean} Whether a and b intersect.\n */\ngoog.math.Rect.intersects = function(a, b) {\n  return (\n      a.left <= b.left + b.width && b.left <= a.left + a.width &&\n      a.top <= b.top + b.height && b.top <= a.top + a.height);\n};\n\n\n/**\n * Returns whether a rectangle intersects this rectangle.\n * @param {goog.math.IRect} rect A rectangle.\n * @return {boolean} Whether rect intersects this rectangle.\n */\ngoog.math.Rect.prototype.intersects = function(rect) {\n  return goog.math.Rect.intersects(this, rect);\n};\n\n\n/**\n * Computes the difference regions between two rectangles. The return value is\n * an array of 0 to 4 rectangles defining the remaining regions of the first\n * rectangle after the second has been subtracted.\n * @param {goog.math.Rect} a A Rectangle.\n * @param {goog.math.IRect} b A Rectangle.\n * @return {!Array<!goog.math.Rect>} An array with 0 to 4 rectangles which\n *     together define the difference area of rectangle a minus rectangle b.\n */\ngoog.math.Rect.difference = function(a, b) {\n  var intersection = goog.math.Rect.intersection(a, b);\n  if (!intersection || !intersection.height || !intersection.width) {\n    return [a.clone()];\n  }\n\n  var result = [];\n\n  var top = a.top;\n  var height = a.height;\n\n  var ar = a.left + a.width;\n  var ab = a.top + a.height;\n\n  var br = b.left + b.width;\n  var bb = b.top + b.height;\n\n  // Subtract off any area on top where A extends past B\n  if (b.top > a.top) {\n    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));\n    top = b.top;\n    // If we're moving the top down, we also need to subtract the height diff.\n    height -= b.top - a.top;\n  }\n  // Subtract off any area on bottom where A extends past B\n  if (bb < ab) {\n    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));\n    height = bb - top;\n  }\n  // Subtract any area on left where A extends past B\n  if (b.left > a.left) {\n    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));\n  }\n  // Subtract any area on right where A extends past B\n  if (br < ar) {\n    result.push(new goog.math.Rect(br, top, ar - br, height));\n  }\n\n  return result;\n};\n\n\n/**\n * Computes the difference regions between this rectangle and `rect`. The\n * return value is an array of 0 to 4 rectangles defining the remaining regions\n * of this rectangle after the other has been subtracted.\n * @param {goog.math.IRect} rect A Rectangle.\n * @return {!Array<!goog.math.Rect>} An array with 0 to 4 rectangles which\n *     together define the difference area of rectangle a minus rectangle b.\n */\ngoog.math.Rect.prototype.difference = function(rect) {\n  return goog.math.Rect.difference(this, rect);\n};\n\n\n/**\n * Expand this rectangle to also include the area of the given rectangle.\n * @param {goog.math.IRect} rect The other rectangle.\n */\ngoog.math.Rect.prototype.boundingRect = function(rect) {\n  // We compute right and bottom before we change left and top below.\n  var right = Math.max(this.left + this.width, rect.left + rect.width);\n  var bottom = Math.max(this.top + this.height, rect.top + rect.height);\n\n  this.left = Math.min(this.left, rect.left);\n  this.top = Math.min(this.top, rect.top);\n\n  this.width = right - this.left;\n  this.height = bottom - this.top;\n};\n\n\n/**\n * Returns a new rectangle which completely contains both input rectangles.\n * @param {goog.math.IRect} a A rectangle.\n * @param {goog.math.IRect} b A rectangle.\n * @return {goog.math.Rect} A new bounding rect, or null if either rect is\n *     null.\n */\ngoog.math.Rect.boundingRect = function(a, b) {\n  if (!a || !b) {\n    return null;\n  }\n\n  var newRect = new goog.math.Rect(a.left, a.top, a.width, a.height);\n  newRect.boundingRect(b);\n\n  return newRect;\n};\n\n\n/**\n * Tests whether this rectangle entirely contains another rectangle or\n * coordinate.\n *\n * @param {goog.math.IRect|goog.math.Coordinate} another The rectangle or\n *     coordinate to test for containment.\n * @return {boolean} Whether this rectangle contains given rectangle or\n *     coordinate.\n */\ngoog.math.Rect.prototype.contains = function(another) {\n  if (another instanceof goog.math.Coordinate) {\n    return another.x >= this.left && another.x <= this.left + this.width &&\n        another.y >= this.top && another.y <= this.top + this.height;\n  } else {  // (another instanceof goog.math.IRect)\n    return this.left <= another.left &&\n        this.left + this.width >= another.left + another.width &&\n        this.top <= another.top &&\n        this.top + this.height >= another.top + another.height;\n  }\n};\n\n\n/**\n * @param {!goog.math.Coordinate} point A coordinate.\n * @return {number} The squared distance between the point and the closest\n *     point inside the rectangle. Returns 0 if the point is inside the\n *     rectangle.\n */\ngoog.math.Rect.prototype.squaredDistance = function(point) {\n  var dx = point.x < this.left ?\n      this.left - point.x :\n      Math.max(point.x - (this.left + this.width), 0);\n  var dy = point.y < this.top ? this.top - point.y :\n                                Math.max(point.y - (this.top + this.height), 0);\n  return dx * dx + dy * dy;\n};\n\n\n/**\n * @param {!goog.math.Coordinate} point A coordinate.\n * @return {number} The distance between the point and the closest point\n *     inside the rectangle. Returns 0 if the point is inside the rectangle.\n */\ngoog.math.Rect.prototype.distance = function(point) {\n  return Math.sqrt(this.squaredDistance(point));\n};\n\n\n/**\n * @return {!goog.math.Size} The size of this rectangle.\n */\ngoog.math.Rect.prototype.getSize = function() {\n  return new goog.math.Size(this.width, this.height);\n};\n\n\n/**\n * @return {!goog.math.Coordinate} A new coordinate for the top-left corner of\n *     the rectangle.\n */\ngoog.math.Rect.prototype.getTopLeft = function() {\n  return new goog.math.Coordinate(this.left, this.top);\n};\n\n\n/**\n * @return {!goog.math.Coordinate} A new coordinate for the center of the\n *     rectangle.\n */\ngoog.math.Rect.prototype.getCenter = function() {\n  return new goog.math.Coordinate(\n      this.left + this.width / 2, this.top + this.height / 2);\n};\n\n\n/**\n * @return {!goog.math.Coordinate} A new coordinate for the bottom-right corner\n *     of the rectangle.\n */\ngoog.math.Rect.prototype.getBottomRight = function() {\n  return new goog.math.Coordinate(\n      this.left + this.width, this.top + this.height);\n};\n\n\n/**\n * Rounds the fields to the next larger integer values.\n * @return {!goog.math.Rect} This rectangle with ceil'd fields.\n */\ngoog.math.Rect.prototype.ceil = function() {\n  this.left = Math.ceil(this.left);\n  this.top = Math.ceil(this.top);\n  this.width = Math.ceil(this.width);\n  this.height = Math.ceil(this.height);\n  return this;\n};\n\n\n/**\n * Rounds the fields to the next smaller integer values.\n * @return {!goog.math.Rect} This rectangle with floored fields.\n */\ngoog.math.Rect.prototype.floor = function() {\n  this.left = Math.floor(this.left);\n  this.top = Math.floor(this.top);\n  this.width = Math.floor(this.width);\n  this.height = Math.floor(this.height);\n  return this;\n};\n\n\n/**\n * Rounds the fields to nearest integer values.\n * @return {!goog.math.Rect} This rectangle with rounded fields.\n */\ngoog.math.Rect.prototype.round = function() {\n  this.left = Math.round(this.left);\n  this.top = Math.round(this.top);\n  this.width = Math.round(this.width);\n  this.height = Math.round(this.height);\n  return this;\n};\n\n\n/**\n * Translates this rectangle by the given offsets. If a\n * `goog.math.Coordinate` is given, then the left and top values are\n * translated by the coordinate's x and y values. Otherwise, left and top are\n * translated by `tx` and `opt_ty` respectively.\n * @param {number|goog.math.Coordinate} tx The value to translate left by or the\n *     the coordinate to translate this rect by.\n * @param {number=} opt_ty The value to translate top by.\n * @return {!goog.math.Rect} This rectangle after translating.\n */\ngoog.math.Rect.prototype.translate = function(tx, opt_ty) {\n  if (tx instanceof goog.math.Coordinate) {\n    this.left += tx.x;\n    this.top += tx.y;\n  } else {\n    this.left += goog.asserts.assertNumber(tx);\n    if (typeof opt_ty === 'number') {\n      this.top += opt_ty;\n    }\n  }\n  return this;\n};\n\n\n/**\n * Scales this rectangle by the given scale factors. The left and width values\n * are scaled by `sx` and the top and height values are scaled by\n * `opt_sy`.  If `opt_sy` is not given, then all fields are scaled\n * by `sx`.\n * @param {number} sx The scale factor to use for the x dimension.\n * @param {number=} opt_sy The scale factor to use for the y dimension.\n * @return {!goog.math.Rect} This rectangle after scaling.\n */\ngoog.math.Rect.prototype.scale = function(sx, opt_sy) {\n  var sy = (typeof opt_sy === 'number') ? opt_sy : sx;\n  this.left *= sx;\n  this.width *= sx;\n  this.top *= sy;\n  this.height *= sy;\n  return this;\n};\n"],
"names":["goog","provide","require","math","Rect","goog.math.Rect","x","y","w","h","left","top","width","height","prototype","clone","goog.math.Rect.prototype.clone","toBox","goog.math.Rect.prototype.toBox","right","bottom","Box","createFromPositionAndSize","goog.math.Rect.createFromPositionAndSize","position","size","createFromBox","goog.math.Rect.createFromBox","box","DEBUG","toString","goog.math.Rect.prototype.toString","equals","goog.math.Rect.equals","a","b","intersection","goog.math.Rect.prototype.intersection","rect","x0","Math","max","x1","min","y0","y1","goog.math.Rect.intersection","intersects","goog.math.Rect.intersects","goog.math.Rect.prototype.intersects","difference","goog.math.Rect.difference","result","ar","ab","br","bb","push","goog.math.Rect.prototype.difference","boundingRect","goog.math.Rect.prototype.boundingRect","goog.math.Rect.boundingRect","newRect","contains","goog.math.Rect.prototype.contains","another","Coordinate","squaredDistance","goog.math.Rect.prototype.squaredDistance","point","dx","dy","distance","goog.math.Rect.prototype.distance","sqrt","getSize","goog.math.Rect.prototype.getSize","Size","getTopLeft","goog.math.Rect.prototype.getTopLeft","getCenter","goog.math.Rect.prototype.getCenter","getBottomRight","goog.math.Rect.prototype.getBottomRight","ceil","goog.math.Rect.prototype.ceil","floor","goog.math.Rect.prototype.floor","round","goog.math.Rect.prototype.round","translate","goog.math.Rect.prototype.translate","tx","opt_ty","asserts","assertNumber","scale","goog.math.Rect.prototype.scale","sx","opt_sy","sy"]
}
