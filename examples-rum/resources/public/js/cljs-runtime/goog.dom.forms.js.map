{
"version":3,
"file":"goog.dom.forms.js",
"lineCount":346,
"mappings":"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",
"sources":["goog/dom/forms.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for manipulating a form and elements.\n *\n * @author arv@google.com (Erik Arvidsson)\n * @suppress {strictMissingProperties}\n */\n\ngoog.provide('goog.dom.forms');\n\ngoog.require('goog.dom.InputType');\ngoog.require('goog.dom.TagName');\ngoog.require('goog.dom.safe');\ngoog.require('goog.structs.Map');\ngoog.require('goog.window');\n\n\n/**\n * Submits form data via a new window. This hides references to the parent\n * window and should be used when submitting forms to untrusted 3rd party urls.\n * By default, this uses the action and method of the specified form\n * element. It is possible to override the default action and method if an\n * optional submit element with formaction and/or formmethod attributes is\n * provided.\n * @param {!HTMLFormElement} form The form.\n * @param {!HTMLElement=} opt_submitElement The `<button>` or `<input>` element\n *     used to submit the form. The element should have a submit type.\n * @return {boolean} true If the form was submitted succesfully.\n * @throws {!Error} If opt_submitElement is not a valid form submit element.\n */\ngoog.dom.forms.submitFormInNewWindow = function(form, opt_submitElement) {\n  var formData = goog.dom.forms.getFormDataMap(form);\n  var action = form.action;\n  var method = form.method;\n\n  if (opt_submitElement) {\n    if (goog.dom.InputType.SUBMIT != opt_submitElement.type.toLowerCase()) {\n      throw new Error('opt_submitElement does not have a valid type.');\n    }\n\n\n    var submitValue =\n        /** @type {?string} */ (goog.dom.forms.getValue(opt_submitElement));\n    if (submitValue != null) {\n      goog.dom.forms.addFormDataToMap_(\n          formData, opt_submitElement.name, submitValue);\n    }\n\n    if (opt_submitElement.getAttribute('formaction')) {\n      action = opt_submitElement.getAttribute('formaction');\n    }\n\n    if (opt_submitElement.getAttribute('formmethod')) {\n      method = opt_submitElement.getAttribute('formmethod');\n    }\n  }\n\n  return goog.dom.forms.submitFormDataInNewWindow(action, method, formData);\n};\n\n/**\n * Submits form data via a new window. This hides references to the parent\n * window and should be used when submitting forms to untrusted 3rd party urls.\n * @param {string} actionUri uri to submit form content to.\n * @param {string} method HTTP method used to submit the form.\n * @param {!goog.structs.Map<string, !Array<string>>} formData A map of the form\n *     data as field name to arrays of values.\n * @return {boolean} true If the form was submitted succesfully.\n */\ngoog.dom.forms.submitFormDataInNewWindow = function(\n    actionUri, method, formData) {\n  var newWin = goog.window.openBlank('', {noreferrer: true});\n\n  // This could be null if a new window could not be opened. e.g. if it was\n  // stopped by a popup blocker.\n  if (!newWin) {\n    return false;\n  }\n\n  var newDocument = newWin.document;\n\n  var newForm =\n      /** @type {!HTMLFormElement} */ (newDocument.createElement('form'));\n  newForm.method = method;\n  goog.dom.safe.setFormElementAction(newForm, actionUri);\n\n  // After this point, do not directly reference the form object's functions as\n  // field names can shadow the form's properties.\n\n  formData.forEach(function(fieldValues, fieldName) {\n    for (var i = 0; i < fieldValues.length; i++) {\n      var fieldValue = fieldValues[i];\n      var newInput = newDocument.createElement('input');\n      newInput.name = fieldName;\n      newInput.value = fieldValue;\n      newInput.type = 'hidden';\n      HTMLFormElement.prototype.appendChild.call(newForm, newInput);\n    }\n  });\n\n  HTMLFormElement.prototype.submit.call(newForm);\n  return true;\n};\n\n\n/**\n * Returns form data as a map of name to value arrays. This doesn't\n * support file inputs.\n * @param {HTMLFormElement} form The form.\n * @return {!goog.structs.Map<string, !Array<string>>} A map of the form data\n *     as field name to arrays of values.\n */\ngoog.dom.forms.getFormDataMap = function(form) {\n  var map = new goog.structs.Map();\n  goog.dom.forms.getFormDataHelper_(\n      form, map, goog.dom.forms.addFormDataToMap_);\n  return map;\n};\n\n\n/**\n * Returns the form data as an application/x-www-url-encoded string. This\n * doesn't support file inputs.\n * @param {HTMLFormElement} form The form.\n * @return {string} An application/x-www-url-encoded string.\n */\ngoog.dom.forms.getFormDataString = function(form) {\n  var sb = [];\n  goog.dom.forms.getFormDataHelper_(\n      form, sb, goog.dom.forms.addFormDataToStringBuffer_);\n  return sb.join('&');\n};\n\n\n/**\n * Returns the form data as a map or an application/x-www-url-encoded\n * string. This doesn't support file inputs.\n * @param {HTMLFormElement} form The form.\n * @param {Object} result The object form data is being put in.\n * @param {Function} fnAppend Function that takes `result`, an element\n *     name, and an element value, and adds the name/value pair to the result\n *     object.\n * @private\n */\ngoog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {\n  var els = form.elements;\n  for (var el, i = 0; el = els.item(i); i++) {\n    if (  // Make sure we don't include elements that are not part of the form.\n        // Some browsers include non-form elements. Check for 'form' property.\n        // See http://code.google.com/p/closure-library/issues/detail?id=227\n        // and\n        // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#the-input-element\n        (el.form != form) || el.disabled ||\n        // HTMLFieldSetElement has a form property but no value.\n        el.tagName == goog.dom.TagName.FIELDSET) {\n      continue;\n    }\n\n    var name = el.name;\n    switch (el.type.toLowerCase()) {\n      case goog.dom.InputType.FILE:\n      // file inputs are not supported\n      case goog.dom.InputType.SUBMIT:\n      case goog.dom.InputType.RESET:\n      case goog.dom.InputType.BUTTON:\n        // don't submit these\n        break;\n      case goog.dom.InputType.SELECT_MULTIPLE:\n        var values = goog.dom.forms.getValue(el);\n        if (values != null) {\n          for (var value, j = 0; value = values[j]; j++) {\n            fnAppend(result, name, value);\n          }\n        }\n        break;\n      default:\n        var value = goog.dom.forms.getValue(el);\n        if (value != null) {\n          fnAppend(result, name, value);\n        }\n    }\n  }\n\n  // input[type=image] are not included in the elements collection\n  var inputs = form.getElementsByTagName(String(goog.dom.TagName.INPUT));\n  for (var input, i = 0; input = inputs[i]; i++) {\n    if (input.form == form &&\n        input.type.toLowerCase() == goog.dom.InputType.IMAGE) {\n      name = input.name;\n      fnAppend(result, name, input.value);\n      fnAppend(result, name + '.x', '0');\n      fnAppend(result, name + '.y', '0');\n    }\n  }\n};\n\n\n/**\n * Adds the name/value pair to the map.\n * @param {!goog.structs.Map<string, !Array<string>>} map The map to add to.\n * @param {string} name The name.\n * @param {string} value The value.\n * @private\n */\ngoog.dom.forms.addFormDataToMap_ = function(map, name, value) {\n  var array = map.get(name);\n  if (!array) {\n    array = [];\n    map.set(name, array);\n  }\n  array.push(value);\n};\n\n\n/**\n * Adds a name/value pair to an string buffer array in the form 'name=value'.\n * @param {Array<string>} sb The string buffer array for storing data.\n * @param {string} name The name.\n * @param {string} value The value.\n * @private\n */\ngoog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {\n  sb.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));\n};\n\n\n/**\n * Whether the form has a file input.\n * @param {HTMLFormElement} form The form.\n * @return {boolean} Whether the form has a file input.\n */\ngoog.dom.forms.hasFileInput = function(form) {\n  var els = form.elements;\n  for (var el, i = 0; el = els[i]; i++) {\n    if (!el.disabled && el.type &&\n        el.type.toLowerCase() == goog.dom.InputType.FILE) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Enables or disables either all elements in a form or a single form element.\n * @param {Element} el The element, either a form or an element within a form.\n * @param {boolean} disabled Whether the element should be disabled.\n */\ngoog.dom.forms.setDisabled = function(el, disabled) {\n  // disable all elements in a form\n  if (el.tagName == goog.dom.TagName.FORM) {\n    var els = /** @type {!HTMLFormElement} */ (el).elements;\n    for (var i = 0; el = els.item(i); i++) {\n      goog.dom.forms.setDisabled(el, disabled);\n    }\n  } else {\n    // makes sure to blur buttons, multi-selects, and any elements which\n    // maintain keyboard/accessibility focus when disabled\n    if (disabled == true) {\n      el.blur();\n    }\n    el.disabled = disabled;\n  }\n};\n\n\n/**\n * Focuses, and optionally selects the content of, a form element.\n * @param {Element} el The form element.\n */\ngoog.dom.forms.focusAndSelect = function(el) {\n  el.focus();\n  if (el.select) {\n    el.select();\n  }\n};\n\n\n/**\n * Whether a form element has a value.\n * @param {Element} el The element.\n * @return {boolean} Whether the form has a value.\n */\ngoog.dom.forms.hasValue = function(el) {\n  var value = goog.dom.forms.getValue(el);\n  return !!value;\n};\n\n\n/**\n * Whether a named form field has a value.\n * @param {HTMLFormElement} form The form element.\n * @param {string} name Name of an input to the form.\n * @return {boolean} Whether the form has a value.\n */\ngoog.dom.forms.hasValueByName = function(form, name) {\n  var value = goog.dom.forms.getValueByName(form, name);\n  return !!value;\n};\n\n\n/**\n * Gets the current value of any element with a type.\n * @param {null|!Element|!RadioNodeList<?>} input The element.\n * @return {string|Array<string>|null} The current value of the element\n *     (or null).\n */\ngoog.dom.forms.getValue = function(input) {\n  // Elements with a type may need more specialized logic.\n  var type = /** {{type: (string|undefined)}} */ (input).type;\n\n  if (typeof type === 'string') {\n    var el = /** @type {!Element} */ (input);\n\n    switch (type.toLowerCase()) {\n      case goog.dom.InputType.CHECKBOX:\n      case goog.dom.InputType.RADIO:\n        return goog.dom.forms.getInputChecked_(el);\n      case goog.dom.InputType.SELECT_ONE:\n        return goog.dom.forms.getSelectSingle_(el);\n      case goog.dom.InputType.SELECT_MULTIPLE:\n        return goog.dom.forms.getSelectMultiple_(el);\n      default:\n        // Not every element with a value has a type (e.g. meter and progress).\n    }\n  }\n\n  // Coerce `undefined` to `null`.\n  return input.value != null ? input.value : null;\n};\n\n\n/**\n * Returns the value of the named form field. In the case of radio buttons,\n * returns the value of the checked button with the given name.\n *\n * @param {HTMLFormElement} form The form element.\n * @param {string} name Name of an input to the form.\n *\n * @return {Array<string>|string|null} The value of the form element, or\n *     null if the form element does not exist or has no value.\n */\ngoog.dom.forms.getValueByName = function(form, name) {\n  var els = form.elements[name];\n\n  if (!els) {\n    return null;\n  } else if (els.type) {\n    return goog.dom.forms.getValue(/** @type {!Element} */ (els));\n  } else {\n    for (var i = 0; i < els.length; i++) {\n      var val = goog.dom.forms.getValue(els[i]);\n      if (val) {\n        return val;\n      }\n    }\n    return null;\n  }\n};\n\n\n/**\n * Gets the current value of a checkable input element.\n * @param {Element} el The element.\n * @return {?string} The value of the form element (or null).\n * @private\n */\ngoog.dom.forms.getInputChecked_ = function(el) {\n  return el.checked ? /** @type {?} */ (el).value : null;\n};\n\n\n/**\n * Gets the current value of a select-one element.\n * @param {Element} el The element.\n * @return {?string} The value of the form element (or null).\n * @private\n */\ngoog.dom.forms.getSelectSingle_ = function(el) {\n  var selectedIndex = /** @type {!HTMLSelectElement} */ (el).selectedIndex;\n  return selectedIndex >= 0 ?\n      /** @type {!HTMLSelectElement} */ (el).options[selectedIndex].value :\n      null;\n};\n\n\n/**\n * Gets the current value of a select-multiple element.\n * @param {Element} el The element.\n * @return {Array<string>?} The value of the form element (or null).\n * @private\n */\ngoog.dom.forms.getSelectMultiple_ = function(el) {\n  var values = [];\n  for (var option, i = 0;\n       option = /** @type {!HTMLSelectElement} */ (el).options[i]; i++) {\n    if (option.selected) {\n      values.push(option.value);\n    }\n  }\n  return values.length ? values : null;\n};\n\n\n/**\n * Sets the current value of any element with a type.\n * @param {Element} el The element.\n * @param {*=} opt_value The value to give to the element, which will be coerced\n *     by the browser in the default case using toString. This value should be\n *     an array for setting the value of select multiple elements.\n */\ngoog.dom.forms.setValue = function(el, opt_value) {\n  // Elements with a type may need more specialized logic.\n  var type = /** @type {!HTMLInputElement} */ (el).type;\n  switch (typeof type === 'string' && type.toLowerCase()) {\n    case goog.dom.InputType.CHECKBOX:\n    case goog.dom.InputType.RADIO:\n      goog.dom.forms.setInputChecked_(\n          el,\n          /** @type {string} */ (opt_value));\n      return;\n    case goog.dom.InputType.SELECT_ONE:\n      goog.dom.forms.setSelectSingle_(\n          el,\n          /** @type {string} */ (opt_value));\n      return;\n    case goog.dom.InputType.SELECT_MULTIPLE:\n      goog.dom.forms.setSelectMultiple_(\n          el,\n          /** @type {!Array<string>} */ (opt_value));\n      return;\n    default:\n      // Not every element with a value has a type (e.g. meter and progress).\n      el.value = opt_value != null ? opt_value : '';\n  }\n};\n\n\n/**\n * Sets a checkable input element's checked property.\n * #TODO(user): This seems potentially unintuitive since it doesn't set\n * the value property but my hunch is that the primary use case is to check a\n * checkbox, not to reset its value property.\n * @param {Element} el The element.\n * @param {string|boolean=} opt_value The value, sets the element checked if\n *     val is set.\n * @private\n */\ngoog.dom.forms.setInputChecked_ = function(el, opt_value) {\n  el.checked = opt_value;\n};\n\n\n/**\n * Sets the value of a select-one element.\n * @param {Element} el The element.\n * @param {string=} opt_value The value of the selected option element.\n * @private\n */\ngoog.dom.forms.setSelectSingle_ = function(el, opt_value) {\n  // unset any prior selections\n  el.selectedIndex = -1;\n  if (typeof opt_value === 'string') {\n    for (var option, i = 0;\n         option = /** @type {!HTMLSelectElement} */ (el).options[i]; i++) {\n      if (option.value == opt_value) {\n        option.selected = true;\n        break;\n      }\n    }\n  }\n};\n\n\n/**\n * Sets the value of a select-multiple element.\n * @param {Element} el The element.\n * @param {Array<string>|string=} opt_value The value of the selected option\n *     element(s).\n * @private\n */\ngoog.dom.forms.setSelectMultiple_ = function(el, opt_value) {\n  // reset string opt_values as an array\n  if (typeof opt_value === 'string') {\n    opt_value = [opt_value];\n  }\n  for (var option, i = 0;\n       option = /** @type {!HTMLSelectElement} */ (el).options[i]; i++) {\n    // we have to reset the other options to false for select-multiple\n    option.selected = false;\n    if (opt_value) {\n      for (var value, j = 0; value = opt_value[j]; j++) {\n        if (option.value == value) {\n          option.selected = true;\n        }\n      }\n    }\n  }\n};\n"],
"names":["goog","provide","require","dom","forms","submitFormInNewWindow","goog.dom.forms.submitFormInNewWindow","form","opt_submitElement","formData","getFormDataMap","action","method","InputType","SUBMIT","type","toLowerCase","Error","submitValue","getValue","addFormDataToMap_","name","getAttribute","submitFormDataInNewWindow","goog.dom.forms.submitFormDataInNewWindow","actionUri","newWin","window","openBlank","noreferrer","newDocument","document","newForm","createElement","safe","setFormElementAction","forEach","fieldValues","fieldName","i","length","fieldValue","newInput","value","HTMLFormElement","prototype","appendChild","call","submit","goog.dom.forms.getFormDataMap","map","structs","Map","getFormDataHelper_","getFormDataString","goog.dom.forms.getFormDataString","sb","addFormDataToStringBuffer_","join","goog.dom.forms.getFormDataHelper_","result","fnAppend","els","elements","el","item","disabled","tagName","TagName","FIELDSET","FILE","RESET","BUTTON","SELECT_MULTIPLE","values","j","inputs","getElementsByTagName","String","INPUT","input","IMAGE","goog.dom.forms.addFormDataToMap_","array","get","set","push","goog.dom.forms.addFormDataToStringBuffer_","encodeURIComponent","hasFileInput","goog.dom.forms.hasFileInput","setDisabled","goog.dom.forms.setDisabled","FORM","blur","focusAndSelect","goog.dom.forms.focusAndSelect","focus","select","hasValue","goog.dom.forms.hasValue","hasValueByName","goog.dom.forms.hasValueByName","getValueByName","goog.dom.forms.getValue","CHECKBOX","RADIO","getInputChecked_","SELECT_ONE","getSelectSingle_","getSelectMultiple_","goog.dom.forms.getValueByName","val","goog.dom.forms.getInputChecked_","checked","goog.dom.forms.getSelectSingle_","selectedIndex","options","goog.dom.forms.getSelectMultiple_","option","selected","setValue","goog.dom.forms.setValue","opt_value","setInputChecked_","setSelectSingle_","setSelectMultiple_","goog.dom.forms.setInputChecked_","goog.dom.forms.setSelectSingle_","goog.dom.forms.setSelectMultiple_"]
}
