{
"version":3,
"file":"goog.date.date.js",
"lineCount":1077,
"mappings":"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",
"sources":["goog/date/date.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Functions and objects for date representation and manipulation.\n * @suppress {checkPrototypalTypes}\n *\n * @author eae@google.com (Emil A Eklund)\n */\n\ngoog.provide('goog.date');\ngoog.provide('goog.date.Date');\ngoog.provide('goog.date.DateTime');\ngoog.provide('goog.date.Interval');\ngoog.provide('goog.date.month');\ngoog.provide('goog.date.weekDay');\n\ngoog.require('goog.asserts');\n/** @suppress {extraRequire} */\ngoog.require('goog.date.DateLike');\ngoog.require('goog.i18n.DateTimeSymbols');\ngoog.require('goog.string');\n\n\n/**\n * Constants for weekdays.\n * @enum {number}\n */\ngoog.date.weekDay = {\n  MON: 0,\n  TUE: 1,\n  WED: 2,\n  THU: 3,\n  FRI: 4,\n  SAT: 5,\n  SUN: 6\n};\n\n\n/**\n * Constants for months.\n * @enum {number}\n */\ngoog.date.month = {\n  JAN: 0,\n  FEB: 1,\n  MAR: 2,\n  APR: 3,\n  MAY: 4,\n  JUN: 5,\n  JUL: 6,\n  AUG: 7,\n  SEP: 8,\n  OCT: 9,\n  NOV: 10,\n  DEC: 11\n};\n\n\n/**\n * Formats a month/year string.\n * Example: \"January 2008\"\n *\n * @param {string} monthName The month name to use in the result.\n * @param {number} yearNum The numeric year to use in the result.\n * @return {string} A formatted month/year string.\n * @deprecated Use goog.i18n.DateTimeFormat with\n *     goog.i18n.DateTimeFormat.Format.YEAR_MONTH_ABBR or\n *     goog.i18n.DateTimeFormat.Format.YEAR_MONTH_FULL.\n */\ngoog.date.formatMonthAndYear = function(monthName, yearNum) {\n  /** @desc Month/year format given the month name and the numeric year. */\n  var MSG_MONTH_AND_YEAR = goog.getMsg(\n      '{$monthName} {$yearNum}',\n      {'monthName': monthName, 'yearNum': String(yearNum)});\n  return MSG_MONTH_AND_YEAR;\n};\n\n\n/**\n * Regular expression for splitting date parts from ISO 8601 styled string.\n * Examples: '20060210' or '2005-02-22' or '20050222' or '2005-08'\n * or '2005-W22' or '2005W22' or '2005-W22-4', etc.\n * For explanation and more examples, see:\n * {@link http://en.wikipedia.org/wiki/ISO_8601}\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitDateStringRegex_ = new RegExp(\n    '^(\\\\d{4})(?:(?:-?(\\\\d{2})(?:-?(\\\\d{2}))?)|' +\n    '(?:-?(\\\\d{3}))|(?:-?W(\\\\d{2})(?:-?([1-7]))?))?$');\n\n\n/**\n * Regular expression for splitting time parts from ISO 8601 styled string.\n * Examples: '18:46:39.994' or '184639.994'\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitTimeStringRegex_ =\n    /^(\\d{2})(?::?(\\d{2})(?::?(\\d{2})(\\.\\d+)?)?)?$/;\n\n\n/**\n * Regular expression for splitting timezone parts from ISO 8601 styled string.\n * Example: The part after the '+' in '18:46:39+07:00'.  Or '09:30Z' (UTC).\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitTimezoneStringRegex_ = /Z|(?:([-+])(\\d{2})(?::?(\\d{2}))?)$/;\n\n\n/**\n * Regular expression for splitting duration parts from ISO 8601 styled string.\n * Example: '-P1Y2M3DT4H5M6.7S'\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitDurationRegex_ = new RegExp(\n    '^(-)?P(?:(\\\\d+)Y)?(?:(\\\\d+)M)?(?:(\\\\d+)D)?' +\n    '(T(?:(\\\\d+)H)?(?:(\\\\d+)M)?(?:(\\\\d+(?:\\\\.\\\\d+)?)S)?)?$');\n\n\n/**\n * Number of milliseconds in a day.\n * @type {number}\n */\ngoog.date.MS_PER_DAY = 24 * 60 * 60 * 1000;\n\n\n/**\n * Returns whether the given year is a leap year.\n *\n * @param {number} year Year part of date.\n * @return {boolean} Whether the given year is a leap year.\n */\ngoog.date.isLeapYear = function(year) {\n  // Leap year logic; the 4-100-400 rule\n  return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n};\n\n\n/**\n * Returns whether the given year is a long ISO year.\n * See {@link http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm}.\n *\n * @param {number} year Full year part of date.\n * @return {boolean} Whether the given year is a long ISO year.\n */\ngoog.date.isLongIsoYear = function(year) {\n  var n = 5 * year + 12 - 4 * (Math.floor(year / 100) - Math.floor(year / 400));\n  n += Math.floor((year - 100) / 400) - Math.floor((year - 102) / 400);\n  n += Math.floor((year - 200) / 400) - Math.floor((year - 199) / 400);\n\n  return n % 28 < 5;\n};\n\n\n/**\n * Returns the number of days for a given month.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date.\n * @return {number} The number of days for the given month.\n */\ngoog.date.getNumberOfDaysInMonth = function(year, month) {\n  switch (month) {\n    case goog.date.month.FEB:\n      return goog.date.isLeapYear(year) ? 29 : 28;\n    case goog.date.month.JUN:\n    case goog.date.month.SEP:\n    case goog.date.month.NOV:\n    case goog.date.month.APR:\n      return 30;\n  }\n  return 31;\n};\n\n\n/**\n * Returns true if the 2 dates are in the same day.\n * @param {goog.date.DateLike} date The time to check.\n * @param {goog.date.DateLike=} opt_now The current time.\n * @return {boolean} Whether the dates are on the same day.\n */\ngoog.date.isSameDay = function(date, opt_now) {\n  var now = opt_now || new Date(goog.now());\n  return date.getDate() == now.getDate() && goog.date.isSameMonth(date, now);\n};\n\n\n/**\n * Returns true if the 2 dates are in the same month.\n * @param {goog.date.DateLike} date The time to check.\n * @param {goog.date.DateLike=} opt_now The current time.\n * @return {boolean} Whether the dates are in the same calendar month.\n */\ngoog.date.isSameMonth = function(date, opt_now) {\n  var now = opt_now || new Date(goog.now());\n  return date.getMonth() == now.getMonth() && goog.date.isSameYear(date, now);\n};\n\n\n/**\n * Returns true if the 2 dates are in the same year.\n * @param {goog.date.DateLike} date The time to check.\n * @param {goog.date.DateLike=} opt_now The current time.\n * @return {boolean} Whether the dates are in the same calendar year.\n */\ngoog.date.isSameYear = function(date, opt_now) {\n  var now = opt_now || new Date(goog.now());\n  return date.getFullYear() == now.getFullYear();\n};\n\n\n/**\n * Static function for the day of the same week that determines the week number\n * and year of week.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date (0-11).\n * @param {number} date Day part of date (1-31).\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\n *     Monday.\n *     Monday=0, Sunday=6.\n * @return {number} the cutoff day of the same week in millis since epoch.\n * @private\n */\ngoog.date.getCutOffSameWeek_ = function(\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  var d = new Date(year, month, date);\n\n  // Default to Thursday for cut off as per ISO 8601.\n  var cutoff =\n      (opt_weekDay !== undefined) ? opt_weekDay : goog.date.weekDay.THU;\n\n  // Default to Monday for first day of the week as per ISO 8601.\n  var firstday = opt_firstDayOfWeek || goog.date.weekDay.MON;\n\n  // The d.getDay() has to be converted first to ISO weekday (Monday=0).\n  var isoday = (d.getDay() + 6) % 7;\n\n  // Position of given day in the picker grid w.r.t. first day of week\n  var daypos = (isoday - firstday + 7) % 7;\n\n  // Position of cut off day in the picker grid w.r.t. first day of week\n  var cutoffpos = (cutoff - firstday + 7) % 7;\n\n  // Unix timestamp of the midnight of the cutoff day in the week of 'd'.\n  // There might be +-1 hour shift in the result due to the daylight saving,\n  // but it doesn't affect the year.\n  return d.valueOf() + (cutoffpos - daypos) * goog.date.MS_PER_DAY;\n};\n\n\n/**\n * Static function for week number calculation. ISO 8601 implementation.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date (0-11).\n * @param {number} date Day part of date (1-31).\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\n *     Monday.\n *     Monday=0, Sunday=6.\n * @return {number} The week number (1-53).\n */\ngoog.date.getWeekNumber = function(\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  var cutoffSameWeek = goog.date.getCutOffSameWeek_(\n      year, month, date, opt_weekDay, opt_firstDayOfWeek);\n\n  // Unix timestamp of January 1 in the year of the week.\n  var jan1 = new Date(new Date(cutoffSameWeek).getFullYear(), 0, 1).valueOf();\n\n  // Number of week. The round() eliminates the effect of daylight saving.\n  return Math.floor(\n             Math.round((cutoffSameWeek - jan1) / goog.date.MS_PER_DAY) / 7) +\n      1;\n};\n\n\n/**\n * Static function for year of the week. ISO 8601 implementation.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date (0-11).\n * @param {number} date Day part of date (1-31).\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\n *     Monday.\n *     Monday=0, Sunday=6.\n * @return {number} The four digit year of date.\n */\ngoog.date.getYearOfWeek = function(\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  var cutoffSameWeek = goog.date.getCutOffSameWeek_(\n      year, month, date, opt_weekDay, opt_firstDayOfWeek);\n\n  return new Date(cutoffSameWeek).getFullYear();\n};\n\n\n/**\n * @param {T} date1 A datelike object.\n * @param {S} date2 Another datelike object.\n * @return {T|S} The earlier of them in time.\n * @template T,S\n */\ngoog.date.min = function(date1, date2) {\n  return date1 < date2 ? date1 : date2;\n};\n\n\n/**\n * @param {T} date1 A datelike object.\n * @param {S} date2 Another datelike object.\n * @return {T|S} The later of them in time.\n * @template T,S\n */\ngoog.date.max = function(date1, date2) {\n  return date1 > date2 ? date1 : date2;\n};\n\n\n/**\n * Parses a datetime string expressed in ISO 8601 format. Overwrites the date\n * and optionally the time part of the given object with the parsed values.\n *\n * @param {!goog.date.DateTime} dateTime Object whose fields will be set.\n * @param {string} formatted A date or datetime expressed in ISO 8601 format.\n * @return {boolean} Whether the parsing succeeded.\n */\ngoog.date.setIso8601DateTime = function(dateTime, formatted) {\n  formatted = goog.string.trim(formatted);\n  var delim = formatted.indexOf('T') == -1 ? ' ' : 'T';\n  var parts = formatted.split(delim);\n  return goog.date.setIso8601DateOnly_(dateTime, parts[0]) &&\n      (parts.length < 2 || goog.date.setIso8601TimeOnly_(dateTime, parts[1]));\n};\n\n\n/**\n * Sets date fields based on an ISO 8601 format string.\n *\n * @param {!goog.date.Date} d Object whose fields will be set.\n * @param {string} formatted A date expressed in ISO 8601 format.\n * @return {boolean} Whether the parsing succeeded.\n * @private\n */\ngoog.date.setIso8601DateOnly_ = function(d, formatted) {\n  // split the formatted ISO date string into its date fields\n  var parts = formatted.match(goog.date.splitDateStringRegex_);\n  if (!parts) {\n    return false;\n  }\n\n  var year = Number(parts[1]);\n  var month = Number(parts[2]);\n  var date = Number(parts[3]);\n  var dayOfYear = Number(parts[4]);\n  var week = Number(parts[5]);\n  // ISO weekdays start with 1, native getDay() values start with 0\n  var dayOfWeek = Number(parts[6]) || 1;\n\n  d.setFullYear(year);\n\n  if (dayOfYear) {\n    d.setDate(1);\n    d.setMonth(0);\n    var offset = dayOfYear - 1;  // offset, so 1-indexed, i.e., skip day 1\n    d.add(new goog.date.Interval(goog.date.Interval.DAYS, offset));\n  } else if (week) {\n    goog.date.setDateFromIso8601Week_(d, week, dayOfWeek);\n  } else {\n    if (month) {\n      d.setDate(1);\n      d.setMonth(month - 1);\n    }\n    if (date) {\n      d.setDate(date);\n    }\n  }\n\n  return true;\n};\n\n\n/**\n * Sets date fields based on an ISO 8601 week string.\n * See {@link http://en.wikipedia.org/wiki/ISO_week_date}, \"Relation with the\n * Gregorian Calendar\".  The first week of a new ISO year is the week with the\n * majority of its days in the new Gregorian year.  I.e., ISO Week 1's Thursday\n * is in that year.  ISO weeks always start on Monday. So ISO Week 1 can\n * contain a few days from the previous Gregorian year.  And ISO weeks always\n * end on Sunday, so the last ISO week (Week 52 or 53) can have a few days from\n * the following Gregorian year.\n * Example: '1997-W01' lasts from 1996-12-30 to 1997-01-05.  January 1, 1997 is\n * a Wednesday. So W01's Monday is Dec.30, 1996, and Sunday is January 5, 1997.\n *\n * @param {!goog.date.Date} d Object whose fields will be set.\n * @param {number} week ISO week number.\n * @param {number} dayOfWeek ISO day of week.\n * @private\n */\ngoog.date.setDateFromIso8601Week_ = function(d, week, dayOfWeek) {\n  // calculate offset for first week\n  d.setMonth(0);\n  d.setDate(1);\n  var jsDay = d.getDay();\n  // switch Sunday (0) to index 7; ISO days are 1-indexed\n  var jan1WeekDay = jsDay || 7;\n\n  var THURSDAY = 4;\n  if (jan1WeekDay <= THURSDAY) {\n    // was extended back to Monday\n    var startDelta = 1 - jan1WeekDay;  // e.g., Thu(4) ==> -3\n  } else {\n    // was extended forward to Monday\n    startDelta = 8 - jan1WeekDay;  // e.g., Fri(5) ==> +3\n  }\n\n  // find the absolute number of days to offset from the start of year\n  // to arrive close to the Gregorian equivalent (pending adjustments above)\n  // Note: decrement week multiplier by one because 1st week is\n  // represented by dayOfWeek value\n  var absoluteDays = Number(dayOfWeek) + (7 * (Number(week) - 1));\n\n  // convert from ISO weekday format to Gregorian calendar date\n  // note: subtract 1 because 1-indexed; offset should not include 1st of month\n  var delta = startDelta + absoluteDays - 1;\n  var interval = new goog.date.Interval(goog.date.Interval.DAYS, delta);\n  d.add(interval);\n};\n\n\n/**\n * Sets time fields based on an ISO 8601 format string.\n * Note: only time fields, not date fields.\n *\n * @param {!goog.date.DateTime} d Object whose fields will be set.\n * @param {string} formatted A time expressed in ISO 8601 format.\n * @return {boolean} Whether the parsing succeeded.\n * @private\n */\ngoog.date.setIso8601TimeOnly_ = function(d, formatted) {\n  // first strip timezone info from the end\n  var timezoneParts = formatted.match(goog.date.splitTimezoneStringRegex_);\n\n  var offsetMinutes;  // Offset from UTC if not local time\n  var formattedTime;  // The time components of the input string; no timezone.\n\n  if (timezoneParts) {\n    // Trim off the timezone characters.\n    formattedTime =\n        formatted.substring(0, formatted.length - timezoneParts[0].length);\n\n    // 'Z' indicates a UTC timestring.\n    if (timezoneParts[0] === 'Z') {\n      offsetMinutes = 0;\n    } else {\n      offsetMinutes = Number(timezoneParts[2]) * 60 + Number(timezoneParts[3]);\n      offsetMinutes *= (timezoneParts[1] == '-') ? 1 : -1;\n    }\n  } else {\n    formattedTime = formatted;\n  }\n\n  var timeParts = formattedTime.match(goog.date.splitTimeStringRegex_);\n  if (!timeParts) {\n    return false;\n  }\n\n  // We have to branch on local vs non-local times because we can't always\n  // calculate the correct UTC offset for the specified time. Specifically, the\n  // offset for daylight-savings time depends on the date being set. Therefore,\n  // when an offset is specified, we apply it verbatim.\n  if (timezoneParts) {\n    goog.asserts.assertNumber(offsetMinutes);\n\n    // Convert the date part into UTC. This is important because the local date\n    // can differ from the UTC date, and the date part of an ISO 8601 string is\n    // always set in terms of the local date.\n    var year = d.getYear();\n    var month = d.getMonth();\n    var day = d.getDate();\n    var hour = Number(timeParts[1]);\n    var minute = Number(timeParts[2]) || 0;\n    var second = Number(timeParts[3]) || 0;\n    var millisecond = timeParts[4] ? Number(timeParts[4]) * 1000 : 0;\n    var utc = Date.UTC(year, month, day, hour, minute, second, millisecond);\n\n    d.setTime(utc + offsetMinutes * 60000);\n  } else {\n    d.setHours(Number(timeParts[1]));\n    d.setMinutes(Number(timeParts[2]) || 0);\n    d.setSeconds(Number(timeParts[3]) || 0);\n    d.setMilliseconds(timeParts[4] ? Number(timeParts[4]) * 1000 : 0);\n  }\n\n  return true;\n};\n\n\n\n/**\n * Class representing a date/time interval. Used for date calculations.\n * <pre>\n * new goog.date.Interval(0, 1) // One month\n * new goog.date.Interval(0, 0, 3, 1) // Three days and one hour\n * new goog.date.Interval(goog.date.Interval.DAYS, 1) // One day\n * </pre>\n *\n * @param {number|string=} opt_years Years or string representing date part.\n * @param {number=} opt_months Months or number of whatever date part specified\n *     by first parameter.\n * @param {number=} opt_days Days.\n * @param {number=} opt_hours Hours.\n * @param {number=} opt_minutes Minutes.\n * @param {number=} opt_seconds Seconds.\n * @constructor\n * @struct\n * @final\n */\ngoog.date.Interval = function(\n    opt_years, opt_months, opt_days, opt_hours, opt_minutes, opt_seconds) {\n  if (typeof opt_years === 'string') {\n    var type = opt_years;\n    var interval = /** @type {number} */ (opt_months);\n    /** @type {number} */\n    this.years = type == goog.date.Interval.YEARS ? interval : 0;\n    /** @type {number} */\n    this.months = type == goog.date.Interval.MONTHS ? interval : 0;\n    /** @type {number} */\n    this.days = type == goog.date.Interval.DAYS ? interval : 0;\n    /** @type {number} */\n    this.hours = type == goog.date.Interval.HOURS ? interval : 0;\n    /** @type {number} */\n    this.minutes = type == goog.date.Interval.MINUTES ? interval : 0;\n    /** @type {number} */\n    this.seconds = type == goog.date.Interval.SECONDS ? interval : 0;\n  } else {\n    this.years = /** @type {number} */ (opt_years) || 0;\n    this.months = opt_months || 0;\n    this.days = opt_days || 0;\n    this.hours = opt_hours || 0;\n    this.minutes = opt_minutes || 0;\n    this.seconds = opt_seconds || 0;\n  }\n};\n\n\n/**\n * Parses an XML Schema duration (ISO 8601 extended).\n * @see http://www.w3.org/TR/xmlschema-2/#duration\n *\n * @param  {string} duration An XML schema duration in textual format.\n *     Recurring durations and weeks are not supported.\n * @return {goog.date.Interval} The duration as a goog.date.Interval or null\n *     if the parse fails.\n */\ngoog.date.Interval.fromIsoString = function(duration) {\n  var parts = duration.match(goog.date.splitDurationRegex_);\n  if (!parts) {\n    return null;\n  }\n\n  var timeEmpty = !(parts[6] || parts[7] || parts[8]);\n  var dateTimeEmpty = timeEmpty && !(parts[2] || parts[3] || parts[4]);\n  if (dateTimeEmpty || timeEmpty && parts[5]) {\n    return null;\n  }\n\n  var negative = parts[1];\n  var years = parseInt(parts[2], 10) || 0;\n  var months = parseInt(parts[3], 10) || 0;\n  var days = parseInt(parts[4], 10) || 0;\n  var hours = parseInt(parts[6], 10) || 0;\n  var minutes = parseInt(parts[7], 10) || 0;\n  var seconds = parseFloat(parts[8]) || 0;\n  return negative ?\n      new goog.date.Interval(\n          -years, -months, -days, -hours, -minutes, -seconds) :\n      new goog.date.Interval(years, months, days, hours, minutes, seconds);\n};\n\n\n/**\n * Serializes goog.date.Interval into XML Schema duration (ISO 8601 extended).\n * @see http://www.w3.org/TR/xmlschema-2/#duration\n *\n * @param {boolean=} opt_verbose Include zero fields in the duration string.\n * @return {?string} An XML schema duration in ISO 8601 extended format,\n *     or null if the interval contains both positive and negative fields.\n */\ngoog.date.Interval.prototype.toIsoString = function(opt_verbose) {\n  var minField = Math.min(\n      this.years, this.months, this.days, this.hours, this.minutes,\n      this.seconds);\n  var maxField = Math.max(\n      this.years, this.months, this.days, this.hours, this.minutes,\n      this.seconds);\n  if (minField < 0 && maxField > 0) {\n    return null;\n  }\n\n  // Return 0 seconds if all fields are zero.\n  if (!opt_verbose && minField == 0 && maxField == 0) {\n    return 'PT0S';\n  }\n\n  var res = [];\n\n  // Add sign and 'P' prefix.\n  if (minField < 0) {\n    res.push('-');\n  }\n  res.push('P');\n\n  // Add date.\n  if (this.years || opt_verbose) {\n    res.push(Math.abs(this.years) + 'Y');\n  }\n  if (this.months || opt_verbose) {\n    res.push(Math.abs(this.months) + 'M');\n  }\n  if (this.days || opt_verbose) {\n    res.push(Math.abs(this.days) + 'D');\n  }\n\n  // Add time.\n  if (this.hours || this.minutes || this.seconds || opt_verbose) {\n    res.push('T');\n    if (this.hours || opt_verbose) {\n      res.push(Math.abs(this.hours) + 'H');\n    }\n    if (this.minutes || opt_verbose) {\n      res.push(Math.abs(this.minutes) + 'M');\n    }\n    if (this.seconds || opt_verbose) {\n      res.push(Math.abs(this.seconds) + 'S');\n    }\n  }\n\n  return res.join('');\n};\n\n\n/**\n * Tests whether the given interval is equal to this interval.\n * Note, this is a simple field-by-field comparison, it doesn't\n * account for comparisons like \"12 months == 1 year\".\n *\n * @param {goog.date.Interval} other The interval to test.\n * @return {boolean} Whether the intervals are equal.\n */\ngoog.date.Interval.prototype.equals = function(other) {\n  return other.years == this.years && other.months == this.months &&\n      other.days == this.days && other.hours == this.hours &&\n      other.minutes == this.minutes && other.seconds == this.seconds;\n};\n\n\n/**\n * @return {!goog.date.Interval} A clone of the interval object.\n */\ngoog.date.Interval.prototype.clone = function() {\n  return new goog.date.Interval(\n      this.years, this.months, this.days, this.hours, this.minutes,\n      this.seconds);\n};\n\n\n/**\n * Years constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.YEARS = 'y';\n\n\n/**\n * Months constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.MONTHS = 'm';\n\n\n/**\n * Days constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.DAYS = 'd';\n\n\n/**\n * Hours constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.HOURS = 'h';\n\n\n/**\n * Minutes constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.MINUTES = 'n';\n\n\n/**\n * Seconds constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.SECONDS = 's';\n\n\n/**\n * @return {boolean} Whether all fields of the interval are zero.\n */\ngoog.date.Interval.prototype.isZero = function() {\n  return this.years == 0 && this.months == 0 && this.days == 0 &&\n      this.hours == 0 && this.minutes == 0 && this.seconds == 0;\n};\n\n\n/**\n * @return {!goog.date.Interval} Negative of this interval.\n */\ngoog.date.Interval.prototype.getInverse = function() {\n  return this.times(-1);\n};\n\n\n/**\n * Calculates n * (this interval) by memberwise multiplication.\n * @param {number} n An integer.\n * @return {!goog.date.Interval} n * this.\n */\ngoog.date.Interval.prototype.times = function(n) {\n  return new goog.date.Interval(\n      this.years * n, this.months * n, this.days * n, this.hours * n,\n      this.minutes * n, this.seconds * n);\n};\n\n\n/**\n * Gets the total number of seconds in the time interval. Assumes that months\n * and years are empty.\n * @return {number} Total number of seconds in the interval.\n */\ngoog.date.Interval.prototype.getTotalSeconds = function() {\n  goog.asserts.assert(this.years == 0 && this.months == 0);\n  return ((this.days * 24 + this.hours) * 60 + this.minutes) * 60 +\n      this.seconds;\n};\n\n\n/**\n * Adds the Interval in the argument to this Interval field by field.\n *\n * @param {goog.date.Interval} interval The Interval to add.\n */\ngoog.date.Interval.prototype.add = function(interval) {\n  this.years += interval.years;\n  this.months += interval.months;\n  this.days += interval.days;\n  this.hours += interval.hours;\n  this.minutes += interval.minutes;\n  this.seconds += interval.seconds;\n};\n\n\n\n/**\n * Class representing a date. Defaults to current date if none is specified.\n *\n * Implements most methods of the native js Date object (except the time related\n * ones, {@see goog.date.DateTime}) and can be used interchangeably with it just\n * as if goog.date.Date was a synonym of Date. To make this more transparent,\n * Closure APIs should accept goog.date.DateLike instead of the real Date\n * object.\n *\n * @param {number|goog.date.DateLike=} opt_year Four digit year or a date-like\n *     object. If not set, the created object will contain the date\n *     determined by goog.now().\n * @param {number=} opt_month Month, 0 = Jan, 11 = Dec.\n * @param {number=} opt_date Date of month, 1 - 31.\n * @constructor\n * @struct\n * @see goog.date.DateTime\n */\ngoog.date.Date = function(opt_year, opt_month, opt_date) {\n  /** @protected {!Date} The wrapped date or datetime. */\n  this.date;\n  // goog.date.DateTime assumes that only this.date is added in this ctor.\n  if (typeof opt_year === 'number') {\n    this.date = this.buildDate_(opt_year, opt_month || 0, opt_date || 1);\n    this.maybeFixDst_(opt_date || 1);\n  } else if (goog.isObject(opt_year)) {\n    this.date = this.buildDate_(\n        opt_year.getFullYear(), opt_year.getMonth(), opt_year.getDate());\n    this.maybeFixDst_(opt_year.getDate());\n  } else {\n    this.date = new Date(goog.now());\n    var expectedDate = this.date.getDate();\n    this.date.setHours(0);\n    this.date.setMinutes(0);\n    this.date.setSeconds(0);\n    this.date.setMilliseconds(0);\n    // In some time zones there is no \"0\" hour on certain days during DST.\n    // Adjust here, if necessary. See:\n    // https://github.com/google/closure-library/issues/34.\n    this.maybeFixDst_(expectedDate);\n  }\n};\n\n\n/**\n * new Date(y, m, d) treats years in the interval [0, 100) as two digit years,\n * adding 1900 to them. This method ensures that calling the date constructor\n * as a copy constructor returns a value that is equal to the passed in\n * date value by explicitly setting the full year.\n * @private\n * @param {number} fullYear The full year (including century).\n * @param {number} month The month, from 0-11.\n * @param {number} date The day of the month.\n * @return {!Date} The constructed Date object.\n */\ngoog.date.Date.prototype.buildDate_ = function(fullYear, month, date) {\n  var d = new Date(fullYear, month, date);\n  if (fullYear >= 0 && fullYear < 100) {\n    // Can't just setFullYear as new Date() can flip over for e.g. month = 13.\n    d.setFullYear(d.getFullYear() - 1900);\n  }\n  return d;\n};\n\n\n/**\n * First day of week. 0 = Mon, 6 = Sun.\n * @type {number}\n * @private\n */\ngoog.date.Date.prototype.firstDayOfWeek_ =\n    goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK;\n\n\n/**\n * The cut off weekday used for week number calculations. 0 = Mon, 6 = Sun.\n * @type {number}\n * @private\n */\ngoog.date.Date.prototype.firstWeekCutOffDay_ =\n    goog.i18n.DateTimeSymbols.FIRSTWEEKCUTOFFDAY;\n\n\n/**\n * @return {!goog.date.Date} A clone of the date object.\n */\ngoog.date.Date.prototype.clone = function() {\n  var date = new goog.date.Date(this.date);\n  date.firstDayOfWeek_ = this.firstDayOfWeek_;\n  date.firstWeekCutOffDay_ = this.firstWeekCutOffDay_;\n\n  return date;\n};\n\n\n/**\n * @return {number} The four digit year of date.\n */\ngoog.date.Date.prototype.getFullYear = function() {\n  return this.date.getFullYear();\n};\n\n\n/**\n * Alias for getFullYear.\n *\n * @return {number} The four digit year of date.\n * @see #getFullYear\n */\ngoog.date.Date.prototype.getYear = function() {\n  return this.getFullYear();\n};\n\n\n/**\n * @return {goog.date.month} The month of date, 0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.getMonth = function() {\n  return /** @type {goog.date.month} */ (this.date.getMonth());\n};\n\n\n/**\n * @return {number} The date of month.\n */\ngoog.date.Date.prototype.getDate = function() {\n  return this.date.getDate();\n};\n\n\n/**\n * Returns the number of milliseconds since 1 January 1970 00:00:00.\n *\n * @return {number} The number of milliseconds since 1 January 1970 00:00:00.\n */\ngoog.date.Date.prototype.getTime = function() {\n  return this.date.getTime();\n};\n\n\n/**\n * @return {number} The day of week, US style. 0 = Sun, 6 = Sat.\n */\ngoog.date.Date.prototype.getDay = function() {\n  return this.date.getDay();\n};\n\n\n/**\n * @return {goog.date.weekDay} The day of week, ISO style. 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getIsoWeekday = function() {\n  return /** @type {goog.date.weekDay} */ ((this.getDay() + 6) % 7);\n};\n\n\n/**\n * @return {number} The day of week according to firstDayOfWeek setting.\n */\ngoog.date.Date.prototype.getWeekday = function() {\n  return (this.getIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;\n};\n\n\n/**\n * @return {number} The four digit year of date according to universal time.\n */\ngoog.date.Date.prototype.getUTCFullYear = function() {\n  return this.date.getUTCFullYear();\n};\n\n\n/**\n * @return {goog.date.month} The month of date according to universal time,\n *     0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.getUTCMonth = function() {\n  return /** @type {goog.date.month} */ (this.date.getUTCMonth());\n};\n\n\n/**\n * @return {number} The date of month according to universal time.\n */\ngoog.date.Date.prototype.getUTCDate = function() {\n  return this.date.getUTCDate();\n};\n\n\n/**\n * @return {number} The day of week according to universal time, US style.\n *     0 = Sun, 1 = Mon, 6 = Sat.\n */\ngoog.date.Date.prototype.getUTCDay = function() {\n  return this.date.getDay();\n};\n\n\n/**\n * @return {number} The hours value according to universal time.\n */\ngoog.date.Date.prototype.getUTCHours = function() {\n  return this.date.getUTCHours();\n};\n\n\n/**\n * @return {number} The minutes value according to universal time.\n */\ngoog.date.Date.prototype.getUTCMinutes = function() {\n  return this.date.getUTCMinutes();\n};\n\n\n/**\n * @return {goog.date.weekDay} The day of week according to universal time, ISO\n *     style. 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getUTCIsoWeekday = function() {\n  return /** @type {goog.date.weekDay} */ ((this.date.getUTCDay() + 6) % 7);\n};\n\n\n/**\n * @return {number} The day of week according to universal time and\n *     firstDayOfWeek setting.\n */\ngoog.date.Date.prototype.getUTCWeekday = function() {\n  return (this.getUTCIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;\n};\n\n\n/**\n * @return {number} The first day of the week. 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getFirstDayOfWeek = function() {\n  return this.firstDayOfWeek_;\n};\n\n\n/**\n * @return {number} The cut off weekday used for week number calculations.\n *     0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getFirstWeekCutOffDay = function() {\n  return this.firstWeekCutOffDay_;\n};\n\n\n/**\n * @return {number} The number of days for the selected month.\n */\ngoog.date.Date.prototype.getNumberOfDaysInMonth = function() {\n  return goog.date.getNumberOfDaysInMonth(this.getFullYear(), this.getMonth());\n};\n\n\n/**\n * @return {number} The week number.\n */\ngoog.date.Date.prototype.getWeekNumber = function() {\n  return goog.date.getWeekNumber(\n      this.getFullYear(), this.getMonth(), this.getDate(),\n      this.firstWeekCutOffDay_, this.firstDayOfWeek_);\n};\n\n\n/**\n * Returns year in \u201cWeek of Year\u201d based calendars in which the year transition\n * occurs on a week boundary.\n * @return {number} The four digit year in \"Week of Year\"\n */\ngoog.date.Date.prototype.getYearOfWeek = function() {\n  return goog.date.getYearOfWeek(\n      this.getFullYear(), this.getMonth(), this.getDate(),\n      this.firstWeekCutOffDay_, this.firstDayOfWeek_);\n};\n\n\n/**\n * @return {number} The day of year.\n */\ngoog.date.Date.prototype.getDayOfYear = function() {\n  var dayOfYear = this.getDate();\n  var year = this.getFullYear();\n  for (var m = this.getMonth() - 1; m >= 0; m--) {\n    dayOfYear += goog.date.getNumberOfDaysInMonth(year, m);\n  }\n\n  return dayOfYear;\n};\n\n\n/**\n * Returns timezone offset. The timezone offset is the delta in minutes between\n * UTC and your local time. E.g., UTC+10 returns -600. Daylight savings time\n * prevents this value from being constant.\n *\n * @return {number} The timezone offset.\n */\ngoog.date.Date.prototype.getTimezoneOffset = function() {\n  return this.date.getTimezoneOffset();\n};\n\n\n/**\n * Returns timezone offset as a string. Returns offset in [+-]HH:mm format or Z\n * for UTC.\n *\n * @return {string} The timezone offset as a string.\n */\ngoog.date.Date.prototype.getTimezoneOffsetString = function() {\n  var tz;\n  var offset = this.getTimezoneOffset();\n\n  if (offset == 0) {\n    tz = 'Z';\n  } else {\n    var n = Math.abs(offset) / 60;\n    var h = Math.floor(n);\n    var m = (n - h) * 60;\n    tz = (offset > 0 ? '-' : '+') + goog.string.padNumber(h, 2) + ':' +\n        goog.string.padNumber(m, 2);\n  }\n\n  return tz;\n};\n\n\n/**\n * Sets the date.\n *\n * @param {goog.date.Date} date Date object to set date from.\n */\ngoog.date.Date.prototype.set = function(date) {\n  this.date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n};\n\n\n/**\n * Sets the year part of the date.\n *\n * @param {number} year Four digit year.\n */\ngoog.date.Date.prototype.setFullYear = function(year) {\n  this.date.setFullYear(year);\n};\n\n\n/**\n * Alias for setFullYear.\n *\n * @param {number} year Four digit year.\n * @see #setFullYear\n */\ngoog.date.Date.prototype.setYear = function(year) {\n  this.setFullYear(year);\n};\n\n\n/**\n * Sets the month part of the date.\n *\n * TODO(nnaze): Update type to goog.date.month.\n *\n * @param {number} month The month, where 0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.setMonth = function(month) {\n  this.date.setMonth(month);\n};\n\n\n/**\n * Sets the day part of the date.\n *\n * @param {number} date The day part.\n */\ngoog.date.Date.prototype.setDate = function(date) {\n  this.date.setDate(date);\n};\n\n\n/**\n * Sets the value of the date object as expressed in the number of milliseconds\n * since 1 January 1970 00:00:00.\n *\n * @param {number} ms Number of milliseconds since 1 Jan 1970.\n */\ngoog.date.Date.prototype.setTime = function(ms) {\n  this.date.setTime(ms);\n};\n\n\n/**\n * Sets the year part of the date according to universal time.\n *\n * @param {number} year Four digit year.\n */\ngoog.date.Date.prototype.setUTCFullYear = function(year) {\n  this.date.setUTCFullYear(year);\n};\n\n\n/**\n * Sets the month part of the date according to universal time.\n *\n * @param {number} month The month, where 0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.setUTCMonth = function(month) {\n  this.date.setUTCMonth(month);\n};\n\n\n/**\n * Sets the day part of the date according to universal time.\n *\n * @param {number} date The UTC date.\n */\ngoog.date.Date.prototype.setUTCDate = function(date) {\n  this.date.setUTCDate(date);\n};\n\n\n/**\n * Sets the first day of week.\n *\n * @param {number} day 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.setFirstDayOfWeek = function(day) {\n  this.firstDayOfWeek_ = day;\n};\n\n\n/**\n * Sets cut off weekday used for week number calculations. 0 = Mon, 6 = Sun.\n *\n * @param {number} day The cut off weekday.\n */\ngoog.date.Date.prototype.setFirstWeekCutOffDay = function(day) {\n  this.firstWeekCutOffDay_ = day;\n};\n\n\n/**\n * Performs date calculation by adding the supplied interval to the date.\n *\n * @param {goog.date.Interval} interval Date interval to add.\n */\ngoog.date.Date.prototype.add = function(interval) {\n  if (interval.years || interval.months) {\n    // As months have different number of days adding a month to Jan 31 by just\n    // setting the month would result in a date in early March rather than Feb\n    // 28 or 29. Doing it this way overcomes that problem.\n\n    // adjust year and month, accounting for both directions\n    var month = this.getMonth() + interval.months + interval.years * 12;\n    var year = this.getYear() + Math.floor(month / 12);\n    month %= 12;\n    if (month < 0) {\n      month += 12;\n    }\n\n    var daysInTargetMonth = goog.date.getNumberOfDaysInMonth(year, month);\n    var date = Math.min(daysInTargetMonth, this.getDate());\n\n    // avoid inadvertently causing rollovers to adjacent months\n    this.setDate(1);\n\n    this.setFullYear(year);\n    this.setMonth(month);\n    this.setDate(date);\n  }\n\n  if (interval.days) {\n    // Convert the days to milliseconds and add it to the UNIX timestamp.\n    // Taking noon helps to avoid 1 day error due to the daylight saving.\n    var noon = new Date(this.getYear(), this.getMonth(), this.getDate(), 12);\n    var result = new Date(noon.getTime() + interval.days * 86400000);\n\n    // Set date to 1 to prevent rollover caused by setting the year or month.\n    this.setDate(1);\n    this.setFullYear(result.getFullYear());\n    this.setMonth(result.getMonth());\n    this.setDate(result.getDate());\n\n    this.maybeFixDst_(result.getDate());\n  }\n};\n\n\n/**\n * Returns ISO 8601 string representation of date.\n *\n * @param {boolean=} opt_verbose Whether the verbose format should be used\n *     instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included\n *     in the string.\n * @return {string} ISO 8601 string representation of date.\n */\ngoog.date.Date.prototype.toIsoString = function(opt_verbose, opt_tz) {\n  var str = [\n    this.getFullYear(), goog.string.padNumber(this.getMonth() + 1, 2),\n    goog.string.padNumber(this.getDate(), 2)\n  ];\n\n  return str.join((opt_verbose) ? '-' : '') +\n      (opt_tz ? this.getTimezoneOffsetString() : '');\n};\n\n\n/**\n * Returns ISO 8601 string representation of date according to universal time.\n *\n * @param {boolean=} opt_verbose Whether the verbose format should be used\n *     instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included in\n *     the string.\n * @return {string} ISO 8601 string representation of date according to\n *     universal time.\n */\ngoog.date.Date.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {\n  var str = [\n    this.getUTCFullYear(), goog.string.padNumber(this.getUTCMonth() + 1, 2),\n    goog.string.padNumber(this.getUTCDate(), 2)\n  ];\n\n  return str.join((opt_verbose) ? '-' : '') + (opt_tz ? 'Z' : '');\n};\n\n\n/**\n * Tests whether given date is equal to this Date.\n * Note: This ignores units more precise than days (hours and below)\n * and also ignores timezone considerations.\n *\n * @param {goog.date.Date} other The date to compare.\n * @return {boolean} Whether the given date is equal to this one.\n */\ngoog.date.Date.prototype.equals = function(other) {\n  return !!(\n      other && this.getYear() == other.getYear() &&\n      this.getMonth() == other.getMonth() && this.getDate() == other.getDate());\n};\n\n\n/**\n * Overloaded toString method for object.\n * @return {string} ISO 8601 string representation of date.\n * @override\n */\ngoog.date.Date.prototype.toString = function() {\n  return this.toIsoString();\n};\n\n\n/**\n * Fixes date to account for daylight savings time in browsers that fail to do\n * so automatically.\n * @param {number} expected Expected date.\n * @private\n */\ngoog.date.Date.prototype.maybeFixDst_ = function(expected) {\n  if (this.getDate() != expected) {\n    var dir = this.getDate() < expected ? 1 : -1;\n    this.date.setUTCHours(this.date.getUTCHours() + dir);\n  }\n};\n\n\n/**\n * @return {number} Value of wrapped date.\n * @override\n */\ngoog.date.Date.prototype.valueOf = function() {\n  return this.date.valueOf();\n};\n\n\n/**\n * Compares two dates.  May be used as a sorting function.\n * @see goog.array.sort\n * @param {!goog.date.DateLike} date1 Date to compare.\n * @param {!goog.date.DateLike} date2 Date to compare.\n * @return {number} Comparison result. 0 if dates are the same, less than 0 if\n *     date1 is earlier than date2, greater than 0 if date1 is later than date2.\n */\ngoog.date.Date.compare = function(date1, date2) {\n  return date1.getTime() - date2.getTime();\n};\n\n\n/**\n * Parses an ISO 8601 string as a `goog.date.Date`.\n * @param {string} formatted ISO 8601 string to parse.\n * @return {?goog.date.Date} Parsed date or null if parse fails.\n */\ngoog.date.Date.fromIsoString = function(formatted) {\n  var ret = new goog.date.Date(2000);\n  return goog.date.setIso8601DateOnly_(ret, formatted) ? ret : null;\n};\n\n\n\n/**\n * Class representing a date and time. Defaults to current date and time if none\n * is specified.\n *\n * Implements most methods of the native js Date object and can be used\n * interchangeably with it just as if goog.date.DateTime was a subclass of Date.\n *\n * @param {(number|{getTime:?}|null)=} opt_year Four digit year or a date-like\n *     object. If not set, the created object will contain the date determined\n *     by goog.now().\n * @param {number=} opt_month Month, 0 = Jan, 11 = Dec.\n * @param {number=} opt_date Date of month, 1 - 31.\n * @param {number=} opt_hours Hours, 0 - 23.\n * @param {number=} opt_minutes Minutes, 0 - 59.\n * @param {number=} opt_seconds Seconds, 0 - 61.\n * @param {number=} opt_milliseconds Milliseconds, 0 - 999.\n * @constructor\n * @struct\n * @extends {goog.date.Date}\n */\ngoog.date.DateTime = function(\n    opt_year, opt_month, opt_date, opt_hours, opt_minutes, opt_seconds,\n    opt_milliseconds) {\n  if (typeof opt_year === 'number') {\n    /** @override */\n    this.date = new Date(\n        opt_year, opt_month || 0, opt_date || 1, opt_hours || 0,\n        opt_minutes || 0, opt_seconds || 0, opt_milliseconds || 0);\n  } else {\n    this.date = new Date(\n        opt_year && opt_year.getTime ? opt_year.getTime() : goog.now());\n  }\n};\ngoog.inherits(goog.date.DateTime, goog.date.Date);\n\n\n/**\n * @param {number} timestamp Number of milliseconds since Epoch.\n * @return {!goog.date.DateTime}\n */\ngoog.date.DateTime.fromTimestamp = function(timestamp) {\n  var date = new goog.date.DateTime();\n  date.setTime(timestamp);\n  return date;\n};\n\n\n/**\n * Creates a DateTime from a datetime string expressed in RFC 822 format.\n *\n * @param {string} formatted A date or datetime expressed in RFC 822 format.\n * @return {goog.date.DateTime} Parsed date or null if parse fails.\n */\ngoog.date.DateTime.fromRfc822String = function(formatted) {\n  var date = new Date(formatted);\n  return !isNaN(date.getTime()) ? new goog.date.DateTime(date) : null;\n};\n\n\n/**\n * Returns the hours part of the datetime.\n *\n * @return {number} An integer between 0 and 23, representing the hour.\n */\ngoog.date.DateTime.prototype.getHours = function() {\n  return this.date.getHours();\n};\n\n\n/**\n * Returns the minutes part of the datetime.\n *\n * @return {number} An integer between 0 and 59, representing the minutes.\n */\ngoog.date.DateTime.prototype.getMinutes = function() {\n  return this.date.getMinutes();\n};\n\n\n/**\n * Returns the seconds part of the datetime.\n *\n * @return {number} An integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.getSeconds = function() {\n  return this.date.getSeconds();\n};\n\n\n/**\n * Returns the milliseconds part of the datetime.\n *\n * @return {number} An integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.getMilliseconds = function() {\n  return this.date.getMilliseconds();\n};\n\n\n/**\n * Returns the day of week according to universal time, US style.\n *\n * @return {goog.date.weekDay} Day of week, 0 = Sun, 1 = Mon, 6 = Sat.\n * @override\n */\ngoog.date.DateTime.prototype.getUTCDay = function() {\n  return /** @type {goog.date.weekDay} */ (this.date.getUTCDay());\n};\n\n\n/**\n * Returns the hours part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 23, representing the hour.\n * @override\n */\ngoog.date.DateTime.prototype.getUTCHours = function() {\n  return this.date.getUTCHours();\n};\n\n\n/**\n * Returns the minutes part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 59, representing the minutes.\n * @override\n */\ngoog.date.DateTime.prototype.getUTCMinutes = function() {\n  return this.date.getUTCMinutes();\n};\n\n\n/**\n * Returns the seconds part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.getUTCSeconds = function() {\n  return this.date.getUTCSeconds();\n};\n\n\n/**\n * Returns the milliseconds part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.getUTCMilliseconds = function() {\n  return this.date.getUTCMilliseconds();\n};\n\n\n/**\n * Sets the hours part of the datetime.\n *\n * @param {number} hours An integer between 0 and 23, representing the hour.\n */\ngoog.date.DateTime.prototype.setHours = function(hours) {\n  this.date.setHours(hours);\n};\n\n\n/**\n * Sets the minutes part of the datetime.\n *\n * @param {number} minutes Integer between 0 and 59, representing the minutes.\n */\ngoog.date.DateTime.prototype.setMinutes = function(minutes) {\n  this.date.setMinutes(minutes);\n};\n\n\n/**\n * Sets the seconds part of the datetime.\n *\n * @param {number} seconds Integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.setSeconds = function(seconds) {\n  this.date.setSeconds(seconds);\n};\n\n\n/**\n * Sets the milliseconds part of the datetime.\n *\n * @param {number} ms Integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.setMilliseconds = function(ms) {\n  this.date.setMilliseconds(ms);\n};\n\n\n/**\n * Sets the hours part of the datetime according to universal time.\n *\n * @param {number} hours An integer between 0 and 23, representing the hour.\n */\ngoog.date.DateTime.prototype.setUTCHours = function(hours) {\n  this.date.setUTCHours(hours);\n};\n\n\n/**\n * Sets the minutes part of the datetime according to universal time.\n *\n * @param {number} minutes Integer between 0 and 59, representing the minutes.\n */\ngoog.date.DateTime.prototype.setUTCMinutes = function(minutes) {\n  this.date.setUTCMinutes(minutes);\n};\n\n\n/**\n * Sets the seconds part of the datetime according to universal time.\n *\n * @param {number} seconds Integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.setUTCSeconds = function(seconds) {\n  this.date.setUTCSeconds(seconds);\n};\n\n\n/**\n * Sets the seconds part of the datetime according to universal time.\n *\n * @param {number} ms Integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.setUTCMilliseconds = function(ms) {\n  this.date.setUTCMilliseconds(ms);\n};\n\n\n/**\n * @return {boolean} Whether the datetime is aligned to midnight.\n */\ngoog.date.DateTime.prototype.isMidnight = function() {\n  return this.getHours() == 0 && this.getMinutes() == 0 &&\n      this.getSeconds() == 0 && this.getMilliseconds() == 0;\n};\n\n\n/**\n * Performs date calculation by adding the supplied interval to the date.\n *\n * @param {goog.date.Interval} interval Date interval to add.\n * @override\n */\ngoog.date.DateTime.prototype.add = function(interval) {\n  goog.date.Date.prototype.add.call(this, interval);\n\n  if (interval.hours) {\n    this.setUTCHours(this.date.getUTCHours() + interval.hours);\n  }\n  if (interval.minutes) {\n    this.setUTCMinutes(this.date.getUTCMinutes() + interval.minutes);\n  }\n  if (interval.seconds) {\n    this.setUTCSeconds(this.date.getUTCSeconds() + interval.seconds);\n  }\n};\n\n\n/**\n * Returns ISO 8601 string representation of date/time.\n *\n * @param {boolean=} opt_verbose Whether the verbose format should be used\n *     instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included\n *     in the string.\n * @return {string} ISO 8601 string representation of date/time.\n * @override\n */\ngoog.date.DateTime.prototype.toIsoString = function(opt_verbose, opt_tz) {\n  var dateString = goog.date.Date.prototype.toIsoString.call(this, opt_verbose);\n\n  if (opt_verbose) {\n    return dateString + 'T' + goog.string.padNumber(this.getHours(), 2) + ':' +\n        goog.string.padNumber(this.getMinutes(), 2) + ':' +\n        goog.string.padNumber(this.getSeconds(), 2) +\n        (opt_tz ? this.getTimezoneOffsetString() : '');\n  }\n\n  return dateString + 'T' + goog.string.padNumber(this.getHours(), 2) +\n      goog.string.padNumber(this.getMinutes(), 2) +\n      goog.string.padNumber(this.getSeconds(), 2) +\n      (opt_tz ? this.getTimezoneOffsetString() : '');\n};\n\n\n/**\n * Returns XML Schema 2 string representation of date/time.\n * The return value is also ISO 8601 compliant.\n *\n * @param {boolean=} opt_timezone Should the timezone offset be included in the\n *     string?.\n * @return {string} XML Schema 2 string representation of date/time.\n */\ngoog.date.DateTime.prototype.toXmlDateTime = function(opt_timezone) {\n  return goog.date.Date.prototype.toIsoString.call(this, true) + 'T' +\n      goog.string.padNumber(this.getHours(), 2) + ':' +\n      goog.string.padNumber(this.getMinutes(), 2) + ':' +\n      goog.string.padNumber(this.getSeconds(), 2) +\n      (opt_timezone ? this.getTimezoneOffsetString() : '');\n};\n\n\n/**\n * Returns ISO 8601 string representation of date/time according to universal\n * time.\n *\n * @param {boolean=} opt_verbose Whether the opt_verbose format should be\n *     returned instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included in\n *     the string.\n * @return {string} ISO 8601 string representation of date/time according to\n *     universal time.\n * @override\n */\ngoog.date.DateTime.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {\n  var dateStr = goog.date.Date.prototype.toUTCIsoString.call(this, opt_verbose);\n\n  if (opt_verbose) {\n    return dateStr + 'T' + goog.string.padNumber(this.getUTCHours(), 2) + ':' +\n        goog.string.padNumber(this.getUTCMinutes(), 2) + ':' +\n        goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? 'Z' : '');\n  }\n\n  return dateStr + 'T' + goog.string.padNumber(this.getUTCHours(), 2) +\n      goog.string.padNumber(this.getUTCMinutes(), 2) +\n      goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? 'Z' : '');\n};\n\n\n/**\n * Returns RFC 3339 string representation of datetime in UTC.\n *\n * @return {string} A UTC datetime expressed in RFC 3339 format.\n */\ngoog.date.DateTime.prototype.toUTCRfc3339String = function() {\n  var date = this.toUTCIsoString(true);\n  var millis = this.getUTCMilliseconds();\n  return (millis ? date + '.' + goog.string.padNumber(millis, 3) : date) + 'Z';\n};\n\n\n/**\n * Tests whether given datetime is exactly equal to this DateTime.\n *\n * @param {goog.date.Date} other The datetime to compare.\n * @return {boolean} Whether the given datetime is exactly equal to this one.\n * @override\n */\ngoog.date.DateTime.prototype.equals = function(other) {\n  return this.getTime() == other.getTime();\n};\n\n\n/**\n * Overloaded toString method for object.\n * @return {string} ISO 8601 string representation of date/time.\n * @override\n */\ngoog.date.DateTime.prototype.toString = function() {\n  return this.toIsoString();\n};\n\n\n/**\n * Generates time label for the datetime, e.g., '5:30 AM'.\n * By default this does not pad hours (e.g., to '05:30') and it does add\n * an am/pm suffix.\n * TODO(user): i18n -- hardcoding time format like this is bad.  E.g., in CJK\n *               locales, need Chinese characters for hour and minute units.\n * @param {boolean=} opt_padHours Whether to pad hours, e.g., '05:30' vs '5:30'.\n * @param {boolean=} opt_showAmPm Whether to show the 'am' and 'pm' suffix.\n * @param {boolean=} opt_omitZeroMinutes E.g., '5:00pm' becomes '5pm',\n *                                      but '5:01pm' remains '5:01pm'.\n * @return {string} The time label.\n * @deprecated Use goog.i18n.DateTimeFormat with\n *     goog.i18n.DateTimeFormat.Format.FULL_TIME or\n *     goog.i18n.DateTimeFormat.Format.LONG_TIME or\n *     goog.i18n.DateTimeFormat.Format.MEDIUM_TIME or\n *     goog.i18n.DateTimeFormat.Format.SHORT_TIME.\n */\ngoog.date.DateTime.prototype.toUsTimeString = function(\n    opt_padHours, opt_showAmPm, opt_omitZeroMinutes) {\n  var hours = this.getHours();\n\n  // show am/pm marker by default\n  if (opt_showAmPm === undefined) {\n    opt_showAmPm = true;\n  }\n\n  // 12pm\n  var isPM = hours == 12;\n\n  // change from 1-24 to 1-12 basis\n  if (hours > 12) {\n    hours -= 12;\n    isPM = true;\n  }\n\n  // midnight is expressed as \"12am\", but if am/pm marker omitted, keep as '0'\n  if (hours == 0 && opt_showAmPm) {\n    hours = 12;\n  }\n\n  var label = opt_padHours ? goog.string.padNumber(hours, 2) : String(hours);\n  var minutes = this.getMinutes();\n  if (!opt_omitZeroMinutes || minutes > 0) {\n    label += ':' + goog.string.padNumber(minutes, 2);\n  }\n\n  // by default, show am/pm suffix\n  if (opt_showAmPm) {\n    label += isPM ? ' PM' : ' AM';\n  }\n  return label;\n};\n\n\n/**\n * Generates time label for the datetime in standard ISO 24-hour time format.\n * E.g., '06:00:00' or '23:30:15'.\n * @param {boolean=} opt_showSeconds Whether to shows seconds. Defaults to TRUE.\n * @return {string} The time label.\n */\ngoog.date.DateTime.prototype.toIsoTimeString = function(opt_showSeconds) {\n  var hours = this.getHours();\n  var label = goog.string.padNumber(hours, 2) + ':' +\n      goog.string.padNumber(this.getMinutes(), 2);\n  if (opt_showSeconds === undefined || opt_showSeconds) {\n    label += ':' + goog.string.padNumber(this.getSeconds(), 2);\n  }\n  return label;\n};\n\n\n/**\n * @return {!goog.date.DateTime} A clone of the datetime object.\n * @override\n */\ngoog.date.DateTime.prototype.clone = function() {\n  var date = new goog.date.DateTime(this.date);\n  date.setFirstDayOfWeek(this.getFirstDayOfWeek());\n  date.setFirstWeekCutOffDay(this.getFirstWeekCutOffDay());\n  return date;\n};\n\n\n/**\n * Parses an ISO 8601 string as a `goog.date.DateTime`.\n * @param {string} formatted ISO 8601 string to parse.\n * @return {?goog.date.DateTime} Parsed date or null if parse fails.\n * @override\n */\ngoog.date.DateTime.fromIsoString = function(formatted) {\n  var ret = new goog.date.DateTime(2000);\n  return goog.date.setIso8601DateTime(ret, formatted) ? ret : null;\n};\n"],
"names":["goog","provide","require","date","weekDay","MON","TUE","WED","THU","FRI","SAT","SUN","month","JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC","formatMonthAndYear","goog.date.formatMonthAndYear","monthName","yearNum","MSG_MONTH_AND_YEAR","getMsg","String","splitDateStringRegex_","RegExp","splitTimeStringRegex_","splitTimezoneStringRegex_","splitDurationRegex_","MS_PER_DAY","isLeapYear","goog.date.isLeapYear","year","isLongIsoYear","goog.date.isLongIsoYear","n","Math","floor","getNumberOfDaysInMonth","goog.date.getNumberOfDaysInMonth","isSameDay","goog.date.isSameDay","opt_now","now","Date","getDate","isSameMonth","goog.date.isSameMonth","getMonth","isSameYear","goog.date.isSameYear","getFullYear","getCutOffSameWeek_","goog.date.getCutOffSameWeek_","opt_weekDay","opt_firstDayOfWeek","d","cutoff","undefined","firstday","isoday","getDay","daypos","cutoffpos","valueOf","getWeekNumber","goog.date.getWeekNumber","cutoffSameWeek","jan1","round","getYearOfWeek","goog.date.getYearOfWeek","min","goog.date.min","date1","date2","max","goog.date.max","setIso8601DateTime","goog.date.setIso8601DateTime","dateTime","formatted","string","trim","delim","indexOf","parts","split","setIso8601DateOnly_","length","setIso8601TimeOnly_","goog.date.setIso8601DateOnly_","match","Number","dayOfYear","week","dayOfWeek","setFullYear","setDate","setMonth","offset","add","Interval","DAYS","setDateFromIso8601Week_","goog.date.setDateFromIso8601Week_","jsDay","jan1WeekDay","THURSDAY","startDelta","absoluteDays","delta","interval","goog.date.setIso8601TimeOnly_","timezoneParts","offsetMinutes","formattedTime","substring","timeParts","asserts","assertNumber","getYear","day","hour","minute","second","millisecond","utc","UTC","setTime","setHours","setMinutes","setSeconds","setMilliseconds","goog.date.Interval","opt_years","opt_months","opt_days","opt_hours","opt_minutes","opt_seconds","type","years","YEARS","months","MONTHS","days","hours","HOURS","minutes","MINUTES","seconds","SECONDS","fromIsoString","goog.date.Interval.fromIsoString","duration","timeEmpty","dateTimeEmpty","negative","parseInt","parseFloat","prototype","toIsoString","goog.date.Interval.prototype.toIsoString","opt_verbose","minField","maxField","res","push","abs","join","equals","goog.date.Interval.prototype.equals","other","clone","goog.date.Interval.prototype.clone","isZero","goog.date.Interval.prototype.isZero","getInverse","goog.date.Interval.prototype.getInverse","times","goog.date.Interval.prototype.times","getTotalSeconds","goog.date.Interval.prototype.getTotalSeconds","assert","goog.date.Interval.prototype.add","goog.date.Date","opt_year","opt_month","opt_date","buildDate_","maybeFixDst_","isObject","expectedDate","goog.date.Date.prototype.buildDate_","fullYear","firstDayOfWeek_","i18n","DateTimeSymbols","FIRSTDAYOFWEEK","firstWeekCutOffDay_","FIRSTWEEKCUTOFFDAY","goog.date.Date.prototype.clone","goog.date.Date.prototype.getFullYear","goog.date.Date.prototype.getYear","goog.date.Date.prototype.getMonth","goog.date.Date.prototype.getDate","getTime","goog.date.Date.prototype.getTime","goog.date.Date.prototype.getDay","getIsoWeekday","goog.date.Date.prototype.getIsoWeekday","getWeekday","goog.date.Date.prototype.getWeekday","getUTCFullYear","goog.date.Date.prototype.getUTCFullYear","getUTCMonth","goog.date.Date.prototype.getUTCMonth","getUTCDate","goog.date.Date.prototype.getUTCDate","getUTCDay","goog.date.Date.prototype.getUTCDay","getUTCHours","goog.date.Date.prototype.getUTCHours","getUTCMinutes","goog.date.Date.prototype.getUTCMinutes","getUTCIsoWeekday","goog.date.Date.prototype.getUTCIsoWeekday","getUTCWeekday","goog.date.Date.prototype.getUTCWeekday","getFirstDayOfWeek","goog.date.Date.prototype.getFirstDayOfWeek","getFirstWeekCutOffDay","goog.date.Date.prototype.getFirstWeekCutOffDay","goog.date.Date.prototype.getNumberOfDaysInMonth","goog.date.Date.prototype.getWeekNumber","goog.date.Date.prototype.getYearOfWeek","getDayOfYear","goog.date.Date.prototype.getDayOfYear","m","getTimezoneOffset","goog.date.Date.prototype.getTimezoneOffset","getTimezoneOffsetString","goog.date.Date.prototype.getTimezoneOffsetString","tz","h","padNumber","set","goog.date.Date.prototype.set","goog.date.Date.prototype.setFullYear","setYear","goog.date.Date.prototype.setYear","goog.date.Date.prototype.setMonth","goog.date.Date.prototype.setDate","goog.date.Date.prototype.setTime","ms","setUTCFullYear","goog.date.Date.prototype.setUTCFullYear","setUTCMonth","goog.date.Date.prototype.setUTCMonth","setUTCDate","goog.date.Date.prototype.setUTCDate","setFirstDayOfWeek","goog.date.Date.prototype.setFirstDayOfWeek","setFirstWeekCutOffDay","goog.date.Date.prototype.setFirstWeekCutOffDay","goog.date.Date.prototype.add","daysInTargetMonth","noon","result","goog.date.Date.prototype.toIsoString","opt_tz","str","toUTCIsoString","goog.date.Date.prototype.toUTCIsoString","goog.date.Date.prototype.equals","toString","goog.date.Date.prototype.toString","goog.date.Date.prototype.maybeFixDst_","expected","dir","setUTCHours","goog.date.Date.prototype.valueOf","compare","goog.date.Date.compare","goog.date.Date.fromIsoString","ret","DateTime","goog.date.DateTime","opt_milliseconds","inherits","fromTimestamp","goog.date.DateTime.fromTimestamp","timestamp","fromRfc822String","goog.date.DateTime.fromRfc822String","isNaN","getHours","goog.date.DateTime.prototype.getHours","getMinutes","goog.date.DateTime.prototype.getMinutes","getSeconds","goog.date.DateTime.prototype.getSeconds","getMilliseconds","goog.date.DateTime.prototype.getMilliseconds","goog.date.DateTime.prototype.getUTCDay","goog.date.DateTime.prototype.getUTCHours","goog.date.DateTime.prototype.getUTCMinutes","getUTCSeconds","goog.date.DateTime.prototype.getUTCSeconds","getUTCMilliseconds","goog.date.DateTime.prototype.getUTCMilliseconds","goog.date.DateTime.prototype.setHours","goog.date.DateTime.prototype.setMinutes","goog.date.DateTime.prototype.setSeconds","goog.date.DateTime.prototype.setMilliseconds","goog.date.DateTime.prototype.setUTCHours","setUTCMinutes","goog.date.DateTime.prototype.setUTCMinutes","setUTCSeconds","goog.date.DateTime.prototype.setUTCSeconds","setUTCMilliseconds","goog.date.DateTime.prototype.setUTCMilliseconds","isMidnight","goog.date.DateTime.prototype.isMidnight","goog.date.DateTime.prototype.add","call","goog.date.DateTime.prototype.toIsoString","dateString","toXmlDateTime","goog.date.DateTime.prototype.toXmlDateTime","opt_timezone","goog.date.DateTime.prototype.toUTCIsoString","dateStr","toUTCRfc3339String","goog.date.DateTime.prototype.toUTCRfc3339String","millis","goog.date.DateTime.prototype.equals","goog.date.DateTime.prototype.toString","toUsTimeString","goog.date.DateTime.prototype.toUsTimeString","opt_padHours","opt_showAmPm","opt_omitZeroMinutes","isPM","label","toIsoTimeString","goog.date.DateTime.prototype.toIsoTimeString","opt_showSeconds","goog.date.DateTime.prototype.clone","goog.date.DateTime.fromIsoString"]
}
