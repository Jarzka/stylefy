{"version":3,"sources":["shadow/cljs/devtools/client/browser.cljs"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.browser","js/shadow.cljs.devtools.client.browser.repl-ns-ref","shadow.cljs.devtools.client.browser/repl-ns-ref","cljs.core.atom","js/shadow.cljs.devtools.client.browser.socket-ref","shadow.cljs.devtools.client.browser/socket-ref","cljs.core/volatile!","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","shadow.cljs.devtools.client.browser/devtools-msg","seq38106","G__38107","cljs.core/first","cljs.core/next","self__4717__auto__","msg","args","cljs.core/seq","shadow.cljs.devtools.client.env/log-style","js/console.log.apply","js/console","cljs.core.into_array","cljs.core.into","shadow.cljs.devtools.client.browser/ws-msg","temp__5733__auto__","cljs.core/deref","s","cljs.core.pr_str","js/console.warn","shadow.cljs.devtools.client.browser/script-eval","code","js/goog.globalEval","shadow.cljs.devtools.client.browser/do-js-load","sources","seq__38109","chunk__38110","count__38111","i__38112","map__38144","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__38152","resource-id","output-name","resource-name","js","src","js/$CLJS.SHADOW_ENV.setLoaded","shadow.cljs.devtools.client.browser.devtools_msg","shadow.cljs.devtools.client.env/before-load-src","e38149","e38158","e","js/console.error","js/Error","shadow.cljs.devtools.client.browser/do-js-reload","complete-fn","failure-fn","shadow.cljs.devtools.client.env.do_js_reload","cljs.core.assoc","fn-sym","shadow.cljs.devtools.client.browser/do-js-requires","js-requires","seq__38171","chunk__38172","count__38173","i__38174","js-ns","require-str","shadow.cljs.devtools.client.browser/load-sources","callback","cljs.core/empty?","G__38196","goog.net.XhrIo/send","shadow.cljs.devtools.client.env/files-url","res","req","content","cljs.reader.read_string","cljs.core.map","p__38206","map__38207","shadow.cljs.devtools.client.browser/handle-build-complete","info","reload-info","warnings","iter__4523__auto__","s__38212","cljs.core/LazySeq","xs__6292__auto__","map__38217","iterys__4519__auto__","s__38214","c__4521__auto__","size__4522__auto__","b__38216","cljs.core/chunk-buffer","i__38215","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__38213","cljs.core/cons","cljs.core/rest","fs__4520__auto__","cljs.core.concat","iter__38211","cljs.core/not","warning","cljs.core.distinct","seq__38224","chunk__38225","count__38226","i__38227","map__38272","map__38274","line","column","w","shadow.cljs.devtools.client.env/autoload","shadow.cljs.devtools.client.hud/load-end-success","shadow.cljs.devtools.client.env/ignore-warnings","sources-to-get","shadow.cljs.devtools.client.env/filter-reload-sources","cljs.core.get_in","p1__38204#","shadow.cljs.devtools.client.hud/load-failure","shadow.cljs.devtools.client.browser/page-load-uri","js/goog.global.document","goog.Uri/parse","js/document.location.href","shadow.cljs.devtools.client.browser/match-paths","old","new","cljs.core._EQ_","rel-new","cljs.core.subs","clojure.string/starts-with?","node-uri","node-uri-resolved","node-abs","p__38276","map__38277","shadow.cljs.devtools.client.browser/handle-asset-watch","updates","seq__38279","chunk__38281","count__38282","i__38283","path","clojure.string/ends-with?","seq__38314","chunk__38317","count__38318","i__38319","seq__38330","chunk__38333","count__38334","i__38335","node","cljs.core.array_seq","js/document.querySelectorAll","path-match","new-link","G__38326","G__38329","G__38340","G__38341","cljs.core.rand","goog.dom/insertSiblingAfter","goog.dom/removeNode","shadow.cljs.devtools.client.browser/get-ua-product","goog.userAgent.product/SAFARI","goog.userAgent.product/CHROME","goog.userAgent.product/FIREFOX","goog.userAgent.product/IE","shadow.cljs.devtools.client.browser/get-asset-root","loc","js/goog.Uri","cbp","js/CLOSURE_BASE_PATH","clojure.string/replace","shadow.cljs.devtools.client.browser/repl-error","shadow.cljs.devtools.client.env/repl-error","shadow.cljs.devtools.client.browser/global-eval","cljs.core.not_EQ_","js/eval","p__38344","map__38345","shadow.cljs.devtools.client.browser/repl-invoke","id","result","shadow.cljs.devtools.client.env/repl-call","p__38349","map__38350","shadow.cljs.devtools.client.browser/repl-require","reload-namespaces","done","sources-to-load","cljs.core.remove","p__38352","map__38353","provides","and__4109__auto__","shadow.cljs.devtools.client.env/src-is-loaded?","cljs.core/some","e38366","p__38367","map__38368","shadow.cljs.devtools.client.browser/repl-init","repl-state","p__38372","map__38373","shadow.cljs.devtools.client.browser/repl-set-ns","ns","shadow.cljs.devtools.client.browser/close-reason-ref","shadow.cljs.devtools.client.browser/stale-client-detected","p__38378","map__38380","shadow.cljs.devtools.client.browser/handle-message","type","shadow.cljs.devtools.client.hud/connection-error-clear!","G__38383","cljs.core/Keyword","js/Date.now","shadow.cljs.devtools.client.hud/hud-warnings","shadow.cljs.devtools.client.hud/load-end","shadow.cljs.devtools.client.hud/hud-error","shadow.cljs.devtools.client.hud/hud-hide","shadow.cljs.devtools.client.hud/load-start","cljs.core/vreset!","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/publish!","cljs.core/contains?","shadow.cljs.devtools.client.env/async-ops","shadow.cljs.devtools.client.browser/compile","text","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/server-host","shadow.cljs.devtools.client.env/server-port","shadow.cljs.devtools.client.env/proc-id","actions","js/shadow.cljs.devtools.client.browser.ws-status","shadow.cljs.devtools.client.browser/ws-status","shadow.cljs.devtools.client.browser/ws-connect","fexpr__38390","shadow.cljs.devtools.client.browser/ws-connect-impl","shadow.cljs.devtools.client.browser/maybe-reconnect","js/setTimeout","e38396","print-fn","cljs.core/*print-fn*","ws-url","shadow.cljs.devtools.client.env/ws-url","socket","js/WebSocket","shadow.cljs.devtools.client.env/process-ws-msg","shadow.cljs.devtools.client.env/module-format","js/goog","js/goog.constructNamespace_","shadow.cljs.devtools.client.env/set-print-fns!","shadow.cljs.devtools.client.hud/connection-error","or__4120__auto__","shadow.cljs.devtools.client.env/reset-print-fns!","shadow.cljs.devtools.client.env/enabled","js/goog.global.window","js/window.addEventListener","js/goog.global.document.readyState"],"sourcesContent":["(ns shadow.cljs.devtools.client.browser\n  (:require\n    [cljs.reader :as reader]\n    [clojure.string :as str]\n    [goog.dom :as gdom]\n    [goog.userAgent.product :as product]\n    [goog.Uri]\n    [goog.net.XhrIo :as xhr]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.cljs.devtools.client.console]\n    [shadow.cljs.devtools.client.hud :as hud]\n    [clojure.set :as set]))\n\n(defonce repl-ns-ref (atom nil))\n\n(defonce socket-ref (volatile! nil))\n\n(defn devtools-msg [msg & args]\n  (if (seq env/log-style)\n    (js/console.log.apply js/console (into-array (into [(str \"%c\\uD83E\\uDC36 shadow-cljs: \" msg) env/log-style] args)))\n    (js/console.log.apply js/console (into-array (into [(str \"shadow-cljs: \" msg)] args)))))\n\n(defn ws-msg [msg]\n  (if-let [s @socket-ref]\n    (.send s (pr-str msg))\n    (js/console.warn \"WEBSOCKET NOT CONNECTED\" (pr-str msg))))\n\n(defn script-eval [code]\n  (js/goog.globalEval code))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-id output-name resource-name js] :as src} sources]\n    ;; should really stop using this and rather maintain our own record\n    ;; but without this hot-reload will reload shadow-js files with each cycle\n    ;; since they don't set it\n    (js/$CLJS.SHADOW_ENV.setLoaded output-name)\n\n    (devtools-msg \"load JS\" resource-name)\n    (env/before-load-src src)\n    (try\n      (script-eval (str js \"\\n//# sourceURL=\" resource-name))\n      (catch :default e\n        (js/console.error (str \"Failed to load \" resource-name) e)\n        (throw (js/Error. (str \"Failed to load \" resource-name \": \" (.-message e))))))))\n\n(defn do-js-reload [msg sources complete-fn failure-fn]\n  (env/do-js-reload\n    (assoc msg\n      :log-missing-fn\n      ;; FIXME: this gets noisy when using web-workers and either main or the workers not having certain code loaded\n      ;; should properly filter hook-fns and only attempt to call those that actually apply\n      ;; but thats a bit of work since we don't currently track the namespaces that are loaded.\n      (fn [fn-sym]\n        #_ (devtools-msg (str \"can't find fn \" fn-sym)))\n      :log-call-async\n      (fn [fn-sym]\n        (devtools-msg (str \"call async \" fn-sym)))\n      :log-call\n      (fn [fn-sym]\n        (devtools-msg (str \"call \" fn-sym))))\n    #(do-js-load sources)\n    complete-fn\n    failure-fn))\n\n(defn do-js-requires\n  \"when (require '[\\\"some-str\\\" :as x]) is done at the REPL we need to manually call the shadow.js.require for it\n   since the file only adds the shadow$provide. only need to do this for shadow-js.\"\n  [js-requires]\n  (doseq [js-ns js-requires]\n    (let [require-str (str \"var \" js-ns \" = shadow.js.require(\\\"\" js-ns \"\\\");\")]\n      (script-eval require-str))))\n\n(defn load-sources [sources callback]\n  (if (empty? sources)\n    (callback [])\n    (xhr/send\n      (env/files-url)\n      (fn [res]\n        (this-as ^goog req\n          (let [content\n                (-> req\n                    (.getResponseText)\n                    (reader/read-string))]\n            (callback content)\n            )))\n      \"POST\"\n      (pr-str {:client :browser\n               :sources (into [] (map :resource-id) sources)})\n      #js {\"content-type\" \"application/edn; charset=utf-8\"})))\n\n(defn handle-build-complete [{:keys [info reload-info] :as msg}]\n  (let [warnings\n        (->> (for [{:keys [resource-name warnings] :as src} (:sources info)\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (doseq [{:keys [msg line column resource-name] :as w} warnings]\n      (js/console.warn (str \"BUILD-WARNING in \" resource-name \" at [\" line \":\" column \"]\\n\\t\" msg)))\n\n    (if-not env/autoload\n      (hud/load-end-success)\n      (when (or (empty? warnings) env/ignore-warnings)\n        (let [sources-to-get\n              (env/filter-reload-sources info reload-info)]\n\n          (if-not (seq sources-to-get)\n            (hud/load-end-success)\n            (do (when-not (seq (get-in msg [:reload-info :after-load]))\n                  (devtools-msg \"reloading code but no :after-load hooks are configured!\"\n                    \"https://shadow-cljs.github.io/docs/UsersGuide.html#_lifecycle_hooks\"))\n                (load-sources sources-to-get #(do-js-reload msg % hud/load-end-success hud/load-failure)))\n            ))))))\n\n;; capture this once because the path may change via pushState\n(def ^goog page-load-uri\n  (when js/goog.global.document\n    (goog.Uri/parse js/document.location.href)))\n\n(defn match-paths [old new]\n  (if (= \"file\" (.getScheme page-load-uri))\n    ;; new is always an absolute path, strip first /\n    ;; FIXME: assuming that old is always relative\n    (let [rel-new (subs new 1)]\n      (when (or (= old rel-new)\n                (str/starts-with? old (str rel-new \"?\")))\n        rel-new))\n    ;; special handling for browsers including relative css\n    (let [^goog node-uri (goog.Uri/parse old)\n          node-uri-resolved (.resolve page-load-uri node-uri)\n          node-abs (.getPath ^goog node-uri-resolved)]\n\n      (and (or (= (.hasSameDomainAs page-load-uri node-uri))\n               (not (.hasDomain node-uri)))\n           (= node-abs new)\n           new))))\n\n(defn handle-asset-watch [{:keys [updates] :as msg}]\n  (doseq [path updates\n          ;; FIXME: could support images?\n          :when (str/ends-with? path \"css\")]\n    (doseq [node (array-seq (js/document.querySelectorAll \"link[rel=\\\"stylesheet\\\"]\"))\n            :let [path-match (match-paths (.getAttribute node \"href\") path)]\n            :when path-match]\n\n      (let [new-link\n            (doto (.cloneNode node true)\n              (.setAttribute \"href\" (str path-match \"?r=\" (rand))))]\n\n        (devtools-msg \"load CSS\" path-match)\n        (gdom/insertSiblingAfter new-link node)\n        (gdom/removeNode node)\n        ))))\n\n;; from https://github.com/clojure/clojurescript/blob/master/src/main/cljs/clojure/browser/repl.cljs\n;; I don't want to pull in all its other dependencies just for this function\n(defn get-ua-product []\n  (cond\n    product/SAFARI :safari\n    product/CHROME :chrome\n    product/FIREFOX :firefox\n    product/IE :ie))\n\n(defn get-asset-root []\n  (let [loc (js/goog.Uri. js/document.location.href)\n        cbp (js/goog.Uri. js/CLOSURE_BASE_PATH)\n        s (.toString (.resolve loc cbp))]\n    ;; FIXME: stacktrace starts with file:/// but resolve returns file:/\n    ;; how does this look on windows?\n    (str/replace s #\"^file:/\" \"file:///\")\n    ))\n\n(defn repl-error [e]\n  (js/console.error \"repl/invoke error\" e)\n  (-> (env/repl-error e)\n      (assoc :ua-product (get-ua-product)\n             :asset-root (get-asset-root))))\n\n(defn global-eval [js]\n  (if (not= \"undefined\" (js* \"typeof(module)\"))\n    ;; don't eval in the global scope in case of :npm-module builds running in webpack\n    (js/eval js)\n    ;; hack to force eval in global scope\n    ;; goog.globalEval doesn't have a return value so can't use that for REPL invokes\n    (js* \"(0,eval)(~{});\" js)))\n\n(defn repl-invoke [{:keys [id js]}]\n  (let [result (env/repl-call #(global-eval js) repl-error)]\n    (-> result\n        (assoc :id id)\n        (ws-msg))))\n\n(defn repl-require [{:keys [id sources reload-namespaces js-requires] :as msg} done]\n  (let [sources-to-load\n        (->> sources\n             (remove (fn [{:keys [provides] :as src}]\n                       (and (env/src-is-loaded? src)\n                            (not (some reload-namespaces provides)))))\n             (into []))]\n\n    (load-sources\n      sources-to-load\n      (fn [sources]\n        (try\n          (do-js-load sources)\n          (when (seq js-requires)\n            (do-js-requires js-requires))\n          (ws-msg {:type :repl/require-complete :id id})\n          (catch :default e\n            (ws-msg {:type :repl/require-error :id id :error (.-message e)}))\n          (finally\n            (done)))))))\n\n(defn repl-init [{:keys [repl-state id]} done]\n  (load-sources\n    ;; maybe need to load some missing files to init REPL\n    (->> (:repl-sources repl-state)\n         (remove env/src-is-loaded?)\n         (into []))\n    (fn [sources]\n      (do-js-load sources)\n      (ws-msg {:type :repl/init-complete :id id})\n      (devtools-msg \"REPL session start successful\")\n      (done))))\n\n(defn repl-set-ns [{:keys [id ns]}]\n  (ws-msg {:type :repl/set-ns-complete :id id :ns ns}))\n\n(def close-reason-ref (volatile! nil))\n(def stale-client-detected (volatile! false))\n\n;; FIXME: core.async-ify this\n(defn handle-message [{:keys [type] :as msg} done]\n  ;; (js/console.log \"ws-msg\" msg)\n  (hud/connection-error-clear!)\n  (case type\n    :asset-watch\n    (handle-asset-watch msg)\n\n    :repl/invoke\n    (repl-invoke msg)\n\n    :repl/require\n    (repl-require msg done)\n\n    :repl/set-ns\n    (repl-set-ns msg)\n\n    :repl/init\n    (repl-init msg done)\n\n    :repl/session-start\n    (repl-init msg done)\n\n    :repl/ping\n    (ws-msg {:type :repl/pong :time-server (:time-server msg) :time-runtime (js/Date.now)})\n\n    :build-complete\n    (do (hud/hud-warnings msg)\n        (handle-build-complete msg))\n\n    :build-failure\n    (do (hud/load-end)\n        (hud/hud-error msg))\n\n    :build-init\n    (hud/hud-warnings msg)\n\n    :build-start\n    (do (hud/hud-hide)\n        (hud/load-start))\n\n    :pong\n    nil\n\n    :client/stale\n    (do (vreset! stale-client-detected true)\n        (vreset! close-reason-ref \"Stale Client! You are not using the latest compilation output!\"))\n\n    :client/no-worker\n    (do (vreset! stale-client-detected true)\n        (vreset! close-reason-ref (str \"watch for build \\\"\" env/build-id \"\\\" not running\")))\n\n    :custom-msg\n    (env/publish! (:payload msg))\n\n    ;; default\n    :ignored)\n\n  (when-not (contains? env/async-ops type)\n    (done)))\n\n(defn compile [text callback]\n  (xhr/send\n    (str \"http\" (when env/ssl \"s\") \"://\" env/server-host \":\" env/server-port \"/worker/compile/\" env/build-id \"/\" env/proc-id \"/browser\")\n    (fn [res]\n      (this-as ^goog req\n        (let [actions\n              (-> req\n                  (.getResponseText)\n                  (reader/read-string))]\n          (when callback\n            (callback actions)))))\n    \"POST\"\n    (pr-str {:input text})\n    #js {\"content-type\" \"application/edn; charset=utf-8\"}))\n\n;; :init\n;; :connecting\n;; :connected\n(defonce ws-status (volatile! :init))\n\n(declare ws-connect-impl)\n\n(defn ws-connect []\n  (when (= (@ws-status :init))\n    (ws-connect-impl)))\n\n(defn maybe-reconnect []\n  (when (and (not @stale-client-detected)\n             (not= @ws-status :init))\n    (vreset! ws-status :init)\n    (js/setTimeout ws-connect 3000)))\n\n(defn ws-connect-impl []\n  (vreset! ws-status :connecting)\n  (try\n    (let [print-fn\n          cljs.core/*print-fn*\n\n          ws-url\n          (env/ws-url :browser)\n\n          socket\n          (js/WebSocket. ws-url)]\n\n      (vreset! socket-ref socket)\n\n      (set! (.-onmessage socket)\n        (fn [e]\n          (env/process-ws-msg (. e -data) handle-message)\n          ))\n\n      (set! (.-onopen socket)\n        (fn [e]\n          (vreset! ws-status :connected)\n          (hud/connection-error-clear!)\n          (vreset! close-reason-ref nil)\n          ;; :module-format :js already patches provide\n          (when (= \"goog\" env/module-format)\n            ;; patch away the already declared exception\n            (set! (.-provide js/goog) js/goog.constructNamespace_))\n\n          (env/set-print-fns! ws-msg)\n\n          (devtools-msg \"WebSocket connected!\")\n          ))\n\n      (set! (.-onclose socket)\n        (fn [e]\n          ;; not a big fan of reconnecting automatically since a disconnect\n          ;; may signal a change of config, safer to just reload the page\n          (devtools-msg \"WebSocket disconnected!\")\n          (hud/connection-error (or @close-reason-ref \"Connection closed!\"))\n          (vreset! socket-ref nil)\n          (env/reset-print-fns!)\n          (maybe-reconnect)\n          ))\n\n      (set! (.-onerror socket)\n        (fn [e]\n          (hud/connection-error \"Connection failed!\")\n          (maybe-reconnect)\n          (devtools-msg \"websocket error\" e))))\n    (catch :default e\n      (devtools-msg \"WebSocket setup failed\" e))))\n\n(when ^boolean env/enabled\n  ;; disconnect an already connected socket, happens if this file is reloaded\n  ;; pretty much only for me while working on this file\n  (when-let [s @socket-ref]\n    (devtools-msg \"connection reset!\")\n    (set! (.-onclose s) (fn [e]))\n    (.close s)\n    (vreset! socket-ref nil))\n\n  ;; for /browser-repl in case the page is reloaded\n  ;; otherwise the browser seems to still have the websocket open\n  ;; when doing the reload\n  (when js/goog.global.window\n    (js/window.addEventListener \"beforeunload\"\n      (fn []\n        (when-let [s @socket-ref]\n          (.close s)))))\n\n  ;; async connect so other stuff while loading runs first\n  (if (and js/goog.global.document (= \"loading\" js/goog.global.document.readyState))\n    (js/window.addEventListener \"DOMContentLoaded\" ws-connect)\n    (js/setTimeout ws-connect 10)))\n"]}