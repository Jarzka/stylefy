{
"version":3,
"file":"goog.math.integer.js",
"lineCount":598,
"mappings":"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",
"sources":["goog/math/integer.js"],
"sourcesContent":["// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines an Integer class for representing (potentially)\n * infinite length two's-complement integer values.\n *\n * For the specific case of 64-bit integers, use goog.math.Long, which is more\n * efficient.\n *\n */\n\ngoog.provide('goog.math.Integer');\n\ngoog.require('goog.reflect');\n\n/**\n * Constructs a two's-complement integer an array containing bits of the\n * integer in 32-bit (signed) pieces, given in little-endian order (i.e.,\n * lowest-order bits in the first piece), and the sign of -1 or 0.\n *\n * See the from* functions below for other convenient ways of constructing\n * Integers.\n *\n * The internal representation of an integer is an array of 32-bit signed\n * pieces, along with a sign (0 or -1) that indicates the contents of all the\n * other 32-bit pieces out to infinity.  We use 32-bit pieces because these are\n * the size of integers on which JavaScript performs bit-operations.  For\n * operations like addition and multiplication, we split each number into 16-bit\n * pieces, which can easily be multiplied within JavaScript's floating-point\n * representation without overflow or change in sign.\n *\n * @struct\n * @constructor\n * @param {Array<number>} bits Array containing the bits of the number.\n * @param {number} sign The sign of the number: -1 for negative and 0 positive.\n * @final\n */\ngoog.math.Integer = function(bits, sign) {\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.sign_ = sign;\n\n  // Note: using a local variable while initializing the array helps the\n  // compiler understand that assigning to the array is local side-effect and\n  // that enables the entire constructor to be seen as side-effect free.\n  var localBits = [];\n\n  // Copy the 32-bit signed integer values passed in.  We prune out those at the\n  // top that equal the sign since they are redundant.\n  var top = true;\n\n  for (var i = bits.length - 1; i >= 0; i--) {\n    var val = bits[i] | 0;\n    if (!top || val != sign) {\n      localBits[i] = val;\n      top = false;\n    }\n  }\n\n  /**\n   * @type {!Array<number>}\n   * @private\n   * @const\n   */\n  this.bits_ = localBits;\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Integer representations of small integer values.\n * @type {!Object<number, !goog.math.Integer>}\n * @private\n */\ngoog.math.Integer.IntCache_ = {};\n\n\n/**\n * Returns an Integer representing the given (32-bit) integer value.\n * @param {number} value A 32-bit integer value.\n * @return {!goog.math.Integer} The corresponding Integer value.\n */\ngoog.math.Integer.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    return goog.reflect.cache(\n        goog.math.Integer.IntCache_, value, function(val) {\n          return new goog.math.Integer([val | 0], val < 0 ? -1 : 0);\n        });\n  }\n  return new goog.math.Integer([value | 0], value < 0 ? -1 : 0);\n};\n\n\n/**\n * Returns an Integer representing the given value, provided that it is a finite\n * number.  Otherwise, zero is returned.\n * @param {number} value The value in question.\n * @return {!goog.math.Integer} The corresponding Integer value.\n */\ngoog.math.Integer.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return goog.math.Integer.ZERO;\n  } else if (value < 0) {\n    return goog.math.Integer.fromNumber(-value).negate();\n  } else {\n    var bits = [];\n    var pow = 1;\n    for (var i = 0; value >= pow; i++) {\n      bits[i] = (value / pow) | 0;\n      pow *= goog.math.Integer.TWO_PWR_32_DBL_;\n    }\n    return new goog.math.Integer(bits, 0);\n  }\n};\n\n\n/**\n * Returns a Integer representing the value that comes by concatenating the\n * given entries, each is assumed to be 32 signed bits, given in little-endian\n * order (lowest order bits in the lowest index), and sign-extending the highest\n * order 32-bit value.\n * @param {Array<number>} bits The bits of the number, in 32-bit signed pieces,\n *     in little-endian order.\n * @return {!goog.math.Integer} The corresponding Integer value.\n */\ngoog.math.Integer.fromBits = function(bits) {\n  var high = bits[bits.length - 1];\n  return new goog.math.Integer(bits, high & (1 << 31) ? -1 : 0);\n};\n\n\n/**\n * Returns an Integer representation of the given string, written using the\n * given radix.\n * @param {string} str The textual representation of the Integer.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!goog.math.Integer} The corresponding Integer value.\n */\ngoog.math.Integer.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw new Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw new Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return goog.math.Integer.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw new Error('number format error: interior \"-\" character');\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = goog.math.Integer.fromNumber(Math.pow(radix, 8));\n\n  var result = goog.math.Integer.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = goog.math.Integer.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(goog.math.Integer.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(goog.math.Integer.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n\n/**\n * A number used repeatedly in calculations.  This must appear before the first\n * call to the from* functions below.\n * @type {number}\n * @private\n */\ngoog.math.Integer.TWO_PWR_32_DBL_ = (1 << 16) * (1 << 16);\n\n\n/**  @type {!goog.math.Integer} */\ngoog.math.Integer.ZERO = goog.math.Integer.fromInt(0);\n\n/**  @type {!goog.math.Integer} */\ngoog.math.Integer.ONE = goog.math.Integer.fromInt(1);\n\n\n/**\n * @const\n * @type {!goog.math.Integer}\n * @private\n */\ngoog.math.Integer.TWO_PWR_24_ = goog.math.Integer.fromInt(1 << 24);\n\n/**\n * Returns the value, assuming it is a 32-bit integer.\n * @return {number} The corresponding int value.\n */\ngoog.math.Integer.prototype.toInt = function() {\n  return this.bits_.length > 0 ? this.bits_[0] : this.sign_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\ngoog.math.Integer.prototype.toNumber = function() {\n  if (this.isNegative()) {\n    return -this.negate().toNumber();\n  } else {\n    var val = 0;\n    var pow = 1;\n    for (var i = 0; i < this.bits_.length; i++) {\n      val += this.getBitsUnsigned(i) * pow;\n      pow *= goog.math.Integer.TWO_PWR_32_DBL_;\n    }\n    return val;\n  }\n};\n\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\ngoog.math.Integer.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw new Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  } else if (this.isNegative()) {\n    return '-' + this.negate().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = goog.math.Integer.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.divide(radixToPower);\n    // The right shifting fixes negative values in the case when\n    // intval >= 2^31; for more details see\n    // https://github.com/google/closure-library/pull/498\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/**\n * Returns the index-th 32-bit (signed) piece of the Integer according to\n * little-endian order (i.e., index 0 contains the smallest bits).\n * @param {number} index The index in question.\n * @return {number} The requested 32-bits as a signed number.\n */\ngoog.math.Integer.prototype.getBits = function(index) {\n  if (index < 0) {\n    return 0;  // Allowing this simplifies bit shifting operations below...\n  } else if (index < this.bits_.length) {\n    return this.bits_[index];\n  } else {\n    return this.sign_;\n  }\n};\n\n\n/**\n * Returns the index-th 32-bit piece as an unsigned number.\n * @param {number} index The index in question.\n * @return {number} The requested 32-bits as an unsigned number.\n */\ngoog.math.Integer.prototype.getBitsUnsigned = function(index) {\n  var val = this.getBits(index);\n  return val >= 0 ? val : goog.math.Integer.TWO_PWR_32_DBL_ + val;\n};\n\n\n/** @return {number} The sign bit of this number, -1 or 0. */\ngoog.math.Integer.prototype.getSign = function() {\n  return this.sign_;\n};\n\n\n/** @return {boolean} Whether this value is zero. */\ngoog.math.Integer.prototype.isZero = function() {\n  if (this.sign_ != 0) {\n    return false;\n  }\n  for (var i = 0; i < this.bits_.length; i++) {\n    if (this.bits_[i] != 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\ngoog.math.Integer.prototype.isNegative = function() {\n  return this.sign_ == -1;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\ngoog.math.Integer.prototype.isOdd = function() {\n  return (this.bits_.length == 0) && (this.sign_ == -1) ||\n      (this.bits_.length > 0) && ((this.bits_[0] & 1) != 0);\n};\n\n\n/**\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {boolean} Whether this Integer equals the other.\n */\ngoog.math.Integer.prototype.equals = function(other) {\n  if (this.sign_ != other.sign_) {\n    return false;\n  }\n  var len = Math.max(this.bits_.length, other.bits_.length);\n  for (var i = 0; i < len; i++) {\n    if (this.getBits(i) != other.getBits(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {boolean} Whether this Integer does not equal the other.\n */\ngoog.math.Integer.prototype.notEquals = function(other) {\n  return !this.equals(other);\n};\n\n\n/**\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {boolean} Whether this Integer is greater than the other.\n */\ngoog.math.Integer.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {boolean} Whether this Integer is greater than or equal to the other.\n */\ngoog.math.Integer.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {boolean} Whether this Integer is less than the other.\n */\ngoog.math.Integer.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {boolean} Whether this Integer is less than or equal to the other.\n */\ngoog.math.Integer.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * Compares this Integer with the given one.\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\ngoog.math.Integer.prototype.compare = function(other) {\n  var diff = this.subtract(other);\n  if (diff.isNegative()) {\n    return -1;\n  } else if (diff.isZero()) {\n    return 0;\n  } else {\n    return +1;\n  }\n};\n\n\n/**\n * Returns an integer with only the first numBits bits of this value, sign\n * extended from the final bit.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Integer} The shorted integer value.\n */\ngoog.math.Integer.prototype.shorten = function(numBits) {\n  var arr_index = (numBits - 1) >> 5;\n  var bit_index = (numBits - 1) % 32;\n  var bits = [];\n  for (var i = 0; i < arr_index; i++) {\n    bits[i] = this.getBits(i);\n  }\n  var sigBits = bit_index == 31 ? 0xFFFFFFFF : (1 << (bit_index + 1)) - 1;\n  var val = this.getBits(arr_index) & sigBits;\n  if (val & (1 << bit_index)) {\n    val |= 0xFFFFFFFF - sigBits;\n    bits[arr_index] = val;\n    return new goog.math.Integer(bits, -1);\n  } else {\n    bits[arr_index] = val;\n    return new goog.math.Integer(bits, 0);\n  }\n};\n\n\n/** @return {!goog.math.Integer} The negation of this value. */\ngoog.math.Integer.prototype.negate = function() {\n  return this.not().add(goog.math.Integer.ONE);\n};\n\n\n/** @return {!goog.math.Integer} The absolute value of this value. */\ngoog.math.Integer.prototype.abs = function() {\n  return this.isNegative() ? this.negate() : this;\n};\n\n\n/**\n * Returns the sum of this and the given Integer.\n * @param {goog.math.Integer} other The Integer to add to this.\n * @return {!goog.math.Integer} The Integer result.\n */\ngoog.math.Integer.prototype.add = function(other) {\n  var len = Math.max(this.bits_.length, other.bits_.length);\n  var arr = [];\n  var carry = 0;\n\n  for (var i = 0; i <= len; i++) {\n    var a1 = this.getBits(i) >>> 16;\n    var a0 = this.getBits(i) & 0xFFFF;\n\n    var b1 = other.getBits(i) >>> 16;\n    var b0 = other.getBits(i) & 0xFFFF;\n\n    var c0 = carry + a0 + b0;\n    var c1 = (c0 >>> 16) + a1 + b1;\n    carry = c1 >>> 16;\n    c0 &= 0xFFFF;\n    c1 &= 0xFFFF;\n    arr[i] = (c1 << 16) | c0;\n  }\n  return goog.math.Integer.fromBits(arr);\n};\n\n\n/**\n * Returns the difference of this and the given Integer.\n * @param {goog.math.Integer} other The Integer to subtract from this.\n * @return {!goog.math.Integer} The Integer result.\n */\ngoog.math.Integer.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given Integer.\n * @param {goog.math.Integer} other The Integer to multiply against this.\n * @return {!goog.math.Integer} The product of this and the other.\n */\ngoog.math.Integer.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return goog.math.Integer.ZERO;\n  } else if (other.isZero()) {\n    return goog.math.Integer.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both numbers are small, use float multiplication\n  if (this.lessThan(goog.math.Integer.TWO_PWR_24_) &&\n      other.lessThan(goog.math.Integer.TWO_PWR_24_)) {\n    return goog.math.Integer.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Fill in an array of 16-bit products.\n  var len = this.bits_.length + other.bits_.length;\n  var arr = [];\n  for (var i = 0; i < 2 * len; i++) {\n    arr[i] = 0;\n  }\n  for (var i = 0; i < this.bits_.length; i++) {\n    for (var j = 0; j < other.bits_.length; j++) {\n      var a1 = this.getBits(i) >>> 16;\n      var a0 = this.getBits(i) & 0xFFFF;\n\n      var b1 = other.getBits(j) >>> 16;\n      var b0 = other.getBits(j) & 0xFFFF;\n\n      arr[2 * i + 2 * j] += a0 * b0;\n      goog.math.Integer.carry16_(arr, 2 * i + 2 * j);\n      arr[2 * i + 2 * j + 1] += a1 * b0;\n      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);\n      arr[2 * i + 2 * j + 1] += a0 * b1;\n      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);\n      arr[2 * i + 2 * j + 2] += a1 * b1;\n      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 2);\n    }\n  }\n\n  // Combine the 16-bit values into 32-bit values.\n  for (var i = 0; i < len; i++) {\n    arr[i] = (arr[2 * i + 1] << 16) | arr[2 * i];\n  }\n  for (var i = len; i < 2 * len; i++) {\n    arr[i] = 0;\n  }\n  return new goog.math.Integer(arr, 0);\n};\n\n\n/**\n * Carries any overflow from the given index into later entries.\n * @param {Array<number>} bits Array of 16-bit values in little-endian order.\n * @param {number} index The index in question.\n * @private\n */\ngoog.math.Integer.carry16_ = function(bits, index) {\n  while ((bits[index] & 0xFFFF) != bits[index]) {\n    bits[index + 1] += bits[index] >>> 16;\n    bits[index] &= 0xFFFF;\n    index++;\n  }\n};\n\n\n/**\n * Returns \"this\" Integer divided by the given one. Both \"this\" and the given\n * Integer MUST be positive.\n *\n * This method is only needed for very large numbers (>10^308),\n * for which the original division algorithm gets into an infinite\n * loop (see https://github.com/google/closure-library/issues/500).\n *\n * The algorithm has some possible performance enhancements (or\n * could be rewritten entirely), it's just an initial solution for\n * the issue linked above.\n *\n * @param {!goog.math.Integer} other The Integer to divide \"this\" by.\n * @return {!goog.math.Integer.DivisionResult}\n * @private\n */\ngoog.math.Integer.prototype.slowDivide_ = function(other) {\n  if (this.isNegative() || other.isNegative()) {\n    throw new Error('slowDivide_ only works with positive integers.');\n  }\n\n  var twoPower = goog.math.Integer.ONE;\n  var multiple = other;\n\n  // First we have to figure out what the highest bit of the result\n  // is, so we increase \"twoPower\" and \"multiple\" until \"multiple\"\n  // exceeds \"this\".\n  while (multiple.lessThanOrEqual(this)) {\n    twoPower = twoPower.shiftLeft(1);\n    multiple = multiple.shiftLeft(1);\n  }\n\n  // Rewind by one power of two, giving us the highest bit of the\n  // result.\n  var res = twoPower.shiftRight(1);\n  var total = multiple.shiftRight(1);\n\n  // Now we starting decreasing \"multiple\" and \"twoPower\" to find the\n  // rest of the bits of the result.\n  var total2;\n  multiple = multiple.shiftRight(2);\n  twoPower = twoPower.shiftRight(2);\n  while (!multiple.isZero()) {\n    // whenever we can add \"multiple\" to the total and not exceed\n    // \"this\", that means we've found a 1 bit. Else we've found a 0\n    // and don't need to add to the result.\n    total2 = total.add(multiple);\n    if (total2.lessThanOrEqual(this)) {\n      res = res.add(twoPower);\n      total = total2;\n    }\n    multiple = multiple.shiftRight(1);\n    twoPower = twoPower.shiftRight(1);\n  }\n\n\n  // TODO(b/130639293): Calculate this more efficiently during the division.\n  // This is kind of a waste since it isn't always needed, but it keeps the\n  // API smooth. Since this is already a slow path it probably isn't a big deal.\n  var remainder = this.subtract(res.multiply(other));\n  return new goog.math.Integer.DivisionResult(res, remainder);\n};\n\n\n/**\n * Returns this Integer divided by the given one.\n * @param {!goog.math.Integer} other The Integer to divide this by.\n * @return {!goog.math.Integer} This value divided by the given one.\n */\ngoog.math.Integer.prototype.divide = function(other) {\n  return this.divideAndRemainder(other).quotient;\n};\n\n\n/**\n * A struct for holding the quotient and remainder of a division.\n *\n * @constructor\n * @final\n * @struct\n *\n * @param {!goog.math.Integer} quotient\n * @param {!goog.math.Integer} remainder\n */\ngoog.math.Integer.DivisionResult = function(quotient, remainder) {\n  /** @const */\n  this.quotient = quotient;\n\n  /** @const */\n  this.remainder = remainder;\n};\n\n\n/**\n * Returns this Integer divided by the given one, as well as the remainder of\n * that division.\n *\n * @param {!goog.math.Integer} other The Integer to divide this by.\n * @return {!goog.math.Integer.DivisionResult}\n */\ngoog.math.Integer.prototype.divideAndRemainder = function(other) {\n  if (other.isZero()) {\n    throw new Error('division by zero');\n  } else if (this.isZero()) {\n    return new goog.math.Integer.DivisionResult(\n        goog.math.Integer.ZERO, goog.math.Integer.ZERO);\n  }\n\n  if (this.isNegative()) {\n    // Do the division on the negative of the numerator...\n    var result = this.negate().divideAndRemainder(other);\n    return new goog.math.Integer.DivisionResult(\n        // ...and flip the sign back after.\n        result.quotient.negate(),\n        // The remainder must always have the same sign as the numerator.\n        result.remainder.negate());\n  } else if (other.isNegative()) {\n    // Do the division on the negative of the denominator...\n    var result = this.divideAndRemainder(other.negate());\n    return new goog.math.Integer.DivisionResult(\n        // ...and flip the sign back after.\n        result.quotient.negate(),\n        // The remainder must always have the same sign as the numerator.\n        result.remainder);\n  }\n\n  // Have to degrade to slowDivide for Very Large Numbers, because\n  // they're out of range for the floating-point approximation\n  // technique used below.\n  if (this.bits_.length > 30) {\n    return this.slowDivide_(other);\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = goog.math.Integer.ZERO;\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = goog.math.Integer.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = goog.math.Integer.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = goog.math.Integer.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return new goog.math.Integer.DivisionResult(res, rem);\n};\n\n\n/**\n * Returns this Integer modulo the given one.\n * @param {!goog.math.Integer} other The Integer by which to mod.\n * @return {!goog.math.Integer} This value modulo the given one.\n */\ngoog.math.Integer.prototype.modulo = function(other) {\n  return this.divideAndRemainder(other).remainder;\n};\n\n\n/** @return {!goog.math.Integer} The bitwise-NOT of this value. */\ngoog.math.Integer.prototype.not = function() {\n  var len = this.bits_.length;\n  var arr = [];\n  for (var i = 0; i < len; i++) {\n    arr[i] = ~this.bits_[i];\n  }\n  return new goog.math.Integer(arr, ~this.sign_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Integer and the given one.\n * @param {goog.math.Integer} other The Integer to AND with this.\n * @return {!goog.math.Integer} The bitwise-AND of this and the other.\n */\ngoog.math.Integer.prototype.and = function(other) {\n  var len = Math.max(this.bits_.length, other.bits_.length);\n  var arr = [];\n  for (var i = 0; i < len; i++) {\n    arr[i] = this.getBits(i) & other.getBits(i);\n  }\n  return new goog.math.Integer(arr, this.sign_ & other.sign_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Integer and the given one.\n * @param {goog.math.Integer} other The Integer to OR with this.\n * @return {!goog.math.Integer} The bitwise-OR of this and the other.\n */\ngoog.math.Integer.prototype.or = function(other) {\n  var len = Math.max(this.bits_.length, other.bits_.length);\n  var arr = [];\n  for (var i = 0; i < len; i++) {\n    arr[i] = this.getBits(i) | other.getBits(i);\n  }\n  return new goog.math.Integer(arr, this.sign_ | other.sign_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Integer and the given one.\n * @param {goog.math.Integer} other The Integer to XOR with this.\n * @return {!goog.math.Integer} The bitwise-XOR of this and the other.\n */\ngoog.math.Integer.prototype.xor = function(other) {\n  var len = Math.max(this.bits_.length, other.bits_.length);\n  var arr = [];\n  for (var i = 0; i < len; i++) {\n    arr[i] = this.getBits(i) ^ other.getBits(i);\n  }\n  return new goog.math.Integer(arr, this.sign_ ^ other.sign_);\n};\n\n\n/**\n * Returns this value with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Integer} This shifted to the left by the given amount.\n */\ngoog.math.Integer.prototype.shiftLeft = function(numBits) {\n  var arr_delta = numBits >> 5;\n  var bit_delta = numBits % 32;\n  var len = this.bits_.length + arr_delta + (bit_delta > 0 ? 1 : 0);\n  var arr = [];\n  for (var i = 0; i < len; i++) {\n    if (bit_delta > 0) {\n      arr[i] = (this.getBits(i - arr_delta) << bit_delta) |\n          (this.getBits(i - arr_delta - 1) >>> (32 - bit_delta));\n    } else {\n      arr[i] = this.getBits(i - arr_delta);\n    }\n  }\n  return new goog.math.Integer(arr, this.sign_);\n};\n\n\n/**\n * Returns this value with bits shifted to the right by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Integer} This shifted to the right by the given amount.\n */\ngoog.math.Integer.prototype.shiftRight = function(numBits) {\n  var arr_delta = numBits >> 5;\n  var bit_delta = numBits % 32;\n  var len = this.bits_.length - arr_delta;\n  var arr = [];\n  for (var i = 0; i < len; i++) {\n    if (bit_delta > 0) {\n      arr[i] = (this.getBits(i + arr_delta) >>> bit_delta) |\n          (this.getBits(i + arr_delta + 1) << (32 - bit_delta));\n    } else {\n      arr[i] = this.getBits(i + arr_delta);\n    }\n  }\n  return new goog.math.Integer(arr, this.sign_);\n};\n"],
"names":["goog","provide","require","math","Integer","goog.math.Integer","bits","sign","sign_","localBits","top","i","length","val","bits_","IntCache_","fromInt","goog.math.Integer.fromInt","value","reflect","cache","fromNumber","goog.math.Integer.fromNumber","isNaN","isFinite","ZERO","negate","pow","TWO_PWR_32_DBL_","fromBits","goog.math.Integer.fromBits","high","fromString","goog.math.Integer.fromString","str","opt_radix","Error","radix","charAt","substring","indexOf","radixToPower","Math","result","size","min","parseInt","power","multiply","add","ONE","TWO_PWR_24_","prototype","toInt","goog.math.Integer.prototype.toInt","toNumber","goog.math.Integer.prototype.toNumber","isNegative","getBitsUnsigned","toString","goog.math.Integer.prototype.toString","isZero","rem","remDiv","divide","intval","subtract","digits","getBits","goog.math.Integer.prototype.getBits","index","goog.math.Integer.prototype.getBitsUnsigned","getSign","goog.math.Integer.prototype.getSign","goog.math.Integer.prototype.isZero","goog.math.Integer.prototype.isNegative","isOdd","goog.math.Integer.prototype.isOdd","equals","goog.math.Integer.prototype.equals","other","len","max","notEquals","goog.math.Integer.prototype.notEquals","greaterThan","goog.math.Integer.prototype.greaterThan","compare","greaterThanOrEqual","goog.math.Integer.prototype.greaterThanOrEqual","lessThan","goog.math.Integer.prototype.lessThan","lessThanOrEqual","goog.math.Integer.prototype.lessThanOrEqual","goog.math.Integer.prototype.compare","diff","shorten","goog.math.Integer.prototype.shorten","numBits","arr_index","bit_index","sigBits","goog.math.Integer.prototype.negate","not","abs","goog.math.Integer.prototype.abs","goog.math.Integer.prototype.add","arr","carry","a1","a0","b1","b0","c0","c1","goog.math.Integer.prototype.subtract","goog.math.Integer.prototype.multiply","j","carry16_","goog.math.Integer.carry16_","slowDivide_","goog.math.Integer.prototype.slowDivide_","twoPower","multiple","shiftLeft","res","shiftRight","total","total2","remainder","DivisionResult","goog.math.Integer.prototype.divide","divideAndRemainder","quotient","goog.math.Integer.DivisionResult","goog.math.Integer.prototype.divideAndRemainder","approx","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","goog.math.Integer.prototype.modulo","goog.math.Integer.prototype.not","and","goog.math.Integer.prototype.and","or","goog.math.Integer.prototype.or","xor","goog.math.Integer.prototype.xor","goog.math.Integer.prototype.shiftLeft","arr_delta","bit_delta","goog.math.Integer.prototype.shiftRight"]
}
