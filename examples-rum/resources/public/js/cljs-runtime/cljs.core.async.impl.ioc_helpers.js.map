{"version":3,"sources":["cljs/core/async/impl/ioc_helpers.cljs"],"mappings":"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","names":["cljs.core.async.impl.ioc-helpers/FN-IDX","cljs.core.async.impl.ioc-helpers/STATE-IDX","cljs.core.async.impl.ioc-helpers/VALUE-IDX","cljs.core.async.impl.ioc-helpers/BINDINGS-IDX","cljs.core.async.impl.ioc-helpers/EXCEPTION-FRAMES","cljs.core.async.impl.ioc-helpers/CURRENT-EXCEPTION","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/aset-object","arr","idx","o","cljs.core.async.impl.ioc-helpers/aget-object","cljs.core.async.impl.ioc-helpers/finished?","state-array","cljs.core/keyword-identical?","cljs.core.async.impl.ioc-helpers/fn-handler","f","js/cljs","js/cljs.core","js/cljs.core.async","js/cljs.core.async.impl","js/cljs.core.async.impl.ioc-helpers","js/cljs.core.async.impl.ioc-helpers.t_cljs$core$async$impl$ioc_helpers28605","cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers28605","_28607","meta28606","cljs.core/PROTOCOL_SENTINEL","this__4363__auto__","writer__4364__auto__","opt__4365__auto__","cljs.core/-write","cljs.core.async.impl.ioc-helpers/->t_cljs$core$async$impl$ioc_helpers28605","_","cljs.core.async.impl.ioc-helpers/run-state-machine","state","fexpr__28623","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","e28626","js/Object","ex","cljs.core.async.impl.ioc-helpers/take!","blk","c","temp__5733__auto__","cb","x","statearr-28634","statearr-28635","cljs.core/deref","cljs.core.async.impl.ioc-helpers/put!","val","ret-val","statearr-28644","statearr-28645","cljs.core.async.impl.ioc-helpers/return-chan","value"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.ioc-helpers\n  (:require [cljs.core.async.impl.protocols :as impl])\n  (:require-macros [cljs.core.async.impl.ioc-macros :as ioc]))\n\n(def ^:const FN-IDX 0)\n(def ^:const STATE-IDX 1)\n(def ^:const VALUE-IDX 2)\n(def ^:const BINDINGS-IDX 3)\n(def ^:const EXCEPTION-FRAMES 4)\n(def ^:const CURRENT-EXCEPTION 5)\n(def ^:const USER-START-IDX 6)\n\n(defn aset-object [arr idx o]\n  (aget arr idx o))\n\n(defn aget-object [arr idx]\n  (aget arr idx))\n\n\n(defn finished?\n  \"Returns true if the machine is in a finished state\"\n  [state-array]\n  (keyword-identical? (aget state-array STATE-IDX) :finished))\n\n(defn- fn-handler\n  [f]\n  (reify\n   impl/Handler\n   (active? [_] true)\n   (blockable? [_] true)\n   (commit [_] f)))\n\n\n(defn run-state-machine [state]\n  ((aget-object state FN-IDX) state))\n\n(defn run-state-machine-wrapped [state]\n  (try\n    (run-state-machine state)\n    (catch js/Object ex\n      (impl/close! ^not-native (aget-object state USER-START-IDX))\n      (throw ex))))\n\n(defn take! [state blk ^not-native c]\n  (if-let [cb (impl/take! c (fn-handler\n                                   (fn [x]\n                                     (ioc/aset-all! state VALUE-IDX x STATE-IDX blk)\n                                     (run-state-machine-wrapped state))))]\n    (do (ioc/aset-all! state VALUE-IDX @cb STATE-IDX blk)\n        :recur)\n    nil))\n\n(defn put! [state blk ^not-native c val]\n  (if-let [cb (impl/put! c val (fn-handler (fn [ret-val]\n                                             (ioc/aset-all! state VALUE-IDX ret-val STATE-IDX blk)\n                                             (run-state-machine-wrapped state))))]\n    (do (ioc/aset-all! state VALUE-IDX @cb STATE-IDX blk)\n        :recur)\n    nil))\n\n(defn return-chan [state value]\n  (let [^not-native c (aget state USER-START-IDX)]\n           (when-not (nil? value)\n             (impl/put! c value (fn-handler (fn [] nil))))\n           (impl/close! c)\n           c))\n\n\n"]}