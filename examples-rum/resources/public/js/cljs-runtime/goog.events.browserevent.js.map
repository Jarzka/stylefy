{
"version":3,
"file":"goog.events.browserevent.js",
"lineCount":181,
"mappings":"AA+CAA,IAAAC,QAAA,CAAa,0BAAb,CAAA;AACAD,IAAAC,QAAA,CAAa,sCAAb,CAAA;AACAD,IAAAC,QAAA,CAAa,sCAAb,CAAA;AAEAD,IAAAE,QAAA,CAAa,YAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,4BAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,mBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,uBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,cAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,gBAAb,CAAA;AAQA,yBAAAF,IAAAG,OAAAC,0BAAA,GACIJ,IAAAK,OAAA,CAAY,uCAAZ,EAAqD,KAArD,CADJ;AAaA;;;;;;AAAAL,IAAAG,OAAAG,aAAA,GAA2BC,QAAQ,CAACC,KAAD,EAAQC,iBAAR,CAA2B;AAC5DT,MAAAG,OAAAG,aAAAI,KAAA,CAA8B,IAA9B,EAAoC,aAApC,EAAmDF,KAAA,GAAQA,KAAAG,KAAR,GAAqB,EAAxE,CAAA;AAOA,iCAAA,IAAAC,OAAA,GAAc,IAAd;AAOA,6CAAA,IAAAC,cAAA,GAAqB,IAArB;AAMA,uBAAA,IAAAC,cAAA,GAAqB,IAArB;AAMA,wBAAA,IAAAC,QAAA,GAAe,CAAf;AAMA,wBAAA,IAAAC,QAAA,GAAe,CAAf;AAMA,wBAAA,IAAAC,QAAA,GAAe,CAAf;AAMA,wBAAA,IAAAC,QAAA,GAAe,CAAf;AAMA,wBAAA,IAAAC,QAAA,GAAe,CAAf;AAMA,wBAAA,IAAAC,QAAA,GAAe,CAAf;AAMA,wBAAA,IAAAC,OAAA,GAAc,CAAd;AAMA,wBAAA,IAAAC,IAAA,GAAW,EAAX;AAMA,wBAAA,IAAAC,QAAA,GAAe,CAAf;AAMA,wBAAA,IAAAC,SAAA,GAAgB,CAAhB;AAMA,yBAAA,IAAAC,QAAA,GAAe,KAAf;AAMA,yBAAA,IAAAC,OAAA,GAAc,KAAd;AAMA,yBAAA,IAAAC,SAAA,GAAgB,KAAhB;AAMA,yBAAA,IAAAC,QAAA,GAAe,KAAf;AAOA,yBAAA,IAAAC,MAAA,GAAa,IAAb;AAOA,yBAAA,IAAAC,oBAAA,GAA2B,KAA3B;AAKA,wBAAA,IAAAC,UAAA,GAAiB,CAAjB;AAKA,wBAAA,IAAAC,YAAA,GAAmB,EAAnB;AAMA,iCAAA,IAAAC,OAAA,GAAc,IAAd;AAEA,MAAIzB,KAAJ;AACE,QAAA0B,KAAA,CAAU1B,KAAV,EAAiBC,iBAAjB,CAAA;AADF;AAzI4D,CAA9D;AA6IAT,IAAAmC,SAAA,CAAcnC,IAAAG,OAAAG,aAAd,EAAwCN,IAAAG,OAAAiC,MAAxC,CAAA;AAOA,sBAAApC,IAAAG,OAAAG,aAAA+B,YAAA,GAAuC,CACrCC,KAAM,CAD+B,EAErCC,OAAQ,CAF6B,EAGrCC,MAAO,CAH8B,CAAvC;AAWA,sBAAAxC,IAAAG,OAAAG,aAAAmC,YAAA,GAAuC,CACrCC,MAAO,OAD8B,EAErCC,IAAK,KAFgC,EAGrCC,MAAO,OAH8B,CAAvC;AAYA;;;;AAAA5C,IAAAG,OAAAG,aAAAuC,YAAA,GAAuC7C,IAAA8C,MAAAC,OAAA,CAAkB,CACvD,CADuD,EAEvD,CAFuD,EAGvD,CAHuD,CAAlB,CAAvC;AAWA,qCAAA/C,IAAAG,OAAAG,aAAA0C,cAAA,GAAyChD,IAAAG,OAAAG,aAAAuC,YAAzC;AAOA,2EAAA7C,IAAAG,OAAAG,aAAA2C,oBAAA,GAA+CjD,IAAA8C,MAAAC,OAAA,CAAkB,CAC/D,EAAG/C,IAAAG,OAAAG,aAAAmC,YAAAG,MAD4D,EAE/D,EAAG5C,IAAAG,OAAAG,aAAAmC,YAAAE,IAF4D,EAG/D,EAAG3C,IAAAG,OAAAG,aAAAmC,YAAAC,MAH4D,CAAlB,CAA/C;AAaA;;;;AAAA1C,IAAAG,OAAAG,aAAA4C,UAAAhB,KAAA,GAA0CiB,QAAQ,CAACC,CAAD,EAAI3C,iBAAJ,CAAuB;AACvE,MAAIE,OAAO,IAAAA,KAAPA,GAAmByC,CAAAzC,KAAvB;AADuE,wBAOvE,IAAI0C,gBACAD,CAAAE,eAAA,IAAoBF,CAAAE,eAAAC,OAApB,GAA8CH,CAAAE,eAAA,CAAiB,CAAjB,CAA9C,GAAoE,IADxE;AAIA,MAAA1C,OAAA,uBAAkC,CAACwC,CAAAxC,OAAD,CAAlC,IAAgDwC,CAAAI,WAAhD;AAGA,MAAA3C,cAAA,uBAAyC,CAACJ,iBAAD,CAAzC;AAEA,MAAIK,oCAAoC,CAACsC,CAAAtC,cAAD,CAAxC;AACA,MAAIA,aAAJ;AAKE,QAAId,IAAAyD,UAAAC,MAAJ;AACE,UAAI,CAAC1D,IAAA2D,QAAAC,kBAAA,CAA+B9C,aAA/B,EAA8C,UAA9C,CAAL;AACEA,qBAAA,GAAgB,IAAhB;AADF;AADF;AALF;AAUO,QAAIH,IAAJ,IAAYX,IAAAG,OAAA0D,UAAAC,UAAZ;AACLhD,mBAAA,GAAgBsC,CAAAW,YAAhB;AADK;AAEA,UAAIpD,IAAJ,IAAYX,IAAAG,OAAA0D,UAAAG,SAAZ;AACLlD,qBAAA,GAAgBsC,CAAAa,UAAhB;AADK;AAFA;AAVP;AAgBA,MAAAnD,cAAA,GAAqBA,aAArB;AAEA,MAAIuC,aAAJ,CAAmB;AACjB,QAAApC,QAAA,GAAeoC,aAAApC,QAAA,KAA0BiD,SAA1B,GAAsCb,aAAApC,QAAtC,GACsCoC,aAAAc,MADrD;AAEA,QAAAjD,QAAA,GAAemC,aAAAnC,QAAA,KAA0BgD,SAA1B,GAAsCb,aAAAnC,QAAtC,GACsCmC,aAAAe,MADrD;AAEA,QAAAjD,QAAA,GAAekC,aAAAlC,QAAf,IAAwC,CAAxC;AACA,QAAAC,QAAA,GAAeiC,aAAAjC,QAAf,IAAwC,CAAxC;AANiB,GAAnB,KAOO;AACL,QAAIpB,IAAAG,OAAAC,0BAAJ,CAA2C;AACzC,UAAAW,QAAA,GAAgBqC,CAAAiB,OAAD,KAAcH,SAAd,GAA2Bd,CAAAiB,OAA3B,GAAsCjB,CAAArC,QAArD;AACA,UAAAC,QAAA,GAAgBoC,CAAAkB,OAAD,KAAcJ,SAAd,GAA2Bd,CAAAkB,OAA3B,GAAsClB,CAAApC,QAArD;AAFyC,KAA3C,KAGO;AAGL,UAAAD,QAAA,GAAgBf,IAAAyD,UAAAc,OAAD,IAA0BnB,CAAArC,QAA1B,KAAwCmD,SAAxC,GACXd,CAAArC,QADW,GAEXqC,CAAAiB,OAFJ;AAGA,UAAArD,QAAA,GAAgBhB,IAAAyD,UAAAc,OAAD,IAA0BnB,CAAApC,QAA1B,KAAwCkD,SAAxC,GACXd,CAAApC,QADW,GAEXoC,CAAAkB,OAFJ;AANK;AAUP,QAAArD,QAAA,GAAemC,CAAAnC,QAAA,KAAciD,SAAd,GAA0Bd,CAAAnC,QAA1B,GAAsCmC,CAAAe,MAArD;AACA,QAAAjD,QAAA,GAAekC,CAAAlC,QAAA,KAAcgD,SAAd,GAA0Bd,CAAAlC,QAA1B,GAAsCkC,CAAAgB,MAArD;AACA,QAAAjD,QAAA,GAAeiC,CAAAjC,QAAf,IAA4B,CAA5B;AACA,QAAAC,QAAA,GAAegC,CAAAhC,QAAf,IAA4B,CAA5B;AAjBK;AAoBP,MAAAC,OAAA,GAAc+B,CAAA/B,OAAd;AAEA,MAAAE,QAAA,GAAe6B,CAAA7B,QAAf,IAA4B,CAA5B;AACA,MAAAD,IAAA,GAAW8B,CAAA9B,IAAX,IAAoB,EAApB;AACA,MAAAE,SAAA,GAAgB4B,CAAA5B,SAAhB,KAA+Bb,IAAA,IAAQ,UAAR,GAAqByC,CAAA7B,QAArB,GAAiC,CAAhE;AACA,MAAAE,QAAA,GAAe2B,CAAA3B,QAAf;AACA,MAAAC,OAAA,GAAc0B,CAAA1B,OAAd;AACA,MAAAC,SAAA,GAAgByB,CAAAzB,SAAhB;AACA,MAAAC,QAAA,GAAewB,CAAAxB,QAAf;AACA,MAAAE,oBAAA,GAA2B9B,IAAAyD,UAAAe,IAAA,GAAqBpB,CAAAxB,QAArB,GAAiCwB,CAAA3B,QAA5D;AACA,MAAAM,UAAA,GAAiBqB,CAAArB,UAAjB,IAAgC,CAAhC;AACA,MAAAC,YAAA,GAAmBhC,IAAAG,OAAAG,aAAAmE,gBAAA,CAAyCrB,CAAzC,CAAnB;AACA,MAAAvB,MAAA,GAAauB,CAAAvB,MAAb;AACA,MAAAI,OAAA,GAAcmB,CAAd;AACA,MAAIA,CAAAsB,iBAAJ;AACE,QAAAC,eAAA,EAAA;AADF;AA5EuE,CAAzE;AAkGA;;;;AAAA3E,IAAAG,OAAAG,aAAA4C,UAAA0B,SAAA,GAA8CC,QAAQ,CAACxD,MAAD,CAAS;AAC7D,MAAI,CAACrB,IAAAG,OAAA2E,eAAAC,eAAL;AACE,QAAI,IAAApE,KAAJ,IAAiB,OAAjB;AACE,aAAOU,MAAP,IAAiBrB,IAAAG,OAAAG,aAAA+B,YAAAC,KAAjB;AADF;AAGE,aAAO,CAAC,EACJ,IAAAL,OAAAZ,OADI,GACiBrB,IAAAG,OAAAG,aAAA0C,cAAA,CAAuC3B,MAAvC,CADjB,CAAR;AAHF;AADF;AAQE,WAAO,IAAAY,OAAAZ,OAAP,IAA6BA,MAA7B;AARF;AAD6D,CAA/D;AAsBA;;;AAAArB,IAAAG,OAAAG,aAAA4C,UAAA8B,oBAAA,GAAyDC,QAAQ,EAAG;AAGlE,SAAO,IAAAL,SAAA,CAAc5E,IAAAG,OAAAG,aAAA+B,YAAAC,KAAd,CAAP,IACI,EAAEtC,IAAAyD,UAAAc,OAAF,IAA2BvE,IAAAyD,UAAAe,IAA3B,IAAiD,IAAA/C,QAAjD,CADJ;AAHkE,CAApE;AAWA,iBAAAzB,IAAAG,OAAAG,aAAA4C,UAAAgC,gBAAA,GAAqDC,QAAQ,EAAG;AAC9DnF,MAAAG,OAAAG,aAAA8E,YAAAF,gBAAAG,KAAA,CAA0D,IAA1D,CAAA;AACA,MAAI,IAAApD,OAAAiD,gBAAJ;AACE,QAAAjD,OAAAiD,gBAAA,EAAA;AADF;AAGE,QAAAjD,OAAAqD,aAAA,GAA2B,IAA3B;AAHF;AAF8D,CAAhE;AAaA,iBAAAtF,IAAAG,OAAAG,aAAA4C,UAAAyB,eAAA,GAAoDY,QAAQ,EAAG;AAC7DvF,MAAAG,OAAAG,aAAA8E,YAAAT,eAAAU,KAAA,CAAyD,IAAzD,CAAA;AACA,MAAIG,KAAK,IAAAvD,OAAT;AACA,MAAI,CAACuD,EAAAb,eAAL,CAAwB;AACtBa,MAAAC,YAAA,GAAiB,KAAjB;AACA,QAAIzF,IAAAG,OAAA2E,eAAAY,gCAAJ;AAEE,SAAI;AAYF,YAAIC,QAAQ,GAAZ;AACA,YAAIC,SAAS,GAAb;AACA,YAAIJ,EAAA/D,QAAJ,IAAkB+D,EAAAjE,QAAlB,IAAgCoE,KAAhC,IAAyCH,EAAAjE,QAAzC,IAAuDqE,MAAvD;AACEJ,YAAAjE,QAAA,GAAa,EAAb;AADF;AAdE,OAiBF,QAAOsE,EAAP,CAAW;;AAnBf;AAFsB,GAAxB;AA6BEL,MAAAb,eAAA,EAAA;AA7BF;AAH6D,CAA/D;AAwCA;;;AAAA3E,IAAAG,OAAAG,aAAA4C,UAAA4C,gBAAA,GAAqDC,QAAQ,EAAG;AAC9D,SAAO,IAAA9D,OAAP;AAD8D,CAAhE;AAWA;;;;;AAAAjC,IAAAG,OAAAG,aAAAmE,gBAAA,GAA2CuB,QAAQ,CAAC5C,CAAD,CAAI;AACrD,MAAI,MAAQA,EAAApB,YAAZ,KAA+B,QAA/B;AACE,WAAOoB,CAAApB,YAAP;AADF;AAKA,SAAOhC,IAAAG,OAAAG,aAAA2C,oBAAA,CAA6CG,CAAApB,YAA7C,CAAP,IAAsE,EAAtE;AANqD,CAAvD;;",
"sources":["goog/events/browserevent.js"],
"sourcesContent":["// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A patched, standardized event object for browser events.\n *\n * <pre>\n * The patched event object contains the following members:\n * - type           {string}    Event type, e.g. 'click'\n * - target         {Object}    The element that actually triggered the event\n * - currentTarget  {Object}    The element the listener is attached to\n * - relatedTarget  {Object}    For mouseover and mouseout, the previous object\n * - offsetX        {number}    X-coordinate relative to target\n * - offsetY        {number}    Y-coordinate relative to target\n * - clientX        {number}    X-coordinate relative to viewport\n * - clientY        {number}    Y-coordinate relative to viewport\n * - screenX        {number}    X-coordinate relative to the edge of the screen\n * - screenY        {number}    Y-coordinate relative to the edge of the screen\n * - button         {number}    Mouse button. Use isButton() to test.\n * - keyCode        {number}    Key-code\n * - ctrlKey        {boolean}   Was ctrl key depressed\n * - altKey         {boolean}   Was alt key depressed\n * - shiftKey       {boolean}   Was shift key depressed\n * - metaKey        {boolean}   Was meta key depressed\n * - pointerId      {number}    Pointer ID\n * - pointerType    {string}    Pointer type, e.g. 'mouse', 'pen', or 'touch'\n * - defaultPrevented {boolean} Whether the default action has been prevented\n * - state          {Object}    History state object\n *\n * NOTE: The keyCode member contains the raw browser keyCode. For normalized\n * key and character code use {@link goog.events.KeyHandler}.\n * </pre>\n *\n * @author arv@google.com (Erik Arvidsson)\n */\n\ngoog.provide('goog.events.BrowserEvent');\ngoog.provide('goog.events.BrowserEvent.MouseButton');\ngoog.provide('goog.events.BrowserEvent.PointerType');\n\ngoog.require('goog.debug');\ngoog.require('goog.events.BrowserFeature');\ngoog.require('goog.events.Event');\ngoog.require('goog.events.EventType');\ngoog.require('goog.reflect');\ngoog.require('goog.userAgent');\n\n/**\n * @define {boolean} If true, use the layerX and layerY properties of a native\n * browser event over the offsetX and offsetY properties, which cause expensive\n * reflow. If layerX or layerY is not defined, offsetX and offsetY will be used\n * as usual.\n */\ngoog.events.USE_LAYER_XY_AS_OFFSET_XY =\n    goog.define('goog.events.USE_LAYER_XY_AS_OFFSET_XY', false);\n\n/**\n * Accepts a browser event object and creates a patched, cross browser event\n * object.\n * The content of this object will not be initialized if no event object is\n * provided. If this is the case, init() needs to be invoked separately.\n * @param {Event=} opt_e Browser event object.\n * @param {EventTarget=} opt_currentTarget Current target for event.\n * @constructor\n * @extends {goog.events.Event}\n */\ngoog.events.BrowserEvent = function(opt_e, opt_currentTarget) {\n  goog.events.BrowserEvent.base(this, 'constructor', opt_e ? opt_e.type : '');\n\n  /**\n   * Target that fired the event.\n   * @override\n   * @type {?Node}\n   */\n  this.target = null;\n\n  /**\n   * Node that had the listener attached.\n   * @override\n   * @type {?Node|undefined}\n   */\n  this.currentTarget = null;\n\n  /**\n   * For mouseover and mouseout events, the related object for the event.\n   * @type {?Node}\n   */\n  this.relatedTarget = null;\n\n  /**\n   * X-coordinate relative to target.\n   * @type {number}\n   */\n  this.offsetX = 0;\n\n  /**\n   * Y-coordinate relative to target.\n   * @type {number}\n   */\n  this.offsetY = 0;\n\n  /**\n   * X-coordinate relative to the window.\n   * @type {number}\n   */\n  this.clientX = 0;\n\n  /**\n   * Y-coordinate relative to the window.\n   * @type {number}\n   */\n  this.clientY = 0;\n\n  /**\n   * X-coordinate relative to the monitor.\n   * @type {number}\n   */\n  this.screenX = 0;\n\n  /**\n   * Y-coordinate relative to the monitor.\n   * @type {number}\n   */\n  this.screenY = 0;\n\n  /**\n   * Which mouse button was pressed.\n   * @type {number}\n   */\n  this.button = 0;\n\n  /**\n   * Key of key press.\n   * @type {string}\n   */\n  this.key = '';\n\n  /**\n   * Keycode of key press.\n   * @type {number}\n   */\n  this.keyCode = 0;\n\n  /**\n   * Keycode of key press.\n   * @type {number}\n   */\n  this.charCode = 0;\n\n  /**\n   * Whether control was pressed at time of event.\n   * @type {boolean}\n   */\n  this.ctrlKey = false;\n\n  /**\n   * Whether alt was pressed at time of event.\n   * @type {boolean}\n   */\n  this.altKey = false;\n\n  /**\n   * Whether shift was pressed at time of event.\n   * @type {boolean}\n   */\n  this.shiftKey = false;\n\n  /**\n   * Whether the meta key was pressed at time of event.\n   * @type {boolean}\n   */\n  this.metaKey = false;\n\n  /**\n   * History state object, only set for PopState events where it's a copy of the\n   * state object provided to pushState or replaceState.\n   * @type {?Object}\n   */\n  this.state = null;\n\n  /**\n   * Whether the default platform modifier key was pressed at time of event.\n   * (This is control for all platforms except Mac, where it's Meta.)\n   * @type {boolean}\n   */\n  this.platformModifierKey = false;\n\n  /**\n   * @type {number}\n   */\n  this.pointerId = 0;\n\n  /**\n   * @type {string}\n   */\n  this.pointerType = '';\n\n  /**\n   * The browser event object.\n   * @private {?Event}\n   */\n  this.event_ = null;\n\n  if (opt_e) {\n    this.init(opt_e, opt_currentTarget);\n  }\n};\ngoog.inherits(goog.events.BrowserEvent, goog.events.Event);\n\n\n/**\n * Normalized button constants for the mouse.\n * @enum {number}\n */\ngoog.events.BrowserEvent.MouseButton = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2\n};\n\n\n/**\n * Normalized pointer type constants for pointer events.\n * @enum {string}\n */\ngoog.events.BrowserEvent.PointerType = {\n  MOUSE: 'mouse',\n  PEN: 'pen',\n  TOUCH: 'touch'\n};\n\n\n/**\n * Static data for mapping mouse buttons.\n * @type {!Array<number>}\n * @deprecated Use `goog.events.BrowserEvent.IE_BUTTON_MAP` instead.\n */\ngoog.events.BrowserEvent.IEButtonMap = goog.debug.freeze([\n  1,  // LEFT\n  4,  // MIDDLE\n  2   // RIGHT\n]);\n\n\n/**\n * Static data for mapping mouse buttons.\n * @const {!Array<number>}\n */\ngoog.events.BrowserEvent.IE_BUTTON_MAP = goog.events.BrowserEvent.IEButtonMap;\n\n\n/**\n * Static data for mapping MSPointerEvent types to PointerEvent types.\n * @const {!Object<number, goog.events.BrowserEvent.PointerType>}\n */\ngoog.events.BrowserEvent.IE_POINTER_TYPE_MAP = goog.debug.freeze({\n  2: goog.events.BrowserEvent.PointerType.TOUCH,\n  3: goog.events.BrowserEvent.PointerType.PEN,\n  4: goog.events.BrowserEvent.PointerType.MOUSE\n});\n\n\n/**\n * Accepts a browser event object and creates a patched, cross browser event\n * object.\n * @param {Event} e Browser event object.\n * @param {EventTarget=} opt_currentTarget Current target for event.\n */\ngoog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {\n  var type = this.type = e.type;\n\n  /**\n   * On touch devices use the first \"changed touch\" as the relevant touch.\n   * @type {?Touch}\n   */\n  var relevantTouch =\n      e.changedTouches && e.changedTouches.length ? e.changedTouches[0] : null;\n\n  // TODO(nicksantos): Change this.target to type EventTarget.\n  this.target = /** @type {Node} */ (e.target) || e.srcElement;\n\n  // TODO(nicksantos): Change this.currentTarget to type EventTarget.\n  this.currentTarget = /** @type {Node} */ (opt_currentTarget);\n\n  var relatedTarget = /** @type {Node} */ (e.relatedTarget);\n  if (relatedTarget) {\n    // There's a bug in FireFox where sometimes, relatedTarget will be a\n    // chrome element, and accessing any property of it will get a permission\n    // denied exception. See:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=497780\n    if (goog.userAgent.GECKO) {\n      if (!goog.reflect.canAccessProperty(relatedTarget, 'nodeName')) {\n        relatedTarget = null;\n      }\n    }\n  } else if (type == goog.events.EventType.MOUSEOVER) {\n    relatedTarget = e.fromElement;\n  } else if (type == goog.events.EventType.MOUSEOUT) {\n    relatedTarget = e.toElement;\n  }\n\n  this.relatedTarget = relatedTarget;\n\n  if (relevantTouch) {\n    this.clientX = relevantTouch.clientX !== undefined ? relevantTouch.clientX :\n                                                         relevantTouch.pageX;\n    this.clientY = relevantTouch.clientY !== undefined ? relevantTouch.clientY :\n                                                         relevantTouch.pageY;\n    this.screenX = relevantTouch.screenX || 0;\n    this.screenY = relevantTouch.screenY || 0;\n  } else {\n    if (goog.events.USE_LAYER_XY_AS_OFFSET_XY) {\n      this.offsetX = (e.layerX !== undefined) ? e.layerX : e.offsetX;\n      this.offsetY = (e.layerY !== undefined) ? e.layerY : e.offsetY;\n    } else {\n      // Webkit emits a lame warning whenever layerX/layerY is accessed.\n      // http://code.google.com/p/chromium/issues/detail?id=101733\n      this.offsetX = (goog.userAgent.WEBKIT || e.offsetX !== undefined) ?\n          e.offsetX :\n          e.layerX;\n      this.offsetY = (goog.userAgent.WEBKIT || e.offsetY !== undefined) ?\n          e.offsetY :\n          e.layerY;\n    }\n    this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;\n    this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;\n    this.screenX = e.screenX || 0;\n    this.screenY = e.screenY || 0;\n  }\n\n  this.button = e.button;\n\n  this.keyCode = e.keyCode || 0;\n  this.key = e.key || '';\n  this.charCode = e.charCode || (type == 'keypress' ? e.keyCode : 0);\n  this.ctrlKey = e.ctrlKey;\n  this.altKey = e.altKey;\n  this.shiftKey = e.shiftKey;\n  this.metaKey = e.metaKey;\n  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;\n  this.pointerId = e.pointerId || 0;\n  this.pointerType = goog.events.BrowserEvent.getPointerType_(e);\n  this.state = e.state;\n  this.event_ = e;\n  if (e.defaultPrevented) {\n    this.preventDefault();\n  }\n};\n\n\n/**\n * Tests to see which button was pressed during the event. This is really only\n * useful in IE and Gecko browsers. And in IE, it's only useful for\n * mousedown/mouseup events, because click only fires for the left mouse button.\n *\n * Safari 2 only reports the left button being clicked, and uses the value '1'\n * instead of 0. Opera only reports a mousedown event for the middle button, and\n * no mouse events for the right button. Opera has default behavior for left and\n * middle click that can only be overridden via a configuration setting.\n *\n * There's a nice table of this mess at http://www.unixpapa.com/js/mouse.html.\n *\n * @param {goog.events.BrowserEvent.MouseButton} button The button\n *     to test for.\n * @return {boolean} True if button was pressed.\n */\ngoog.events.BrowserEvent.prototype.isButton = function(button) {\n  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {\n    if (this.type == 'click') {\n      return button == goog.events.BrowserEvent.MouseButton.LEFT;\n    } else {\n      return !!(\n          this.event_.button & goog.events.BrowserEvent.IE_BUTTON_MAP[button]);\n    }\n  } else {\n    return this.event_.button == button;\n  }\n};\n\n\n/**\n * Whether this has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @return {boolean} The result.\n */\ngoog.events.BrowserEvent.prototype.isMouseActionButton = function() {\n  // Webkit does not ctrl+click to be a right-click, so we\n  // normalize it to behave like Gecko and Opera.\n  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) &&\n      !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);\n};\n\n\n/**\n * @override\n */\ngoog.events.BrowserEvent.prototype.stopPropagation = function() {\n  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);\n  if (this.event_.stopPropagation) {\n    this.event_.stopPropagation();\n  } else {\n    this.event_.cancelBubble = true;\n  }\n};\n\n\n/**\n * @override\n */\ngoog.events.BrowserEvent.prototype.preventDefault = function() {\n  goog.events.BrowserEvent.superClass_.preventDefault.call(this);\n  var be = this.event_;\n  if (!be.preventDefault) {\n    be.returnValue = false;\n    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {\n\n      try {\n        // Most keys can be prevented using returnValue. Some special keys\n        // require setting the keyCode to -1 as well:\n        //\n        // In IE7:\n        // F3, F5, F10, F11, Ctrl+P, Crtl+O, Ctrl+F (these are taken from IE6)\n        //\n        // In IE8:\n        // Ctrl+P, Crtl+O, Ctrl+F (F1-F12 cannot be stopped through the event)\n        //\n        // We therefore do this for all function keys as well as when Ctrl key\n        // is pressed.\n        var VK_F1 = 112;\n        var VK_F12 = 123;\n        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {\n          be.keyCode = -1;\n        }\n      } catch (ex) {\n        // IE throws an 'access denied' exception when trying to change\n        // keyCode in some situations (e.g. srcElement is input[type=file],\n        // or srcElement is an anchor tag rewritten by parent's innerHTML).\n        // Do nothing in this case.\n      }\n    }\n  } else {\n    be.preventDefault();\n  }\n};\n\n\n/**\n * @return {Event} The underlying browser event object.\n */\ngoog.events.BrowserEvent.prototype.getBrowserEvent = function() {\n  return this.event_;\n};\n\n\n/**\n * Extracts the pointer type from the given event.\n * @param {!Event} e\n * @return {string} The pointer type, e.g. 'mouse', 'pen', or 'touch'.\n * @private\n */\ngoog.events.BrowserEvent.getPointerType_ = function(e) {\n  if (typeof (e.pointerType) === 'string') {\n    return e.pointerType;\n  }\n  // IE10 uses integer codes for pointer type.\n  // https://msdn.microsoft.com/en-us/library/hh772359(v=vs.85).aspx\n  return goog.events.BrowserEvent.IE_POINTER_TYPE_MAP[e.pointerType] || '';\n};\n"],
"names":["goog","provide","require","events","USE_LAYER_XY_AS_OFFSET_XY","define","BrowserEvent","goog.events.BrowserEvent","opt_e","opt_currentTarget","base","type","target","currentTarget","relatedTarget","offsetX","offsetY","clientX","clientY","screenX","screenY","button","key","keyCode","charCode","ctrlKey","altKey","shiftKey","metaKey","state","platformModifierKey","pointerId","pointerType","event_","init","inherits","Event","MouseButton","LEFT","MIDDLE","RIGHT","PointerType","MOUSE","PEN","TOUCH","IEButtonMap","debug","freeze","IE_BUTTON_MAP","IE_POINTER_TYPE_MAP","prototype","goog.events.BrowserEvent.prototype.init","e","relevantTouch","changedTouches","length","srcElement","userAgent","GECKO","reflect","canAccessProperty","EventType","MOUSEOVER","fromElement","MOUSEOUT","toElement","undefined","pageX","pageY","layerX","layerY","WEBKIT","MAC","getPointerType_","defaultPrevented","preventDefault","isButton","goog.events.BrowserEvent.prototype.isButton","BrowserFeature","HAS_W3C_BUTTON","isMouseActionButton","goog.events.BrowserEvent.prototype.isMouseActionButton","stopPropagation","goog.events.BrowserEvent.prototype.stopPropagation","superClass_","call","cancelBubble","goog.events.BrowserEvent.prototype.preventDefault","be","returnValue","SET_KEY_CODE_TO_PREVENT_DEFAULT","VK_F1","VK_F12","ex","getBrowserEvent","goog.events.BrowserEvent.prototype.getBrowserEvent","goog.events.BrowserEvent.getPointerType_"]
}
